<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://lisz.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lisz.me/" rel="alternate" type="text/html" /><updated>2022-07-22T16:08:03+09:00</updated><id>https://lisz.me/feed.xml</id><title type="html">Mr Li</title><subtitle>个人的一个技术博客站点，主要用于记录个人在学习过程中遇到的技术问题及解决方法、技术实验，以及一些比较有趣的事情。</subtitle><author><name>zhonger</name></author><entry><title type="html">LDAP 集成之 Nextcloud 篇</title><link href="https://lisz.me/tech/webmaster/ldap-nextcloud.html" rel="alternate" type="text/html" title="LDAP 集成之 Nextcloud 篇" /><published>2022-06-24T14:40:00+09:00</published><updated>2022-06-24T14:40:00+09:00</updated><id>https://lisz.me/tech/webmaster/ldap-nextcloud</id><content type="html" xml:base="https://lisz.me/tech/webmaster/ldap-nextcloud.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;nextcloud-vs-owncloud&quot;&gt;Nextcloud vs ownCloud&lt;/h3&gt;

&lt;p&gt;  &lt;a href=&quot;https://nextcloud.com&quot;&gt;Nextcloud&lt;/a&gt; 是一款非常适合个人或者团队使用的开源网盘软件，也有一款和其名字非常相似的 &lt;a href=&quot;https://owncloud.com&quot;&gt;ownCloud&lt;/a&gt;。实际上这两款开源网盘是出自一个人之手，只不过在发展的过程中（2016年），ownCloud 团队内部产生了一些意见分歧，造成了核心开发人员出走创建了 Nextcloud。与 ownCloud 相比，Nextcloud 更加在乎宽广的功能多样性以及安全性，比如说视频会议、在线协作、提供对密码暴力破解的保护、限制密码错误登录的次数等。ownCloud 中可能也有这些功能，但并不包含在开源版本中，而是需要企业订阅版本才能享受这些功能。从这些看来，Nextcloud 似乎更加适合个人或团队使用。&lt;/p&gt;

&lt;p&gt;  据笔者所知，国内 F 搜团队所提供的网盘文档-&lt;a href=&quot;https:/fdocs.cn&quot;&gt;F 文档&lt;/a&gt; 实际上就是用 Nextcloud 搭建的。其提供的在线文档编辑采用的是开源的 &lt;a href=&quot;https://www.onlyoffice.com&quot;&gt;OnlyOffice&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;nextcloud-vs-seafile&quot;&gt;Nextcloud vs Seafile&lt;/h3&gt;

&lt;p&gt;  除了 Nextcloud，国内也有一款也比较好用的开源网盘 &lt;a href=&quot;https://www.seafile.com&quot;&gt;Seafile&lt;/a&gt;。Nextcloud 与 Seafile 虽然都是网盘，但是关注点不大一样。正如上面讲到的 Nextcloud 更在乎协作、功能多样化，而 Seafile 则更在乎稳定和安全。举个例子，Nextcloud 如果不设置服务端加密，所有的文件都会直接存在文件系统中。如果可以访问服务器的文件系统，那么意味着无须任何用户自身的许可就可以查看所有文件。Seafile 默认就将所有文件都分成小块存储，这样一来你是无法直接通过服务器的文件系统读取文件内容的。当然，这样分块存储也有一个好处，在客户端设置同步时会分块进行增量同步，提升了同步的速度和可靠性。不至于一个几个 G 的大文件传到一半中断后又要从头开始上传。不过，这样也有一个比较明显的坏处，如果不借助 Seafile 或其支持团队的帮助，无法自行从分块数据恢复原始文件内容。&lt;/p&gt;

&lt;h3 id=&quot;ldap-认证集成&quot;&gt;LDAP 认证集成&lt;/h3&gt;

&lt;p&gt;  从 Nextcloud、ownCloud、Seafile 的官网来看，三者都支持 LDAP/AD 认证集成，但实际上 Seafile 是需要专业版订阅才能有这个功能的，包括 Office 文件预览和编辑、全文检索、断点续传等功能也是需要专业版订阅的。Nextcloud 和 ownCloud 都在开源版本提供了 LDAP 认证集成功能。所以这里也不考虑 Seafile，只以 Nextcloud 为例介绍 LDAP 集成到网盘中。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  由于之前笔者也曾写过&lt;a href=&quot;../docker/nextcloud.html&quot;&gt;《Nextcloud 搭建自己的云盘》&lt;/a&gt;和&lt;a href=&quot;nextcloud-upgrade.html&quot;&gt;《Nextcloud 升级那些事儿》&lt;/a&gt;两篇文章介绍如何安装和升级 Nextcloud ，所以这里就不再对此进行赘述了。当前开始的环境即是已正常运行的 Nextcloud 实例。&lt;/p&gt;

&lt;h3 id=&quot;启用-ldap-插件&quot;&gt;启用 LDAP 插件&lt;/h3&gt;

&lt;p&gt;  在 Nextcloud 的&lt;strong&gt;应用捆绑包&lt;/strong&gt;的&lt;strong&gt;企业捆绑包&lt;/strong&gt;里就有我们想要用的 LDAP 认证集成插件，点击右侧&lt;strong&gt;启用&lt;/strong&gt;按钮即可正常启用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/nFyWzS.webp&quot; alt=&quot;nFyWzS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-ldap-连接&quot;&gt;配置 LDAP 连接&lt;/h3&gt;

&lt;p&gt;  在启用 LDAP 插件后，我们就可以在管理员的设置中看见相应的选项。如下图所示，点击用户头像弹出菜单中的&lt;strong&gt;设置&lt;/strong&gt;链接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/8FCrL0.webp&quot; alt=&quot;8FCrL0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  由于这个设置会同时包含个人用户设置和管理员设置，可以将左侧的导航栏往下拉，看到&lt;strong&gt;管理&lt;/strong&gt;中的 &lt;strong&gt;LDAP/AD 集成&lt;/strong&gt; 点击进入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/WiwcTt.webp&quot; alt=&quot;WiwcTt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  下面是 LDAP/AD 集成的基本设置，主要填写四个信息：LDAP 服务器地址、LDAP 管理员 DN、LDAP 管理员密码、查询基础 DN。由于此处填写的是非真实信息，所以下面会显示&lt;strong&gt;配置错误&lt;/strong&gt;的提示。如果填写的 LDAP 信息无误，会自动变成&lt;strong&gt;配置成功&lt;/strong&gt;的提示。然后点击&lt;strong&gt;继续&lt;/strong&gt;按钮，后面的设置可以保留默认选项即可。当然如果 LDAP 服务与一般的设置有些不同，也要根据实际情况对后面的用户、登录属性、群组信息进行调整，这里就不一一介绍了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/Lr00tl.webp&quot; alt=&quot;Lr00tl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  以上配置均完成之后，即可退出登录即可使用 LDAP 账户和密码登录验证是否配置成功（登录界面不会有任何改变）。&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;  可能和 Gitlab 的情况有点类似，Nextcloud 本身就有用户体系，然后才接入的 LDAP 认证。其实，我们还是希望 LDAP 用户和原有用户能够自动识别成同一用户，无感完成合并。这里 Nextcloud 和 Gitlab 一样都是凭借着邮箱来判断的。当 LDAP 用户邮箱与 Nextcloud 原有用户邮箱一致时，自动合并成一个用户，并且不再拥有修改用户密码的权利。虽然已经集成了 LDAP 认证，但是我们依然可以用 Nextcloud 自身的用户体系去创建新用户，这其实也是两个用户体系、一个软件系统。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://news.gandi.net/zh-hans/2021/05/nextcloud-vs-owncloud-which-cloud-solution-should-you-choose/&quot;&gt;Nextcloud vs ownCloud? 该选择哪一个云端代管方案呢？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wzfou.com/nextcloud-seafile/&quot;&gt;NextCloud与Seafile对比使用-NextCloud各项全能 Seafile优势突出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="LDAP" /><category term="Nextcloud" /><summary type="html">前言</summary></entry><entry><title type="html">LDAP 集成之 Gitlab 篇</title><link href="https://lisz.me/tech/webmaster/ldap-gitlab.html" rel="alternate" type="text/html" title="LDAP 集成之 Gitlab 篇" /><published>2022-06-23T15:20:00+09:00</published><updated>2022-06-23T15:20:00+09:00</updated><id>https://lisz.me/tech/webmaster/ldap-gitlab</id><content type="html" xml:base="https://lisz.me/tech/webmaster/ldap-gitlab.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Gitlab 是一款对标 Github 的开源 Git 管理软件，能够为用户提供非常丰富的功能。因为之前写过的&lt;a href=&quot;../tech/docker/gitlab.html&quot;&gt;《私有代码托管平台的搭建与运维》&lt;/a&gt;和&lt;a href=&quot;./gitlab-upgrade.html&quot;&gt;《Gitlab 升级那些事儿》&lt;/a&gt;已经对 Gitlab 作了比较详细的介绍，这里就不多赘述了。&lt;/p&gt;

&lt;h3 id=&quot;国内高校-gitlab&quot;&gt;国内高校 Gitlab&lt;/h3&gt;

&lt;p&gt;  Gitlab 提供了对于多种认证方式的支持，包括自带的用户体系、LDAP、CAS、OAuth 2.0 及其他第三方认证方式。这也为我们实现不同的用户需求提供了可能。国内高校中，中科大和南京大学都为本校生提供了基于 Gitlab 的代码托管服务，访问地址如下。唯一不同的是，中科大采用的社区版本（CE），南京大学采用的是由 Gitlab 在中国的子公司极狐支持的企业版本（EE），据说有一些更先进的功能。当然，考虑到使用 Gitlab 的主要需求是代码托管，而非 Gitlab Pages 功能，两家都没有提供该功能。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;学校&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Git URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;中科大&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://git.lug.ustc.edu.cn&quot;&gt;https://git.lug.ustc.edu.cn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;南京大学&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://git.nju.edu.cn&quot;&gt;https://git.nju.edu.cn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;  言归正传，中科大和南京大学都可以自助注册，只需要是使用学校邮箱即可。中科大同时也提供了 Github、Gitlab、学校一卡通认证。自助注册的好处是，即使已经离校无法使用学校邮箱，实际上也还是可以保留账户继续使用（除非专门对毕业生进行封禁）。其实，对于内部团队使用的 Gitlab 来说，由管理员手动创建用户也是没有什么问题的，毕竟人数不会太多。但是这样一来，可能会出现维护多个账号和密码的烦恼。因此，采用 LDAP 来接入认证是比较合适的。对于非团队用户不打算放在 LDAP 目录里也可以手动在 Gitlab 创建用户，当用户不再使用时就可以封禁。&lt;/p&gt;

&lt;h3 id=&quot;ldap-用户合并&quot;&gt;LDAP 用户合并&lt;/h3&gt;

&lt;p&gt;  也可能存在先有 Gitlab 账户、然后才有的 LDAP 目录的情况，这也不要紧，因为 Gitlab 支持 LDAP 认证方式的用户与现有用户进行合并。举个例子，如果我已经在 Gitlab 中创建了用户名为 zhonger、邮箱为 zhonger@example.com 的用户，那么我在 LDAP 目录中只需要把 mail 字段也写成 zhonger@example.com 即可被 Gitlab 识别成同一用户。或者说，我们可以在 Gitlab 中增加 LDAP 目录中的 mail 字段的邮箱（Gitlab 支持同一用户绑定多个邮箱），这样在 Gitlab 中使用 LDAP 认证的时候也会被视为同一用户。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于 LDAP 用户的账户名和密码不会被 Gitlab 接管，所以当你使用 LDAP 认证登录后，原有的同邮箱的 Gitlab 用户就会自动丧失修改密码的权利。除此之外，一切照旧。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  为了更加简便实践并且容易复现，这里采用的是常用的 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; Docker 镜像。可以在镜像 Github 页面下载到提供的对应 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml&quot;&gt;docker-compose.yml&lt;/a&gt; 文件。由于 LDAP 并非是默认配置，所以默认是没有 LDAP 配置段的。需要在 docker-compose.yml 文件的 environment 中增加以下环境变量。其中，请根据实际情况更改成相应的信息。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_ENABLED=true&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_LABEL=LDAP&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_HOST=ldap.example.com&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_BIND_DN=cn=admin,dc=example,dc=com&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_PASS=xxxxxxxxxxx&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_UID=uid&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;- LDAP_BASE=ou=people,dc=example,dc=com&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 运行一个 Gitlab 实例。由于初始运行需要执行数据库初始化等操作，可能需要几分钟，之后打开指定的端口即可看到如下类似的登录页面。可以看到，这里默认就是使用 LDAP 登录，次要登录方式才是标准登录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/BaWBKa.webp&quot; alt=&quot;登录页面 Login Page&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  这里 Gitlab 默认使用 uid 作为 username，而非常见 LDAP 登录定义里的 cn 字段，所以只需要最简单的 uid 和 password 即可登录成功。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="LDAP" /><category term="Gitlab" /><summary type="html">前言</summary></entry><entry><title type="html">LDAP 集成之 Dokuwiki 篇</title><link href="https://lisz.me/tech/webmaster/ldap-dokuwiki.html" rel="alternate" type="text/html" title="LDAP 集成之 Dokuwiki 篇" /><published>2022-06-22T15:40:00+09:00</published><updated>2022-06-22T15:40:00+09:00</updated><id>https://lisz.me/tech/webmaster/ldap-dokuwiki</id><content type="html" xml:base="https://lisz.me/tech/webmaster/ldap-dokuwiki.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;百科的发展&quot;&gt;百科的发展&lt;/h3&gt;

&lt;p&gt;  说到百科，国际上最出名的莫过于 &lt;a href=&quot;https://wikipedia.org&quot;&gt;WikiPedia&lt;/a&gt;，而国内最出名的莫过于&lt;a href=&quot;https://baike.baidu.com&quot;&gt;百度百科&lt;/a&gt;。当然，这两者也有一些差别。WikiPedia 支持多种语言，可以自由编辑，不过一般会要求提供必要的参考资料及链接来佐证。百度百科则只支持中文，对于编辑条目也有比较高的要求，一般来说是由专门的人员编写、审核。除了这两家之外，也有一些其他的大众百科，比如 &lt;a href=&quot;https://www.zgbk.com&quot;&gt;中国大百科&lt;/a&gt;、&lt;a href=&quot;https://baike.so.com&quot;&gt;360 百科&lt;/a&gt;、&lt;a href=&quot;https://baike.sogou.com&quot;&gt;搜狗百科&lt;/a&gt; 等。大众百科的显著特点是范围非常广，适合大众科普，而想要查找一些太过详细的知识可能无法满足。&lt;/p&gt;

&lt;p&gt;  于是随着百科特殊化的需求增大，越来越多的专门化或者特殊化的百科也开始涌现，比如与计算机专业相关的 &lt;a href=&quot;https://wiki.swarma.org&quot;&gt;集智百科&lt;/a&gt;、&lt;a href=&quot;https://easyai.tech&quot;&gt;AI 知识库&lt;/a&gt;，与游戏相关的 &lt;a href=&quot;https://www.huijiwiki.com/wiki&quot;&gt;灰机 Wiki&lt;/a&gt;，与二次元动漫、小说相关的 &lt;a href=&quot;https://zh.moegirl.org.cn&quot;&gt;萌娘百科&lt;/a&gt; 等等。这在一定程度上弥补了大众百科的不足，满足了大众对于专门化知识科普或者手册的需求。&lt;/p&gt;

&lt;h3 id=&quot;开源百科程序&quot;&gt;开源百科程序&lt;/h3&gt;

&lt;p&gt;  既然是百科站点，就需要有百科程序来支撑用户管理、条目编辑、条目审核等功能。其实，世界上最大的百科站点 WikiPedia 使用的是免费开源的 &lt;a href=&quot;https://www.mediawiki.org/&quot;&gt;MediaWiki&lt;/a&gt;。而百度百科则是采用自家开发的闭源程序，且与百度账号、百度知道等百度系产品打通。如果自己想要搭建一个百科站点，除了 MediaWiki 外，还有很多免费的选择，比如 &lt;a href=&quot;https://www.dokuwiki.org/&quot;&gt;Dokuwiki&lt;/a&gt;、&lt;a href=&quot;https://js.wiki&quot;&gt;Wiki.js&lt;/a&gt;、&lt;a href=&quot;https://www.notion.so&quot;&gt;Notion&lt;/a&gt; 等等。&lt;/p&gt;

&lt;p&gt;  其中，Dokuwiki 是一个基于 PHP 的、可以百科站点、团队站点两用的开源程序。笔者比较喜欢 Dokuwiki 的一点是，&lt;strong&gt;完全不需要数据库可以独立部署以及支持版本迭代&lt;/strong&gt;。这一点与“一切皆文件”的思想似乎很接近。（😂 实际上是因为笔者不愿意管理数据库） Wiki.js 虽然是基于 NodeJS 编写的，但还是需要连接数据库。Notion 是一款更像个人笔记的软件，无须自行部署，只需要使用 Web 端或者客户端编辑即可。Notion 本身支持很多开放性的功能，甚至说还能和 &lt;a href=&quot;https://www.zotero.org&quot;&gt;zotero&lt;/a&gt; 一起管理文献。如果非常熟悉 Notion 的各种功能，可能用 Notion 来搭建一个百科也非常合适。不过，笔者觉得要达到这种程度可能需要像学习宇宙无敌的 IDE – Visual Studio 一样复杂。&lt;/p&gt;

&lt;p&gt;  Dokuwiki 的设计有点类似于 VS Code 的设计哲学，本体提供的只是最基本的、最简单的功能。如果你想要其他功能或者改变样式，你可以通过安装插件或者主题的方式来实现。而 Dokuwiki
官方和社区作者提供了比较丰富的插件和主题，能够有很好的可扩展性和 DIY 可能。就比如本文准备要为 Dokuwiki 接入的 LDAP 认证，实际上也是官方提供的插件之一。默认程序是已安装 LDAP Auth Plugin 插件的，我们只需要再做一些简单设置即可接入 LDAP 认证。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  为了更加简便地实现 Dokuwiki 接入 LDAP 认证，这里采用了预先准备好的 Docker 镜像 – &lt;a href=&quot;https://hub.docker.com/r/shuosc/dokuwiki&quot;&gt;shuosc/dokuwiki&lt;/a&gt;。如果感兴趣的话，可以访问笔者维护的 &lt;a href=&quot;https://github.com/shuosc/docker-dokuwiki&quot;&gt;shuosc/docker-dokuwiki&lt;/a&gt; 项目了解更多关于该镜像的构建细节。&lt;/p&gt;

&lt;h3 id=&quot;预先准备的环境&quot;&gt;预先准备的环境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Docker 环境&lt;/li&gt;
  &lt;li&gt;docker-compose 工具&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dokuwiki&quot;&gt;Dokuwiki&lt;/h3&gt;

&lt;h4 id=&quot;创建实例&quot;&gt;创建实例&lt;/h4&gt;

&lt;p&gt;  使用下面的 docker-compose.yml 文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动一个 Dokuwiki 实例。这里的端口映射可以根据喜好或实际情况自行调整。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dokuwiki&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;shuosc/dokuwiki:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DIR=wiki&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data:/opt/data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;运行验证&quot;&gt;运行验证&lt;/h4&gt;

&lt;p&gt;  访问 &lt;a href=&quot;http://localhost/wiki/&quot;&gt;http://localhost/wiki/&lt;/a&gt; 即可看到如下图所示的 Dokuwiki 实例首页。这里其实是已经使用默认的 admin 用户登录之后的页面了。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  shuosc/dokuwiki 默认管理员 admin 的初始密码为 admin。如果容器实例可被外部网络访问，出于安全性考虑建议在运行后及时修改成强密码。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/nNCoC5.webp&quot; alt=&quot;首页 Home Page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-ldap-登录&quot;&gt;配置 LDAP 登录&lt;/h3&gt;

&lt;h4 id=&quot;安装-ldap-支持&quot;&gt;安装 LDAP 支持&lt;/h4&gt;

&lt;p&gt;  由于 &lt;a href=&quot;https://hub.docker.com/r/shuosc/dokuwiki&quot;&gt;shuosc/dokuwiki&lt;/a&gt; 镜像本来不是为 LDAP 认证构建的，没有安装 LDAP 认证所需的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php7-ldap&lt;/code&gt; 库，所以需要在启动实例后进入容器内部安装一下，并重启容器实例生效。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 进入容器实例&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /bin/bash 

&lt;span class=&quot;c&quot;&gt;# 默认用户为 root&lt;/span&gt;
apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; php7-ldap

&lt;span class=&quot;c&quot;&gt;# 退出容器实例后执行&lt;/span&gt;
docker restart &amp;lt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于 shuosc/dokuwiki 镜像默认采用的 USTC（中科大）的软件源，笔者在安装 php7-ldap 库时遇到 Not Found 的错误。如果你也遇到了，可以将容器实例的软件源切换到其他软件源，比如执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed -i &quot;s/ustc/nju/&quot; /etc/apt/sources.list&lt;/code&gt; 即可从 USTC 切换到 NJU（南京大学）软件源。&lt;br /&gt;
  另外，这样的安装只是一种临时的解决方案，销毁并重建容器实例后仍然没有 php7-ldap 库。因此后续 shuosc/dokuwki 镜像将会增加这一支持。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;设置-ldap&quot;&gt;设置 LDAP&lt;/h4&gt;

&lt;p&gt;  在登录成功后，可以如上步中图中所示点击右上角&lt;strong&gt;管理&lt;/strong&gt;按钮进入&lt;strong&gt;管理页面&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/ABVW2W.webp&quot; alt=&quot;管理界面 Admin Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里可以先点击&lt;strong&gt;扩展管理器&lt;/strong&gt;确认一下 &lt;strong&gt;LDAP Auth Plugin&lt;/strong&gt; 插件是否已预安装。这里由于是启用后的截图，所以右边没有&lt;strong&gt;卸载&lt;/strong&gt;和&lt;strong&gt;关闭&lt;/strong&gt;按钮以及启用的提示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/ysQEBr.webp&quot; alt=&quot;扩展管理器 Plugins Manage Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  返回刚才的&lt;strong&gt;管理页面&lt;/strong&gt;，点击&lt;strong&gt;配置设置&lt;/strong&gt;按钮即可进入完整的配置设置。如下图所示是 LDAP 认证部分的配置，在实际页面的比较靠后的位置可以找到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/hnMxkY.webp&quot; alt=&quot;LDAP 设置 LDAP Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  上图是默认的配置，我们需要填一下其中的一些条目，内容如下（其他保持默认即可）：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;条目&lt;/th&gt;
      &lt;th&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;server&lt;/td&gt;
      &lt;td&gt;ldap.example.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;usertree&lt;/td&gt;
      &lt;td&gt;ou=People,dc=example,dc=com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;userfilter&lt;/td&gt;
      &lt;td&gt;(&amp;amp;(objectClass=posixAccount)(uid=%{user}))&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;version&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;binddn&lt;/td&gt;
      &lt;td&gt;cn=admin,dc=example,dc=com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bindpw&lt;/td&gt;
      &lt;td&gt;xxxxxxxxxxx&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;modPass&lt;/td&gt;
      &lt;td&gt;unchecked&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;启用-ldap&quot;&gt;启用 LDAP&lt;/h4&gt;

&lt;p&gt;  上步填写的是 LDAP 相关配置信息，这里还需要将默认的&lt;strong&gt;认证方式&lt;/strong&gt;（authtype）从 authbasic 切换到 authldap，如下图所示。另外，为了保证 LDAP 的管理员用户可以访问 Dokuwiki 的管理页面，这里也需要指定&lt;strong&gt;超级用户&lt;/strong&gt;（superuser）的用户名。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于启用了 LDAP 认证，这里应该要如下图所示停用 Dokuwiki 的&lt;strong&gt;注册&lt;/strong&gt;功能，&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/zW5Fgq.webp&quot; alt=&quot;启用 LDAP Enable LDAP&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;  为 Dokuwiki 接入 LDAP 认证之后，所有指定组目录下的所有 LDAP 用户都可以正常登录 Dokuwiki。但由于 LDAP 只提供了用户登录验证，Dokuwiki 相应页面的权限仍然需要使用 Dokuwiki 自带的&lt;strong&gt;用户管理器&lt;/strong&gt;来管理。具体操作可以 &lt;a href=&quot;https://www.dokuwiki.org/start?id=zh:manual&quot;&gt;Dokuwiki Manual&lt;/a&gt; 来了解更多。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dokuwiki.org/auth:ldap_openldap&quot;&gt;LDAP Auth Backend: OpenLDAP Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24322779/dokuwiki-with-ldap-error-user-authentication-is-temporarily-unavailable&quot;&gt;Dokuwiki with LDAP error: User authentication is temporarily unavailable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="LDAP" /><category term="Dokuwiki" /><summary type="html">前言</summary></entry><entry><title type="html">LDAP 集成之 Apache 篇</title><link href="https://lisz.me/tech/webmaster/ldap-apache.html" rel="alternate" type="text/html" title="LDAP 集成之 Apache 篇" /><published>2022-06-21T13:24:00+09:00</published><updated>2022-06-21T13:24:00+09:00</updated><id>https://lisz.me/tech/webmaster/ldap-apache</id><content type="html" xml:base="https://lisz.me/tech/webmaster/ldap-apache.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;apache&quot;&gt;Apache&lt;/h3&gt;

&lt;p&gt;  Apache HTTP 服务器作为当今流行的几大 HTTP 服务器之一，几乎占据了半壁江山。与知名的Nginx（现已被 F1 收购）、微软的 IIS 相比，Apache 具有更好的模块化支持，无论是从服务端的编程语言还是到身份认证方案。Apache 支持 Perl、Python、PHP 等常用服务端语言，同时也支持 Basic 认证、LDAP 认证、OAuth 2.0 等。尤其是 LAMP（Linux+Apache+MySQL+PHP）集成环境已经成为了虚拟主机的首选。当然，也有提供 ASP 虚拟主机环境的。&lt;/p&gt;

&lt;h3 id=&quot;apache-与博客发展&quot;&gt;Apache 与博客发展&lt;/h3&gt;

&lt;p&gt;  实际上，在博客兴起的初期，大部分博客是最简单的静态页面。而随着服务器端语言的发展，开始有了基于 ASP.net 或 PHP 的博客开源程序，例如最为流行的 WordPress 就是基于 PHP 编写的。在笔者学习博客的初期，也是使用了 WordPress 和 PHP 虚拟主机来搭建自己的博客。可以说，PHP 或 ASP 集成环境在相当一段时间内可能都是最好的博客或者网站解决方案。但随着云服务、无服务计算、Git 等的兴起，以 Git 为中心的持续集成、持续部署的方式越来越成为了搭建个人静态博客的首选。这也反映了博客发展的动态变化过程：&lt;strong&gt;静态博客→动态博客→静态博客&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;  以 Github Page、Gitlab Page、Netlify、Vercel、Cloudflare Page 等为代表的静态站点部署方式越来越受到大家的喜爱，现在大部分大公司的文档都已经转变为这种方式，比如 Azure 的官方文档、Cloudflare 的官方文档、腾讯云的官方文档等。这样一种方式不仅有利于开发的快速迭代，还有利于吸引大众参与到文档的贡献与纠错中来，可以使文档越来越好。当然，这其实就是“开源”的思想。那这是不是就意味着 Apache 对静态网站变得不那么有用了呢？当然不是。Apache 所支持的认证模块、日志模块、重写模块、代理模块等对静态网站也非常重要。&lt;/p&gt;

&lt;h3 id=&quot;apache-对文档的妙用&quot;&gt;Apache 对文档的妙用&lt;/h3&gt;

&lt;p&gt;  现在的开发文档大部分都已经采用 Git+Markdown+SSG（Static Site Generator，静态站点生成器）的方式进行开发部署。对于团队内部的文档可能常常会有权限限制和访问记录的需求，甚至说如果有共享文件，也希望能够知道是谁下载了、在什么时候下载了。如果以后端编程的角度来想，可能需要开发一套系统专门实现验权、访问记录、下载记录、数据统计等功能。即使如此，当有多个文档需要集成到一起时，这种解决方案仍然有点困难了。所以付出了相当的代价，而所获取的收益却不是很明显。针对这一需求，基于 Apache 可以有更加简便的方案，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/4hsLnz.webp&quot; alt=&quot;基于 Apache 的文档方案 Solutions based on Apache&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如上图所示，基于 Apache 的解决方案主要包含以下三点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;利用 Apache 与 LDAP 或其他用户系统集成来验证权限；&lt;/li&gt;
  &lt;li&gt;利用 Apache 的日志功能来记录所有验权动作以及用户行为；&lt;/li&gt;
  &lt;li&gt;利用 Apache 的重写模块和代理模块将所有文档集中在一个域名的不同子目录下。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  为了尽可能简单地实现一下上面所提到的基于 Apache 的文档解决方案，这里采用了 Docker 镜像的方式。&lt;/p&gt;

&lt;h3 id=&quot;环境准备&quot;&gt;环境准备&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Docker 环境（推荐 Linux 或 Mac）&lt;/li&gt;
  &lt;li&gt;已安装 docker-compose 工具&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;配置文件准备&quot;&gt;配置文件准备&lt;/h3&gt;

&lt;p&gt;  如需自行构建 Docker 镜像，请将以下三个配置文件放置在 conf 子目录中。如直接使用下面笔者构建的 &lt;a href=&quot;https://hub.docker.com/r/zhonger/ldap-apache&quot;&gt;zhonger/ldap-apache&lt;/a&gt; 镜像，可以忽略。&lt;/p&gt;

&lt;h4 id=&quot;ldap-验证定义&quot;&gt;LDAP 验证定义&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot;&gt;# ldap-demo.conf

&amp;lt;AuthnProviderAlias ldap demo&amp;gt;
  AuthLDAPBindDN ${LDAP_BindDN}
  AuthLDAPBindPassword ${LDAP_BindPass}
  AuthLDAPURL ${LDAP_URL}
  Require ldap-group ${LDAP_BindGroup}
&amp;lt;/AuthnProviderAlias&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;激活-ldap-验证&quot;&gt;激活 LDAP 验证&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot;&gt;# .htaccess

AuthBasicProvider demo
AuthType Basic
AuthName &quot;Protected Area&quot;
Require valid-user
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;重写-apache-配置文件&quot;&gt;重写 Apache 配置文件&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot;&gt;# apache2.conf

DefaultRuntimeDir ${APACHE_RUN_DIR}

PidFile ${APACHE_PID_FILE}

Timeout 300

KeepAlive On

MaxKeepAliveRequests 100

KeepAliveTimeout 5

User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

HostnameLookups Off

ErrorLog ${APACHE_LOG_DIR}/error.log

LogLevel warn

# Include module configuration:
IncludeOptional mods-enabled/*.load
IncludeOptional mods-enabled/*.conf

# Include list of ports to listen on
Include ports.conf

&amp;lt;Directory /&amp;gt;
    Options FollowSymLinks
    AllowOverride None
    Require all denied
&amp;lt;/Directory&amp;gt;

&amp;lt;Directory /usr/share&amp;gt;
    AllowOverride None
    Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;Directory /var/www/&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride All
    Require all granted
&amp;lt;/Directory&amp;gt;

AccessFileName .htaccess

&amp;lt;FilesMatch &quot;^\.ht&quot;&amp;gt;
    Require all denied
&amp;lt;/FilesMatch&amp;gt;

LogFormat &quot;%v:%p %h %l %u %t \&quot;%r\&quot; %&amp;gt;s %O \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot;&quot; vhost_combined
LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&amp;gt;s %O \&quot;%{Referer}i\&quot; \&quot;%{User-Agent}i\&quot;&quot; combined
LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&amp;gt;s %O&quot; common
LogFormat &quot;%{Referer}i -&amp;gt; %U&quot; referer
LogFormat &quot;%{User-agent}i&quot; agent

IncludeOptional conf-enabled/*.conf
IncludeOptional sites-enabled/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;apache-子目录设置&quot;&gt;Apache 子目录设置&lt;/h3&gt;

&lt;p&gt;  之前提到如果有多个文档分别以多个 Git 项目存在，那么最终编译成的静态文件也是分别存放或者分别部署。这里介绍两种子目录的形式：&lt;strong&gt;目录假名（Alias）&lt;/strong&gt;和&lt;strong&gt;代理（Proxy）&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;目录假名&quot;&gt;目录假名&lt;/h4&gt;

&lt;p&gt;  目录假名比较简单，我们可以直接使用以下配置实现方案图中的各个文档目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot;&gt;...
Alias &quot;/dvm/&quot; &quot;/var/www/dvm/&quot;
Alias &quot;/ds3/&quot; &quot;/var/www/ds3/&quot;
Alias &quot;/dgit/&quot; &quot;/var/www/dgit/&quot;
Alias &quot;/dml/&quot; &quot;/var/www/dml/&quot;
Alias &quot;/dnc/&quot; &quot;/var/www/dnc/&quot;
...
&amp;lt;Directory /var/www/&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  由于下面构建的镜像仍采用了上面的 Apache 配置文件，所以不包含以上目录假名设置。如有需要，可以按照上面给出的顺序将目录假名设置加入到新的 apache2.conf 文件中，并且在 docker-compose.yml 文件中如下所示挂载新的 apache2.conf 文件即可生效。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data:/var/www/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./logs:/var/log/apache2/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./apache2.conf:/etc/apache2/apache2.conf&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;代理&quot;&gt;代理&lt;/h4&gt;

&lt;p&gt;  下面的构建镜像 Dockerfile 中将会预先启用代理模块，由于可能会代理 HTTPS 端口，所以 HTTP 模块和 SSL 模块也预先启用了。除此之外，如果需要代理 HTTPS 站点，就要像下面一样开启 SSLProxyEngine 配置，否则只能完成 HTTP 代理。代理配置的第二行是“ProxyPass+子目录+代理 URL”。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;需要注意的是应该把&lt;strong&gt;代理配置&lt;/strong&gt;放在&lt;strong&gt;目录配置&lt;/strong&gt;之前。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-apacheconf&quot;&gt;...
SSLProxyEngine On
ProxyPass /foo https://foo.example.com
...
&amp;lt;Directory /var/www/&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;构建镜像&quot;&gt;构建镜像&lt;/h3&gt;

&lt;p&gt;  Docker 镜像的构建实际上就是要做这么几件事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;复制三个配置文件到容器镜像中&lt;/li&gt;
  &lt;li&gt;启用 LDAP 认证模块&lt;/li&gt;
  &lt;li&gt;准备好日志目录和默认日志文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; php:7-apache&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;LABEL&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; maintainer=&quot;zhonger zhonger@live.cn&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Enable ldap for apache2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; conf/ldap-demo.conf /etc/apache2/conf-available/ldap-demo.conf&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;a2enmod authnz_ldap proxy proxy_http ssl &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/apache2/conf-available/ldap-demo.conf /etc/apache2/conf-enabled/ldap-demo.conf

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; conf/.htaccess /var/www/html/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; conf/apache2.conf /etc/apache2/apache2.conf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Save logs for apache&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /var/log/apache2/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/log/apache2/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;access.log error.log

&lt;span class=&quot;c&quot;&gt;# Remove cache&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  当准备好配置文件和上面的 Dockerfile 文件时，执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build . -t zhonger/ldap-apache&lt;/code&gt; 命令构建 Docker 镜像。&lt;/p&gt;

&lt;h3 id=&quot;运行验证&quot;&gt;运行验证&lt;/h3&gt;

&lt;p&gt;  构建 Docker 镜像成功后，新建 docker-compose.yml 文件并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令来运行一个实例。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/ldap-apache:latest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data:/var/www/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./logs:/var/log/apache2/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;LDAP_URL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ldap://ldap.example.com/ou=users,dc=example,dc=com?uid&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;LDAP_BindDN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cn=admin,dc=example,dc=com&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;LDAP_BindPass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xxxxxxxxxx&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;LDAP_BindGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ou=people,dc=example,dc=com&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/apache2&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;验证网页&quot;&gt;验证网页&lt;/h4&gt;

&lt;p&gt;  为了验证 LDAP 认证是否有效，这里写了一个简单的 PHP 文件 /var/www/html/p.php。当没有放置 .htaccess 文件时，无须任何认证即可访问。当在 /var/www/html 目录放置 .htaccess 文件时，浏览器再次访问会弹出如下登录弹窗。正确输入 LDAP 允许的用户名和密码后，浏览器会再次正常显示刚才看到的内容。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- p.php --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;phpinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/iw6WKt.webp&quot; alt=&quot;正常内容 Normal Page Content&quot; /&gt;
&lt;img src=&quot;https://i.luish.cc/blog/Px1PiS.webp&quot; alt=&quot;要求验证 Auth Required&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;验证日志&quot;&gt;验证日志&lt;/h4&gt;

&lt;p&gt;  当查看 Apache 的访问日志 access.log 文件时，可以看到如下内容。第一行是未设置 LDAP 验证时的正常访问记录，第二行是设置 LDAP 验证后提醒登录的记录，第三行是登录成功后带有登录用户名的记录（由于隐私关系，下图遮住了登录用户名）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/CdxxGU.webp&quot; alt=&quot;日志文件 Log file&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;验证目录假名&quot;&gt;验证目录假名&lt;/h4&gt;

&lt;p&gt;  这里为了验证目录假名，新建了目录 /var/www/dvm，并在目录中新建了内容为 dvm 的 index.html 文件。在配置上面提到的目录假名之后访问浏览器可以看到如下所示效果，正常生效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/NDnuLk.webp&quot; alt=&quot;目录假名 Alias&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;验证代理&quot;&gt;验证代理&lt;/h4&gt;

&lt;p&gt;  这里为了验证代理效果，直接代理了百度首页（虽然这样不大好）。如下所示可以正常看到百度首页内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/kdbabl.webp&quot; alt=&quot;代理 Proxy&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/Apache_HTTP_Server&quot;&gt;Apache HTTP 服务器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/current/ja/mod/mod_alias.html&quot;&gt;Apache Module mod_alias&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-apache-http-server-as-reverse-proxy-using-mod_proxy-extension&quot;&gt;How To Use Apache HTTP Server As Reverse-Proxy Using mod_proxy Extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="LDAP" /><category term="Apache" /><summary type="html">前言</summary></entry><entry><title type="html">PWA：可能是成本最低的站点加速方式</title><link href="https://lisz.me/tech/webmaster/pwa.html" rel="alternate" type="text/html" title="PWA：可能是成本最低的站点加速方式" /><published>2022-06-03T10:54:00+09:00</published><updated>2022-06-03T10:54:00+09:00</updated><id>https://lisz.me/tech/webmaster/pwa</id><content type="html" xml:base="https://lisz.me/tech/webmaster/pwa.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  PWA（Progressive Web App），中文称为“&lt;strong&gt;渐进式网络应用程序&lt;/strong&gt;”，利用一系列现代的 Web 技术来增强 Web App 的功能，从而实现应用程序一样的用户体验。事实上，任何的网站都可以做成 PWA。从这个概念上来说，PWA 实际上是一种理念。根据这种理念可以创造出各式各样的东西，比如说微信小程序、百度小程序、支付宝小程序等等（😂 虽然它们都不承认自己是和 PWA 一脉相承的）。&lt;/p&gt;

&lt;h3 id=&quot;为何有-pwa&quot;&gt;为何有 PWA&lt;/h3&gt;

&lt;p&gt;  随着网络和智能设备的飞速发展及提升，越来越多的原生应用程序占据了智能设备的空间和资源。曾几何时，一个微博应用程序还只有 100M 左右，现在一安装一登录就要到快 1G。再没事刷一刷新闻或者视频，可能就要变成 1.5G，甚至更多。类似微博这样，我们日常可能常用的淘宝、微信、QQ、知乎等等几乎都是如此。虽然这样的空间和运行内存资源占用能给我们带来很好的用户体验，但实际上还是在一点点榨干智能设备的资源。最后智能设备越来越卡，只能依靠时常清理、重置或者升级硬件来焕发新机。&lt;/p&gt;

&lt;p&gt;  相比原生应用开发而言，Web 应用程序的开发和更新维护则显得不要太轻松，真正实现了“一遍更新所有客户端适用”。如果要从性能和可调用设备资源来看，可能以前原生应用要占上风。但是随着 HTML5 和 CSS3 的发展，Web 应用程序在性能和设备资源调用上已经与原生应用差别无二了。所以越来越多的基于 Web 技术的 Hybrid 客户端或者纯 Web 客户端开始涌现，比如非常知名的网易云客户端，无论是 PC 客户端还是移动客户端都已经切换到了 Web 技术栈。还有现在非常流行的代码编辑器 VS Code，是基于 Electron 框架进行二次开发，其简易的操作逻辑和丰富的插件为开发者带来了无限的可能。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 代码编辑器小知识 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  代码编辑器可以从本身的复杂程度分成两种：一种是以 Eclipse、Visual Studio、*Storm（PHPStorm 等）、 Xcode、IDEA 为代表的大而全的“巨无霸”代码编辑器，另一种是以 Sublime Text、Notepad++、Atom、VS Code、Brackets 为代表的小而实用的“简洁”代码编辑器。&lt;br /&gt;
  “巨无霸”代码编辑器也有其好处，能够提供保姆式的界面交互，可能看着省心一点。但这也是一个缺点，你需要先学习如何使用代码编辑器，才能用它来编写你想要的程序。“简洁”代码编辑器只提供必要的组件，比如文件列表、终端、搜索替换、高亮等。如果需要更多的功能，可以通过安装插件的方式来扩展支持。当然，“简洁”代码编辑器会要求你对“一切皆文件”的 Unix/Linux 哲学有比较好的认识，因为你需要通过手动修改文件配置内容的方式来设置各种各样的东西，而极少有交互界面提供。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  当我们把原生应用和 Web 应用放在一起来考虑时，我们就会想是否能有一种方式可以结合两者的优点来为用户提供更好的服务呢？&lt;strong&gt;PWA 于是应运而生&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 其他方案 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  除了 PWA 之外，其实还是其他的方案出现。比如像 Hybrid 应用、React Native、Flutter 等，具体可以阅读参考资料了解更多。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;什么是渐进式&quot;&gt;什么是渐进式&lt;/h3&gt;

&lt;p&gt;  所谓的“&lt;strong&gt;渐进式&lt;/strong&gt;”有两个含义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一是 &lt;strong&gt;Web 应用渐进式接近原生应用&lt;/strong&gt;：通过各种 Web 技术实现与原生应用相近的用户体验。&lt;/li&gt;
  &lt;li&gt;二是&lt;strong&gt;给支持 PWA 的浏览器用户带来更好的体验&lt;/strong&gt;：由于不同浏览器支持的 HTML/CSS 的情况有所差别，可以利用 PWA 来分步骤、分阶段在不同浏览器上新增特性。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 渐进式应用 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  一个渐进式应用首先是一个网页，通过各种 Web 技术编写出的一个网页应用。之后通过添加应用 Manifest 实现添加到主屏幕，通过 Service Worker 来实现离线缓存和消息推送等功能。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  正是由于这些因素，PWA 至少可以给你的站点带来以下好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更快、更安全的用户体验&lt;/li&gt;
  &lt;li&gt;更好的搜索排名（尤其对于 Google）&lt;/li&gt;
  &lt;li&gt;更好的可用性&lt;/li&gt;
  &lt;li&gt;更好的性能&lt;/li&gt;
  &lt;li&gt;离线访问&lt;/li&gt;
  &lt;li&gt;手机屏幕上的快捷方式像是原生应用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;为-jekyll-配置-pwa&quot;&gt;为 Jekyll 配置 PWA&lt;/h2&gt;

&lt;p&gt;  从上面列举的 PWA 的好处，我们可以很显然知道：PWA 的离线缓存、原生式体验、搜索引擎友好这些优点都能用于实现站点加速。通常的静态站点加速方法可能是：减少请求、缩减请求的大小、CDN 加速等等，但是 PWA 本身的特性对于用户体验来说也是有一些加速效果的，毕竟被访问过一次就会缓存下来。这与 CDN 的缓存有些类似，只不过 CDN 有很多缓存节点，而 PWA 是把本机作为唯一的缓存节点。&lt;/p&gt;

&lt;p&gt;  经过一番对于 Jekyll 上 PWA 支持的调查后，发现的确也存在一些号称可以很方便、简单地使用的 PWA 插件。但是尝试了一下觉得有点复杂且插件看起来毫无用处。根据上面提到的 PWA 实现方式来看，只要我们配置好 Manifest 和 Service Worker，就可以把一个站点全部变成 PWA 应用。根本上与是否 Jekyll 或其他应用无关，因此使用 PWA 插件的必要性不大。&lt;/p&gt;

&lt;p&gt;  接下来就让我们来尝试一下徒手配置 PWA。&lt;/p&gt;

&lt;h3 id=&quot;配置-manifest&quot;&gt;配置 Manifest&lt;/h3&gt;

&lt;h4 id=&quot;元信息&quot;&gt;元信息&lt;/h4&gt;

&lt;p&gt;  Manifest 实际上是一个声明了 PWA 应用的所有元信息的 JSON 配置文件，如下所示。我们需要定义 PWA 应用的名称、语言、缩写、图标、主题颜色、背景颜色、起始路径。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ site.language }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;site.title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;smartify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;short_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;site.pwa.short_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;smartify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/assets/img/touch/android-chrome&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-192&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192x192&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/assets/img/touch/android-chrome&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-512&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;512x512&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/assets/img/touch/android-chrome-maskable&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-192&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192x192&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;purpose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maskable&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/assets/img/touch/android-chrome-maskable&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-512&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;512x512&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;purpose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maskable&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;theme_color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ site.pwa.color }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;background_color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ site.pwa.color }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;start_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{ &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;standalone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;orientation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;natural&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  这里大部分的元信息都可以通过 Jekyll 的 _config.yml 全局配置文件来动态配置。其中，由于图标需要适用于不同的设备、屏幕分辨率，所以需要准备不同尺寸、分辨率的站点图标。这里可以使用 &lt;a href=&quot;https://cthedot.de&quot;&gt;cthedot&lt;/a&gt; 开发的 &lt;a href=&quot;https://github.com/cthedot/icongen&quot;&gt;cthedot/icongen&lt;/a&gt; 工具来一键生成，非常简单方便。生成后将图标文件放置在上面设置好的位置（可自行对应修改）。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; icongen 镜像站 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于 icongen 源站在德国，亚洲访问速度有时可能不大好，所以笔者使用 icongen 开源代码在 Cloudflare 上部署了一个镜像站点 &lt;a href=&quot;https://icongen.pages.dev/&quot;&gt;icongen&lt;/a&gt;，欢迎使用。当然，由于 icongen 是一个静态页面，无须任何服务器托管也可使用，大家也可下载项目源代码，用浏览器打开源代码目录下的 app/index.html 文件也可正常使用。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;模板化&quot;&gt;模板化&lt;/h4&gt;

&lt;p&gt;  由于 manifest.json 文件我们不想要每个用户都来复制一遍，所以可以将这个文件内容模板化，即把 manifest.json 文件放置在 _layouts 文件夹中。这样一来，用户可以非常简单地在源码的主目录下建立一个新的 manifest.json 文件，内容如下所示：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;manifest&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  另外，在全局配置文件 _config.yml 中需确保有如下配置：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;zh&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Blog&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# PWA&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pwa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#81BBFF&apos;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;short_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lisz&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;链接到页面&quot;&gt;链接到页面&lt;/h4&gt;

&lt;p&gt;  当上面的内容都设置好后，我们还需将 manifest.json 的声明配置加入到网站的所有页面，内容如下所示。一般来说，Jekyll 主题只需要在 head.html 和 post-head.html 两个头文件模块中加入下面内容即可（一个是普通页面，一个是文章页面）。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest.json&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置-service-worker&quot;&gt;配置 Service Worker&lt;/h3&gt;

&lt;h4 id=&quot;注册-service-worker&quot;&gt;注册 Service Worker&lt;/h4&gt;

&lt;p&gt;  配置完  Manifest 之后，只是能告诉浏览器你的应用是一个 PWA 应用，而实际的 PWA 的离线缓存等特性都还没有实现，这些都是在 Service Worker 中实现的。首先在 _includes 目录中创建 pwa.html 文件，用于注册 PWA 应用，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- pwa.html --&amp;gt;
&amp;lt;script&amp;gt;
    if (&quot;serviceWorker&quot; in navigator) {
        if (navigator.serviceWorker.controller) {
            console.log(&quot;An active service worker found, no need to register&quot;);
        } else {
            // Register the service worker
            navigator.serviceWorker
            .register(&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/sw.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;, {
                scope: &quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;
            })
            .then(function (reg) {
                console.log(&quot;Service worker has been registered for scope: &quot; + reg.scope);
            });
        }
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  并且为了启用 pwa.html 小插件，应该在 page.html 和 post.html 模板的 body 末尾添加上对小插件的引用，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
...
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pwa.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
...
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;离线缓存&quot;&gt;离线缓存&lt;/h4&gt;

&lt;p&gt;  Service Worker 功能定义文件实际上也是一个 JS 文件（这里命名为 sw.js），参考内容如下：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// sw.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pwabuilder-offline&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offlineFallbackPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Install stage sets up the index page (home page) in the cache and opens a new cache&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Install Event processing&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Cached offline page during install&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offlineFallbackPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ToDo-replace-this-name.html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Update the value of the offlineFallbackPage constant in the serviceworker.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offlineFallbackPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If any fetch fails, it will look for the request in the cache and serve it from there first&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Add page to offline cache: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// If request was success, add or update it in the cache&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Network request Failed. Serving content from cache: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check to see if you have it in the cache&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Return response&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// If not in the cache, then return error page&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;no-match&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;matching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CACHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  sw.js 文件的内容主要定义了第一次访问时将文件离线缓存下来，再次请求是从缓存中加载。如果首次从缓存中没有找到想要的文件，则会请求更新缓存获取该文件。&lt;/p&gt;

&lt;h4 id=&quot;模板化-1&quot;&gt;模板化&lt;/h4&gt;

&lt;p&gt;  为了在 Jekyll 主题中能更方便用户使用，这里也应该像 Manifest 那样模板化，即在 _layouts 目录下创建以上内容的 sw.js 文件。而用户只需要在源代码主目录下创建如下内容的 sw.js 文件即可：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sw&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;验证-pwa&quot;&gt;验证 PWA&lt;/h2&gt;

&lt;p&gt;  当我们设置好 Manifest 和 Service Worker，并且再次生成 Jekyll 静态页面并托管到服务器之后，用 Chrome 浏览器访问主页就会发现地址栏的右边会出现一个新的图标，如下图所示。这个图标就是在提示你所访问的页面是 PWA 应用，支持安装快捷方式。点击该图标，会有一个像下面这样的小弹窗提示，点击安装即可安装到主屏幕，PC 端、移动端均可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/8nPgKk.webp&quot; alt=&quot;安装提示 Install tips&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  除此之外，我们还可以在 PC 端打开浏览器的控制台。如下图所示，我们可以发现一些来自 sw.js 的打印信息。这些信息告诉我们 Service Worker 已经注册成功了，并且有哪些文件已经离线缓存了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/OnrGr1.webp&quot; alt=&quot;控制台提示 Command line tips&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  在浏览器开发工具中，我们还可以通过查看&lt;strong&gt;应用&lt;/strong&gt;的 &lt;strong&gt;Service Workers&lt;/strong&gt; 来再次确认 PWA 的情况。如下图所示，我们可以看到 sw.js 从 Initial 到 Wait 到 Activate 的过程，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/mXdqdH.webp&quot; alt=&quot;应用提示 App tips&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;  从上面的步骤来看，Web 应用 PWA 化似乎也不是那么难。只要有 Manifest 和 Service Worker 就能成功把 Web 应用 PWA 化。当然，也有一些更加简单 PWA 化的方法，比如说 &lt;a href=&quot;https://www.pwabuilder.com/&quot;&gt;pwabuilder&lt;/a&gt;。不过，pwabuilder 更擅长帮你优化 PWA 应用并且转成 Windodws、Apple 和 Android 三个平台的应用。如果你想要把你的 PWA 应用上传到应用商店，那么不妨试试。&lt;/p&gt;

&lt;p&gt;  除了 Jekyll 之外，其他的静态生成器比如 Hexo、Next.js 等等或者动态网站都可以 PWA 化，而且和 CDN 加速一起使用也非常合适。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 推荐一款 PWA 应用 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  当年 Google 为了推广 PWA 曾开发了一款非常好用的 PWA 应用 – &lt;a href=&quot;https://squoosh.app/&quot;&gt;Squoosh&lt;/a&gt;。这就是本地版的图片格式转换、图片压缩的免费工具，完全可以替代大部分其他工具。如果你喜欢终端的话，你也可以使用 &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/tree/dev/cli&quot;&gt;squoosh cli&lt;/a&gt;。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;相关补充&quot;&gt;相关补充&lt;/h2&gt;

&lt;h3 id=&quot;pwa-空间占用及流量消耗&quot;&gt;PWA 空间占用及流量消耗&lt;/h3&gt;

&lt;p&gt;(2022年6月8日)&lt;/p&gt;

&lt;p&gt;  前两天刚发布本文时，有位叫 &lt;a href=&quot;https://blog.lyh543.cn/&quot;&gt;小灰灰灰灰&lt;/a&gt; 的网友向我提了一个关于“PWA 空间占用及流量消耗”的问题，我也回答了一些自己的想法（可以在博客主节点 &lt;a href=&quot;https://lisz.me/tech/webmaster/pwa.html&quot;&gt;lisz.me&lt;/a&gt; 的评论区看到具体内容）。首先非常感谢 &lt;a href=&quot;https://blog.lyh543.cn/&quot;&gt;小灰灰灰灰&lt;/a&gt; 的热心提问，其次他的这个问题也让我觉得可能我需要再进一步了解一下，否则这篇博文的标题中的加速可能需要打上引号了。&lt;/p&gt;

&lt;p&gt;  虽然从我自身的安卓手机 PWA 应用空间占用查询来看，Chrome 的空间设置中的空间占用量有点大（最高 4.9 GB，首次访问 480 MB，如下图所示），但查询手机系统中的空间管理却没有发现 PWA 应用或者 Chrome 占用了所谓的“4.9 GB”空间（PWA 应用 230K 左右，Chrome 1.4 GB 左右）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/IYuKyo.webp&quot; alt=&quot;Chrome 显示存储用量 Storage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  正如 &lt;a href=&quot;https://blog.lyh543.cn/&quot;&gt;小灰灰灰灰&lt;/a&gt; 所说，Chrome 显示的空间占用量存在水分，毕竟不可能只访问一个页面就需要下载 400 MB 的东西吧。而且，根本就没有那么多文件让 PWA 应用下载。据个人不完全统计，本站目前所有代码加上所有图床托管图片的总体大小在 15 MB 左右。即使全站都缓存下来，也不可能用到 400 MB。&lt;a href=&quot;https://blog.lyh543.cn/&quot;&gt;小灰灰灰灰&lt;/a&gt; 用在 Stack Overflows 上查到的命令在 Chrome 的控制台中输出了类似 “Using 23K out of 270M”的结果，因此他猜测可能是预申请了过百兆的空间，而实际使用量只有几十 K 左右。对此，我表示赞同。从实际的源站流量监控来看，与所谓的 400 MB 也不匹配。从上月 26 日到今天（共 14 天）为止消耗了 323.2 MB 流量，本月截止到今天（共 8 天）图床托管消耗了 131 MB 流量。&lt;/p&gt;

&lt;p&gt;  综合以上的信息来看，一个像本站一样的静态博客 PWA 化之后对于智能终端空间占用量或者服务提供的流量消耗影响不会太大。如果是其他非常复杂的站点或者有大量未经优化图片的站点，可能全部 PWA 化会在空间占用了和流量消耗上面有一些比较明显的影响。这一点可以查看参考资料《PWA 初探》一文了解更多。其实我们还是应该回到我们使用 PWA 的初衷上来，PWA 是用来加速和优化提升用户体验的，因此我们可以选择某些部分 PWA 化而非整体。&lt;/p&gt;

&lt;p&gt;  对于博客或者静态站点 PWA 化，个人有几点小建议可以在一定程度上降低 PWA 化对空间占用和流量消耗的影响：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;图片 webp 化&lt;/strong&gt;：压缩图片大小、保留大部分的质量，从而加快所有图片加载时间。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;图床托管图片&lt;/strong&gt;：图片交由图床来管理和存储，这样可以分担一部分的源站流量，毕竟也是有很多可以免费使用的图床的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;懒加载和骨架屏&lt;/strong&gt;：懒加载可以只加载可视区域内的若干张图片，只有在页面滑动时才会陆续加载将要看到的区域内的图片，减少初次渲染页面的时间；骨架屏能够在元素尚未完全加载前填充元素的空间，不会突然冒出元素占用（Vue 用得不好的时候会有这种情况），从视觉上给用户更加友好的体验。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CDN 化&lt;/strong&gt;：虽然 PWA 应用有缓存能力，但是只是本地缓存，对于大多数第一次请求缓存的时间还是取决于用户客户端到源站之间的网络，CDN 能够很好地弥补这一点。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/thewhitewulfy/make-any-jekyll-site-into-a-pwa-1de2&quot;&gt;Make any Jekyll site into a PWA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sunbufu.vercel.app/posts/2019/2019-01-23-pwa/&quot;&gt;jekyll 博客的 PWA 配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000041729491&quot;&gt;小程序鼻祖 —— 在国内逐渐消亡的 PWA 可以带给我们哪些启示？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000018590996&quot;&gt;Flutter 、React Native 、 Ionic、 NativeScript 、小程序和 PWA 哪个值得学？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mrluo.life/article/detail/140/pwa-primer&quot;&gt;PWA 初探&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.dev/storage-for-the-web/&quot;&gt;Web 存储&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lavas-project.github.io/pwa-book/&quot;&gt;《PWA 应用实战》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="PWA" /><category term="渐进式网络应用程序" /><category term="小程序" /><category term="加速" /><category term="Accelerate" /><summary type="html">前言</summary></entry><entry><title type="html">GPG：为你的 Git 提交记录加一把锁</title><link href="https://lisz.me/tech/webmaster/gpg.html" rel="alternate" type="text/html" title="GPG：为你的 Git 提交记录加一把锁" /><published>2022-05-31T16:44:00+09:00</published><updated>2022-05-31T16:44:00+09:00</updated><id>https://lisz.me/tech/webmaster/gpg</id><content type="html" xml:base="https://lisz.me/tech/webmaster/gpg.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  GPG，全称 GNU Privacy Guard，也可以写成 GnuPG。它是一款免费开源的加密软件，也是不开源不免费的 PGP（Pretty Good Privacy）的替代品，有关详情可以查看参考资料。由于 GPG 可以用于签名或者加密，所以在文件加密、邮件加密、代码签名等方面应用较多。&lt;/p&gt;

&lt;h3 id=&quot;邮件加密&quot;&gt;邮件加密&lt;/h3&gt;

&lt;p&gt;  用过 Gmail 的同学可能看到过像下面这样不同的安全性信息。第一幅图是在没有以 SSL 方式与邮件服务器连接发送的时候，Gmail 会将邮件的安全性等级认定为最低的&lt;strong&gt;未加密&lt;/strong&gt;级别。第二幅图是正常以 SSL 方式与邮件服务器连接发送时，Gmail 验证了 SSL 证书与邮送域一致并认定为&lt;strong&gt;标准加密&lt;/strong&gt;的安全性等级。第三幅图是当我们使用 GPG 给邮件进行加密时，Gmail 会同时收到一个签名公钥的附件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/oKV4nd.webp&quot; alt=&quot;未加密邮件 Uncertified mail&quot; /&gt;
&lt;img src=&quot;https://i.luish.cc/blog/T4UqNm.webp&quot; alt=&quot;标准加密邮件 Normal certified mail&quot; /&gt;
&lt;img src=&quot;https://i.luish.cc/blog/Ocaj6f.webp&quot; alt=&quot;GPG 加密邮件 GPG certified mail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里看起来可能有点奇怪，为什么 GPG 加密的邮件和一般的标准加密邮件除了附件没有别的差别？实际上，我们如果想要给对方发一份 GPG 加密的邮件是需要用对方的 GPG 公钥来加密邮件内容的。当对方收到发送的 GPG 加密邮件时会用自己的私钥进行解密，从而获知加密邮件的内容。也就是说，上面的第三幅图并非是真正的 GPG 加密的邮件。第三幅图是作者用私钥签名的邮件，收件人可以用 keyserver 上查询到的公钥来验证邮件内容是否真的来自于发件人。&lt;/p&gt;

&lt;h3 id=&quot;代码签名&quot;&gt;代码签名&lt;/h3&gt;

&lt;p&gt;  相比邮件加密而言，GPG 用于代码签名则正好相反。在代码签名中，我们也像上面第三幅图那样使用私钥为每一次 commit 签名。而代码的使用者可以根据作者公布的公钥对代码内容进行验证，从而确保代码是来自作者本人。苹果开发者证书、Google Play 开发者证书实际上也是起到了这样一个核验代码作者身份的作用。&lt;/p&gt;

&lt;h3 id=&quot;git-的漏洞&quot;&gt;Git 的“漏洞”&lt;/h3&gt;

&lt;p&gt;  在 Git 提交 commit 之前，Git 会要求我们设定好 username 和 email（类似下面）。但是如果我们不设置成自己的 github username 和 email 会怎么样呢？其实不会怎么样，只是 Github 不会把这些 commit 算在你头上，而是算在了你伪造的用户头上。如果我们想要伪装成某位业界大咖的 github 账户为项目提交代码，似乎在理论上也没有什么不可以的。在参考资料四中，作者做了一些示例的尝试，发现“只要知道邮箱，就可以用他人的名义提交 commit”。但说到底，这种方式是不道德的，且没有任何实质意义的。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;zhonger&quot;&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;zhonger@live.cn&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  因此，为了使代码更加可信、确保是由作者本人提交的，Github 等代码托管平台纷纷支持了 GPG 签名。因为 GPG 公钥和私钥是 RSA 非对称加密生成的，所以理论上是不存在被伪造或反编码风险的。和从 GPG 密钥服务器中的公钥查询验证不同，Github 等代码托管平台只信任由作者本人在设置中配置的 GPG 公钥，与只信任配置的 SSH 公钥访问代码类似。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;安装-gpg&quot;&gt;安装 GPG&lt;/h3&gt;

&lt;p&gt;  在不同的平台上都已经提供了 GPG，大部分只需要一条命令即可完成安装。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# MacOS&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gpg

&lt;span class=&quot;c&quot;&gt;# Debian, Ubuntu&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; gnupg

&lt;span class=&quot;c&quot;&gt;# CentOS&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; gnupg

&lt;span class=&quot;c&quot;&gt;# Windows&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 推荐使用 WinGPG，下载地址为 https://scand.com/products/wingpg/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Archlinux&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; gnupg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证安装&quot;&gt;验证安装&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;                                                        
gpg &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GnuPG&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2.3.6
libgcrypt 1.10.1
Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2021 Free Software Foundation, Inc.
License GNU GPL-3.0-or-later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /Users/zhonger/.gnupg
支持的算法：
公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA
密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
AEAD: EAX, OCB
散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
压缩：  不压缩, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;生成密钥&quot;&gt;生成密钥&lt;/h3&gt;

&lt;p&gt;  验证安装成功后，即可使用以下命令生成字母的密钥。如下所示，我们可以很简单地得到一对 GPG 密钥。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--full-generate-key&lt;/span&gt;                                                       
gpg &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GnuPG&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2.3.6&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2021 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

请选择您要使用的密钥类型：
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; RSA 和 RSA
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DSA 和 Elgamal
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; DSA（仅用于签名）
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; RSA（仅用于签名）
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ECC（签名和加密） &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;默认&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ECC（仅用于签名）
 （14）卡中现有密钥
您的选择是？
请选择您想要使用的椭圆曲线：
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Curve 25519 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;默认&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NIST P-384
   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Brainpool P-256
您的选择是？
请设定这个密钥的有效期限。
         0 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 密钥永不过期
      &amp;lt;n&amp;gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 密钥在 n 天后过期
      &amp;lt;n&amp;gt;w &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 密钥在 n 周后过期
      &amp;lt;n&amp;gt;m &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 密钥在 n 月后过期
      &amp;lt;n&amp;gt;y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 密钥在 n 年后过期
密钥的有效期限是？&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
密钥永远不会过期
这些内容正确吗？ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y/N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; y

GnuPG 需要构建用户标识以辨认您的密钥。

真实姓名： zhonger
电子邮件地址： zhonger@lisz.me
注释： zhonger
您选定了此用户标识：
    “zhonger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;zhonger&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;zhonger@lisz.me&amp;gt;”

更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ O
我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
发生器有更好的机会获得足够的熵。
gpg: 警告：服务器 ‘gpg-agent’ 比我们的版本更老 （2.2.34 &amp;lt; 2.3.6）
gpg: 注意： 过时的服务器可能缺少重要的安全修复。
gpg: 注意： 使用 “gpgconf &lt;span class=&quot;nt&quot;&gt;--kill&lt;/span&gt; all” 来重启他们。
我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
发生器有更好的机会获得足够的熵。
gpg: 吊销证书已被存储为‘/Users/zhonger/.gnupg/openpgp-revocs.d/612E7E8200528FEC0B8AC3C715F73C3703B9796C.rev’
公钥和私钥已经生成并被签名。

pub   ed25519 2022-06-01 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SC]
      612E7E8200528FEC0B8AC3C715F73C3703B9796C
uid                      zhonger &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;zhonger&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;zhonger@lisz.me&amp;gt;
sub   cv25519 2022-06-01 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;E]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  这里生成密钥过程中要求选择的密钥类型、椭圆曲线、密钥有效期都采用了默认的选择（按 Enter 键即可），可根据个人需要自行选择。接下来的用户标识根据个人的 真实姓名（英文）、Github 邮件和用户名（注释），最后输入大写字母 O 结束设置。这一步骤结束后系统会提醒输入对私钥的密码，通常需要两次验证输入。至此成功生成了一对 GPG 密钥。&lt;/p&gt;

&lt;h3 id=&quot;github-配置密钥&quot;&gt;Github 配置密钥&lt;/h3&gt;

&lt;p&gt;  生成密钥之后我们就要将公钥添加到 Github上，并尝试使用私钥给代码签名并提交，验证是否被 Github 成功验证。&lt;/p&gt;

&lt;h4 id=&quot;打印公钥&quot;&gt;打印公钥&lt;/h4&gt;

&lt;p&gt;  如下命令所示，可以查询刚才生成密钥的公钥内容，并复制。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 列举本地所有密钥&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--list-keys&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查询指定 id 密钥的公钥内容&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; &amp;lt;GPG_KEY_ID》
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/RNvfUg.webp&quot; alt=&quot;列举密钥 List gpg keys&quot; /&gt;
&lt;img src=&quot;https://i.luish.cc/blog/jFalNR.webp&quot; alt=&quot;查询公钥内容 Check public key content&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;添加-gpg-公钥&quot;&gt;添加 GPG 公钥&lt;/h4&gt;

&lt;p&gt;  访问 &lt;a href=&quot;https://github.com/settings/gpg/new&quot;&gt;https://github.com/settings/gpg/new&lt;/a&gt; 添加刚复制的 GPG 公钥内容，此处的 Title 可以任意命名，只要与已有的 Title 不重复即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/KSdbdY.webp&quot; alt=&quot;添加公钥 Add public key&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;查询已添加公钥&quot;&gt;查询已添加公钥&lt;/h4&gt;

&lt;p&gt;  访问 &lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt; 即可看到刚才新添加的 GPG 公钥。这里可以看到，邮箱地址后面多了个 Unverified。这是因为这个邮箱是一个没有绑定 Github 账户的假邮箱，如果邮箱是验证过的，这里就不会有这个标识了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/wEchBn.webp&quot; alt=&quot;查询公钥 List all keys&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;为代码签名并提交&quot;&gt;为代码签名并提交&lt;/h3&gt;

&lt;p&gt;  为了不用每次提交 commit 的时候都要手动声明使用某个 GPG 私钥进行签名，这里在 git 的全局配置中添加两个配置项：user.signingkey（签名密钥 ID）和 commit.gpgsign（全部提交使用 GPG 签名）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.signingkey 612E7E8200528FEC0B8AC3C715F73C3703B9796C
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; commit.gpgsign &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  当我们设置好全局 Git 配置后，再次像平常那样执行 commit 提交时，就会弹出输入私钥密码的窗口，正常输入即可。&lt;/p&gt;

&lt;h3 id=&quot;验证提交签名&quot;&gt;验证提交签名&lt;/h3&gt;

&lt;p&gt;  虽然以上步骤已经完成了 GPG 为 commit 加一把锁，但是可能还不敢确认这把锁是否存在。这里有两种方法可以验证：一种是通过查询本地 git 来查看，另一种是通过 Github 在线查看。下面是使用个人的私钥（非本文示例密钥）分别采用两种方法在日常 git 项目中验证的效果图。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 本地验证提交签名&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--show-signature&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/VelGL4.webp&quot; alt=&quot;本地验证提交签名 Verify the signature on local git&quot; /&gt;
&lt;img src=&quot;https://i.luish.cc/blog/W6q65U.webp&quot; alt=&quot;Github 验证提交签名 Verify the signature on github&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他相关问题&quot;&gt;其他相关问题&lt;/h2&gt;

&lt;div class=&quot;premonition error&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon error&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-error&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 问题一 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;如果想要导出私钥和公钥备份或迁移怎么办？&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 解答 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  一般来说，GPG 密钥的保管非常重要。如果 GPG 密钥的私钥丢失或者被他人窃取，那么将会很危险，因为别人可以使用该私钥在任何文件或邮件上签上你名字。所以重装电脑之前一定要注意好备份，即使平时也可能需要将 GPG 密钥存在一个非本地且安全可靠的位置。以下命令可以实现公钥和私钥的导出。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; gpg.pub &lt;span class=&quot;nt&quot;&gt;--export&lt;/span&gt; &amp;lt;GPG_KEY_ID&amp;gt;
gpg &lt;span class=&quot;nt&quot;&gt;--armor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; gpg.key &lt;span class=&quot;nt&quot;&gt;--export-secret-keys&lt;/span&gt; &amp;lt;GPG_SECRET_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition error&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon error&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-error&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 问题二 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;如何吊销已生成或丢失的 GPG 密钥？&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 解答 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  当 GPG 私钥发生丢失（公钥丢失不影响安全，找回即可）时，我们需要在 Github 删除对应的公钥，这样可以保证 Github 不会再承认丢失私钥签名的代码。当然，为了除 Github 外其他正常的邮件、文件不再信任该丢失的私钥签名，我们需要向 GPG 声明该 GPG 公钥吊销，从而达到吊销私钥的目的（并非是删除密钥本身，而是标记作废）。具体操作如以下命令所示。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 撤销密钥&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; revoke.asc &lt;span class=&quot;nt&quot;&gt;--gen-revoke&lt;/span&gt; &amp;lt;GPG_KEY_ID&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 将撤销密钥导入本地钥匙环&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; revoke.asc
&lt;span class=&quot;c&quot;&gt;# 搜索 GPG 密钥服务器中的密钥&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkps://keys.openpgp.org &lt;span class=&quot;nt&quot;&gt;--search-keys&lt;/span&gt; &amp;lt;GPG_KEY_ID&amp;gt; 
&lt;span class=&quot;c&quot;&gt;# 撤销 GPG 密钥服务器上的密钥&lt;/span&gt;
gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkps://keys.openpgp.org &lt;span class=&quot;nt&quot;&gt;--send-keys&lt;/span&gt; &amp;lt;GPG_KEY_ID&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2013/07/gpg.html&quot;&gt;GPG 入门教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hedzr.com/security/gpg/gpg-short-guide/&quot;&gt;GPG Short Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bynss.com/apple/587437.html&quot;&gt;怎样在 macOS 上加密您的电子邮件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/starbugs/how-to-fake-the-author-of-git-commit-f44453b70afc&quot;&gt;用 Git 這麼久了，你知道 commit 是可以偽造的嗎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tourcoder.com/gpg-on-macos/&quot;&gt;macOS 下使用 GPG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="GPG" /><category term="签名" /><category term="Git" /><category term="Signin" /><category term="代码安全" /><category term="Code security" /><summary type="html">前言</summary></entry><entry><title type="html">基于 LDAP 的统一认证服务 Keycloak</title><link href="https://lisz.me/tech/webmaster/ldap-integration.html" rel="alternate" type="text/html" title="基于 LDAP 的统一认证服务 Keycloak" /><published>2022-04-27T15:44:00+09:00</published><updated>2022-04-27T15:44:00+09:00</updated><id>https://lisz.me/tech/webmaster/ldap-integration</id><content type="html" xml:base="https://lisz.me/tech/webmaster/ldap-integration.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  此前，笔者曾写过一篇&lt;a href=&quot;/tech/docker/openldap.html&quot;&gt;《OpenLDAP 安装初体验》&lt;/a&gt;尝试使用 Docker 一键式部署 OpenLDAP。其中，对 LDAP 协议也作了一定的基础入门，但对如何利用 LDAP 来为各式各样的应用提供统一认证服务还未有深入的实践。本文就打算以 LDAP 为中心集成到团队内部的各类第三方系统或服务中。例如，团队内部常用的私有化代码托管服务 Gitlab、网盘服务 Nextcloud、缓存加速服务 Squid、访问内部集群的专用 OpenVPN 服务、内部团队知识库服务 Dokuwiki、内部代码库及容器镜像服务 Nexus3 等等。&lt;/p&gt;

&lt;h2 id=&quot;统一认证服务&quot;&gt;统一认证服务&lt;/h2&gt;

&lt;p&gt;  随着应用系统的爆发式增长，统一认证服务（UIA）显得越来越重要。通俗来说，统一认证服务就是可以使用一套账号和密码访问一系列的网站应用、APP 应用，为用户免去了维护大量账号和密码的烦恼，同时也为用户的账号安全提供了一定的保障。比如说，统一认证服务可以要求用户在登录时输入短信验证码、邮件验证码或者动态二次验证码等多因素认证，全方位保证用户登录安全。像大学里我们之所以可以使用学号和密码访问或者验证学校的所有网站应用及其他权限，就是因为采用了统一认证服务。&lt;/p&gt;

&lt;p&gt;  统一认证服务一般与授权控制相关联，可以确认用户对哪种资源有权限访问、可以进行哪种方式的操作等。当然，各个应用系统也可以有自己的授权控制体系，直接采用或者补充已有的统一认证服务提供的授权控制都是可以的。常见的统一认证解决方案有 OpenID Connect、OAuth 2.0、SAML2（Shibboleth）、CAS 等等。实际上，这些解决方案都需要有一个实现存储用户信息的方式，当然我们可以用关系型数据库来实现，也可以用轻量级目录协议（LDAP）来实现。在之前的文中就谈到过，LDAP 相比较关系型数据库而言，查询和浏览速度更快，但 LDAP 属性值的修改和属性有一定的限制。因此，实际的统一认证服务搭建会结合两者及其优势进行互补，从而提供更加全面的、可靠的认证服务。&lt;/p&gt;

&lt;p&gt;  除了统一认证服务之外，还有单点登录服务（SSO）。与统一认证相比，单点登录一次登录成功后，访问其他支持同一单点登录的网站应用时即可自动无感知认证，直接免去了用户再次登录的烦恼。当然，现在的统一认证服务也大多集成了单点登录服务。所以我们可以认为现在完整的统一认证服务应该具备以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持一套账户和密码访问多个应用系统；&lt;/li&gt;
  &lt;li&gt;具备多因素认证安全性校验；&lt;/li&gt;
  &lt;li&gt;支持基本的用户权限控制；&lt;/li&gt;
  &lt;li&gt;支持单点登录，切换站点时自动无感知认证。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;统一认证服务实践&quot;&gt;统一认证服务实践&lt;/h2&gt;

&lt;p&gt;  在给的参考资料中已经详细介绍了不同种统一认证服务解决方案（协议），其中当属 OpenID Connect 方案对以上几点功能性要求满足的比较好。在我们日常生活中使用的微信、QQ、百度、淘宝等等均是采用这一解决方案，我们也通常将这一类的第三方登录方式称为“社交化登录”。当然，这些产商之所以选择 OpenID Connect 而不选择 CAS，可能主要还是因为 OpenID Connect 是基于 OAuth 2.0 的统一认证服务解决方案。虽然 CAS 也已经开始内置了 OAuth 2.0 认证，甚至兼容 SAML2 等等，但是终究还是会受限于 B/S 场景。OpenID Connect 面向的场景则不仅限于 B/S，还有 C/S。要知道，随着智能手机的发展，移动客户端已经成为了一个非常大的市场，甚至每日访问量要远高于桌面浏览器端。&lt;/p&gt;

&lt;p&gt;  为了验证一下是否可以采用 LDAP 作为基础存储来构建统一认证服务，这里选择了比较知名的由 RedHat 赞助开发的基于 OpenID Connect 协议的开源软件 &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt;。其实，基于 CAS 协议也有比较知名的 &lt;a href=&quot;https:/aperoeo.github.io/cas/&quot;&gt;aperoeo/cas&lt;/a&gt;。但是怎么说呢，不选它有两个原因：一是它是基于 CAS 协议的；二是它的功能和我想要的有点不大一样。虽然也可以把 LDAP 作为基础存储，但是所有数据只读。个人觉得一个可以把 LDAP 作为基础存储的统一认证服务解决方案至少应该给用户一个可选项，选择只读还是可写都应该由用户自行决定。在这一点上，Keycloak 要做得更好。&lt;/p&gt;

&lt;h3 id=&quot;keycloak-的部署&quot;&gt;Keycloak 的部署&lt;/h3&gt;

&lt;p&gt;  Keycloak 官方提供编译好的 Docker 镜像，我们可以使用 docker-compose 进行一键式部署。配置文件内容如下所示：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data:/var/lib/postgresql/data&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;POSTGRES_DB&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keycloak&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/keycloak/keycloak:legacy&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_VENDOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;POSTGRES&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_ADDR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_SCHEMA&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;KEYCLOAK_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;KEYCLOAK_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pa55w0rd&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080:8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动服务。此处之所以使用的 legacy 标签而非 latest 标签，主要是因为 Keycloak 团队正在启动的方式和相关参数进行调整。latest 标签可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; 命令正常启动，但是 docker-compose 有点不大好使。两个标签的代码版本实际上是完全一样的，只是启动服务有些差别。&lt;/p&gt;

&lt;h3 id=&quot;keycloak-的使用&quot;&gt;Keycloak 的使用&lt;/h3&gt;

&lt;p&gt;  访问 &lt;a href=&quot;http://127.0.0.1:8080/auth/realms/master/account/#/&quot;&gt;http://127.0.0.1:8080/auth/realms/master/account/#/&lt;/a&gt; 即可进入用户页，点击右上角进行登录。此处直接使用上面配置文件中的管理员用户账号和密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/I7z7ma.webp&quot; alt=&quot;用户页 User Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/8CLUoY.webp&quot; alt=&quot;登录页 Login Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  登录成功后可以看到右上角已经有了用户名，登录按钮也变成了登出按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/VQHrFJ.webp&quot; alt=&quot;登录成功 Login successfully&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;国际化设置&quot;&gt;国际化设置&lt;/h4&gt;

&lt;p&gt;  访问 &lt;a href=&quot;http://127.0.0.1:8080/auth/admin/master/console&quot;&gt;http://127.0.0.1:8080/auth/admin/master/console&lt;/a&gt; 即可进入管理员页面并自动登录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/kNYBCF.webp&quot; alt=&quot;基本设置 Basic settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  切换到 Themes（主题）选项卡下，开启国际化并可设置默认的界面语言，然后点击保存即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/lZ0I0c.webp&quot; alt=&quot;国际化设置 International settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  刷新页面就能看见设置好的中文界面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/63o8ga.webp&quot; alt=&quot;完成国际化设置 Finish international settings&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;连接-ldap&quot;&gt;连接 LDAP&lt;/h4&gt;

&lt;p&gt;  左边导航栏切换到&lt;strong&gt;用户联合&lt;/strong&gt;选项卡，选择添加 ldap。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/p2pMlW.webp&quot; alt=&quot;添加 LDAP 连接 Add LDAP connection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如下所示输入对应的配置信息，这里由于是连接 OpenLDAP 所以供应商选择&lt;strong&gt;其他&lt;/strong&gt;。为了用户可以通过 Keycloak 来修改 LDAP 的密码，这里的编辑模式选择&lt;strong&gt;可写&lt;/strong&gt;。另外在填写完配置后可以用右侧的&lt;strong&gt;测试连接&lt;/strong&gt;和&lt;strong&gt;测试验证&lt;/strong&gt;按钮来测试该配置是否可行。如下图所示，顶部出成功验证提示。点击保存完成 LDAP 配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/umTHlh.webp&quot; alt=&quot;测试 LDAP 连接 Test LDAP connection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  当保存 LDAP 配置之后刷新页面，在下面会出现四个新的按钮。点击&lt;strong&gt;同步所有用户&lt;/strong&gt;即可将用户同步到 Keycloak。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/UJ78t0.webp&quot; alt=&quot;同步所有用户 Sync all users&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  切换左边导航栏到&lt;strong&gt;用户&lt;/strong&gt;选项卡，默认是空的，点击查看所有用户即可看到包含 admin 和 LDAP 中的用户。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/qJBLB3.webp&quot; alt=&quot;默认用户列表 Default user list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如下图所示，证明 Keycloak 成功连接 LDAP。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/P5w5eb.webp&quot; alt=&quot;所有用户列表 All user list including LDAP&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;用户密码策略&quot;&gt;用户密码策略&lt;/h4&gt;

&lt;p&gt;  由于 LDAP 本身修改密码不是很方便，需要有额外的第三方的方式支持，这里就采用 Keycloak 内置的方式来修改 LDAP 中的密码。为了保证用户修改的密码具有一定的安全性，我们需要设置一些新密码的复杂规则。切换左边导航栏到&lt;strong&gt;验证&lt;/strong&gt;选项卡，再选择&lt;strong&gt;密码策略&lt;/strong&gt;选项卡，使用右上角的&lt;strong&gt;添加策略&lt;/strong&gt;添加不同的策略要求，完成后点击保存按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/oDQGDG.webp&quot; alt=&quot;设置密码策略 Password strategy settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  虽然我们在此处设置了对新密码的复杂度的策略要求，但是其实还没有对系统中的用户进行生效。我们需要再次到刚才的 LDAP 配置的高级设置中打开&lt;strong&gt;验证密码策略&lt;/strong&gt;。下图中的 &lt;strong&gt;LDAPv3 密码&lt;/strong&gt; 可以选择打开或不打开，影响不大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/SK5EQp.webp&quot; alt=&quot;开启密码策略 Enable password strategy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  为了验证用户密码策略是否真的生效，需要切换到最开始的用户页。点击 &lt;strong&gt;Update&lt;/strong&gt; 按钮即可跳转到更新密码页。这里可能系统会对安全性进行校验要求你再次输入密码以及二次验证码（如果有），输入即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/1pkx9L.webp&quot; alt=&quot;尝试更新密码验证密码策略 Update password to verify password strategy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  以下是一个设置简单密码 1234 所返回错误提示的例子。一般来说，我们会对密码设置以下策略：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密码长度不得小于 8 位，不得大于 32 位&lt;/li&gt;
  &lt;li&gt;密码中必须同时包含大小写字母&lt;/li&gt;
  &lt;li&gt;密码中必须包含数字&lt;/li&gt;
  &lt;li&gt;密码中必须包含至少一个特殊字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/GPSGJr.webp&quot; alt=&quot;密码策略验证结果 Results by password strategies&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;otp-验证&quot;&gt;OTP 验证&lt;/h4&gt;

&lt;p&gt;  正如之前分析的一样，一个完整的统一认证服务应该具有多因素认证。而多因素认证中相较更为安全的就是 OTP（一次性密码）。Keycloak 就支持 OTP 验证。从下面的页面可以看到，默认的 OTP 策略配置是可以使用 FreeOTP 和 Google Authenticator。但是如果你修改了其中的一项配置，保存后就会显示只支持 FreeOTP。说来也奇怪，FreeOTP 这款开源软件好像不怎么更新了，其安卓客户端已经非常古老了。据笔者测试，如果 OTP 策略支持 Google Anthenticator，那么现在市面上比较流行的 Authy、Microsoft Anthenticator 等等都能支持。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/Ak4ck9.webp&quot; alt=&quot;设置 OTP 策略 OTP strategy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  为了让系统的所有用户都开启 OTP，可以如下所示在&lt;strong&gt;必要操作&lt;/strong&gt;选项卡中配置 OTP 为默认操作。这样一来，用户在第一次登录后就会被要求配置 OTP。（PS：微软的 Office365 也是会有这个默认要求。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/Lqi4RG.webp&quot; alt=&quot;强制所有用户启用 OTP 策略 Enable OTP for all users&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  为了验证 OTP 是否可用，移步至用户页点击&lt;strong&gt;设置验证应用&lt;/strong&gt;按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/WaedQr.webp&quot; alt=&quot;验证 OTP Verify OTP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  点击后跳转到配置页面如下。使用刚才说到的任意一款应用扫描页面中的二维码即可完成添加。之后根据应用上显示的二次验证码填写这里的一次性验证码，点击提交。如果正常跳转，说明配置成功。如果配置失败，将会停留在此页面，并有红色错误提示出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/TkcriA.webp&quot; alt=&quot;OTP 设置页面 OTP set page&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ldap-直接集成应用&quot;&gt;LDAP 直接集成应用&lt;/h2&gt;

&lt;p&gt;  除了上面介绍了搭建基于 LDAP 的统一认证服务（例如 Keycloak）可以为其他应用提供登录验证服务，还可以直接将应用与 LDAP 服务集成。这里可能会有一个疑问：既然 LDAP 自身就可以与应用集成，为什么还要费这么大劲去搭建基于 LDAP 的统一认证服务呢？其实这里需要考虑“ LDAP 暴露在公网好还是统一认证服务暴露在公网好？”这个问题。LDAP 作为目录服务，最根本的目的是服务于内部网络中的应用，而非广域网中的应用。有了统一认证服务就可以很好的将 LDAP 安安全全地保护在内网中，而统一认证服务则作为一个网页应用与其他网页应用或客户端应用进行交互。这样的方式或许显得更加优雅、放心。&lt;/p&gt;

&lt;p&gt;  这里，打算之后就《LDAP 集成》为主题写一个系列（挖一个坑）。（PS：先预给出对应链接，如果能够访问那就是写好了。）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-gitlab.html&quot;&gt;《LDAP 集成之 Gitlab 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-nextcloud.html&quot;&gt;《LDAP 集成之 Nextcloud 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-dokuwiki.html&quot;&gt;《LDAP 集成之 Dokuwiki 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-squid.html&quot;&gt;《LDAP 集成之 Squid 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-openvpn.html&quot;&gt;《LDAP 集成之 OpenVPN 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-nexus3.html&quot;&gt;《LDAP 集成之 Nexus3 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-apache.html&quot;&gt;《LDAP 集成之 Apache 篇》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./ldap-nginx.html&quot;&gt;《LDAP 集成之 Nginx 篇》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infvie.com/ops-notes/openldap-2.html&quot;&gt;OpenLDAP 落地实战&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rxrw.me/tech/user-system-compare/&quot;&gt;选择合适的用户系统 - cas、keyclock、authz、authing 等的对比&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/275994810&quot;&gt;统一身份认证和单点登录的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cxyzjd.com/article/wxb880114/101370975&quot;&gt;单点登录 SSO、OAuth、LDAP、CAS 的流程与应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.soumu.go.jp/main_content/000256289.pdf&quot;&gt;Privacy Enhancement for Open Federated Identity/Access Management Platforms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mastertheboss.com/keycloak/keycloak-with-docker/&quot;&gt;How to run Keycloak with Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="LDAP" /><category term="集成" /><category term="统一认证" /><category term="单点登录" /><category term="Keycloak" /><summary type="html">前言</summary></entry><entry><title type="html">利用 Github Action 一键编译多平台 Docker 镜像</title><link href="https://lisz.me/tech/docker/github-action.html" rel="alternate" type="text/html" title="利用 Github Action 一键编译多平台 Docker 镜像" /><published>2022-04-22T13:54:00+09:00</published><updated>2022-04-22T13:54:00+09:00</updated><id>https://lisz.me/tech/docker/github-action</id><content type="html" xml:base="https://lisz.me/tech/docker/github-action.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;容器化的缘起&quot;&gt;容器化的缘起&lt;/h3&gt;

&lt;p&gt;  在技术发展的早期，Java 语言以其“一次编译，随处运行”的特点在众多编程语言中独领风骚。而 Java 语言编译出的 jar 包始终是应用层面上的，如果我们想要运行一个 Web 应用的 jar 包，仍然需要搭建 Tomcat 服务器才能真正运行这个 Java 应用。于是当虚拟化技术出现之后，开始有了同时包含 Tomcat 服务器和 jar 包等其他必要的配置和环境的完整虚拟化镜像。只要在大家的电脑或者服务器上安装了对应的虚拟化软件，运行这个虚拟化镜像就可以看到最终的 Web 界面并正常使用。&lt;/p&gt;

&lt;p&gt;  不过，这也有一个明显的缺点：虚拟化镜像文件通常很大，下载速度慢、时间长；运行时虚拟化软件和虚拟机占用的资源较大。容器化技术也正是为了解决这些缺点而生。Docker 是最早向大众开放的容器化技术，以“占用资源少、镜像文件小、部署配置简单”等特点受到开发者的一致好评。之后，Google、阿里等团队也纷纷将自家内部自研的容器化相关技术开放，比如阿里的 &lt;a href=&quot;https://pouchcontainer.io/&quot;&gt;PouchContainer&lt;/a&gt;、谷歌的 &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;、SUSE 的 &lt;a href=&quot;https://rancher.com/&quot;&gt;Rancher&lt;/a&gt; 等等。这些技术以及 AWS、Azure、GCP、Aliyun 等云服务器产商提供的容器化平台，大大加速了容器化技术的普及和应用，已经有越来越多的平台、应用迁移到容器化部署、管理。&lt;/p&gt;

&lt;h3 id=&quot;平台架构的差异&quot;&gt;平台架构的差异&lt;/h3&gt;

&lt;p&gt;  近年来，随着像 AWS、Apple 等大公司投入到自研芯片的队列中，能耗更低、算力更强的 ARM 芯片开始出现在真实的虚拟化集群、容器化集群、高性能计算集群中。和我们日常使用电脑或服务器上的 Intel 或 AMD x64 芯片不同，ARM 芯片在现实中还比较少，软件包的兼容性可能也不是很好。另外，我们通常编译 Docker 镜像都是在自己的电脑或者服务器上，所以最终提交的镜像也只能是电脑或服务器的平台架构。也就是说，我们似乎无法在 Intel 芯片的设备上编译出想要的支持在 ARM 芯片上运行的 Docker 镜像。&lt;/p&gt;

&lt;p&gt;  这里，我们可以看一下 Docker 官方列出支持的所有平台架构：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// https://github.com/docker-library/bashbrew/blob/master/architecture/oci-platform.go&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupportedArches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OCIPlatform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;amd64&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;amd64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;arm32v5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;arm32v6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;arm32v7&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;arm64v8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arm64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;i386&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;386&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;mips64le&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mips64le&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;ppc64le&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ppc64le&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;riscv64&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;riscv64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;s390x&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;s390x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;&quot;windows-amd64&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;amd64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  事实上，除了 ARM 芯片架构之外，还有一些特有的架构，比如 IBM 的 s390x 架构、RISC-V 的 riscv64 架构等等。一般的 Docker 镜像可能都只考虑常见的 amd64、386 架构，对于其他架构可能就没有所谓的官方支持了。笔者也是在使用 Docker 方式部署 &lt;a href=&quot;https://github.com/YOURLS/YOURLS&quot;&gt;YOURLS&lt;/a&gt; 时发现官方竟然支持了上面列出的几乎所有的平台架构，简直不要太方便。于是就想这是怎么做到的？难道他们用了不同平台的设备分别编译了一遍再推送上来的？在一番调查之后发现，他们可能用了 Github 提供的 Action 来自动编译不同平台的镜像。但事实上在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; 目录下面的所有配置文件均与 Docker 镜像编译无关。不过，Github Action 帮助我们自动编译出不同平台架构的 Docker 镜像这件事确是可行的。&lt;/p&gt;

&lt;h2 id=&quot;自动化构建&quot;&gt;自动化构建&lt;/h2&gt;

&lt;p&gt;  这里，笔者仅对如何利用 Github Action 自动编译出不同平台架构的 Docker 镜像进行叙述。如想要了解更多关于 Github Action 的知识，可以查看参考资料中给出的阮一峰的《Github Action 入门教程》。&lt;/p&gt;

&lt;h3 id=&quot;action-配置&quot;&gt;Action 配置&lt;/h3&gt;

&lt;p&gt;  在 Github 代码库的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/&lt;/code&gt; 目录下新建 docker-image.yml 配置文件（文件名可自定义）。文件内容如下：（其中花括号前面的斜杆是为了不被 Jekyll 解析而用，使用时请删除）&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ci&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v*&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;APP_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;squid&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;DOCKERHUB_REPO&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/squid&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up QEMU&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/setup-qemu-action@v1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Docker Buildx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/setup-buildx-action@v1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Login to DockerHub&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.DOCKERHUB_USERNAME }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.DOCKERHUB_TOKEN }}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Generate App Version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo APP_VERSION=`git describe --tags --always` &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and push&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/386&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/amd64&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/arm/v5&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/arm/v7&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/arm64&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/mips64le&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/ppc64le&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;linux/s390x&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;build-args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;APP_NAME=${{ env.APP_NAME }}&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;APP_VERSION=${{ env.APP_VERSION }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;${{ env.DOCKERHUB_REPO }}:latest&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;${{ env.DOCKERHUB_REPO }}:${{ env.APP_VERSION }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  以下对该文件内容分别进行解释：&lt;/p&gt;

&lt;h4 id=&quot;流程名&quot;&gt;流程名&lt;/h4&gt;

&lt;p&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 字段定义了这个流程的名称，可以与配置文件名不同。只要与其他流程配置文件中的流程名不同即可。&lt;/p&gt;

&lt;h4 id=&quot;触发条件&quot;&gt;触发条件&lt;/h4&gt;

&lt;p&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt; 字段定义了在何种条件下触发该流程。这里定义的是在以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; 开头的新 tag 提交时触发该流程。&lt;/p&gt;

&lt;h4 id=&quot;环境变量&quot;&gt;环境变量&lt;/h4&gt;

&lt;p&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; 字段定义了静态可公开环境变量，一般来说可以将应用的名称、镜像的名称写在这个部分。&lt;/p&gt;

&lt;h4 id=&quot;任务&quot;&gt;任务&lt;/h4&gt;

&lt;p&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jobs&lt;/code&gt; 字段定义了流程所需要执行的各项任务，可以是一个或多个。这里定义了 6 个任务，从前到后分别是：检查代码是否在工作目录、安装 qemu 支持更多架构、安装 docker 镜像编译环境、登录 DockerHub、生成应用版本、构建和推送。这里比较灵活的一点是，通过提交的 tag 名来确定 Docker 镜像的 tag，从而实现同时推送新 tag 和 latest。在构建和推送任务中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platforms&lt;/code&gt; 字段定义了我们想要支持的平台架构，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; 字段定义了是否推送，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-args&lt;/code&gt; 定义了加入到 Docker 镜像的变量， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt; 定义了构建完成后所使用的 tag 值。&lt;/p&gt;

&lt;h3 id=&quot;secret-配置&quot;&gt;Secret 配置&lt;/h3&gt;

&lt;p&gt;  由于我们需要保护我们的 DockerHub  账户和密码的安全，所以需要通过 Secret 的变量来传递给 Github Action。如下图所示，进入 Settings 的 Security 的 Secrets 的 Actions 标签，添加对应的 DOCKERHUB_USERNAME 和 DOCKERHUB_TOKEN 变量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/T8UIVu.webp&quot; alt=&quot;变量配置 ENV Setting&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;发布新-tag&quot;&gt;发布新 tag&lt;/h3&gt;

&lt;p&gt;  访问 &lt;a href=&quot;https://github.com/用户名/项目名/releases/new&quot;&gt;https://github.com/用户名/项目名/releases/new&lt;/a&gt; 即可到达发布页面，如下所示。定义一个以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; 开头的新的标签并指向想要的分支，依次填写标题、描述后点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Public release&lt;/code&gt; 按钮完成发布。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/y7i8fo.webp&quot; alt=&quot;新标签 New Tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  发布 tag 后 Github Action 就会自动开始执行上述定义流程，最终成功发布支持不同平台架构的 Docker 镜像到 DockerHub。当然，如果想要发布到其他平台，可以将镜像名和对应的验证方式修改一下即可同样有效。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/article/761278&quot;&gt;Linux 容器化技术前世今生（虚拟化、容器化、Docker）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html&quot;&gt;GitHub Actions 入门教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.isayme.org/posts/issues-55/&quot;&gt;Github Actions 自动构建 Docker 镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="docker" /><category term="github action" /><category term="workflow" /><category term="docker" /><category term="多平台" /><summary type="html">前言</summary></entry><entry><title type="html">给 Nginx 站点套上一层 Cloudflare</title><link href="https://lisz.me/tech/webmaster/nginx-cloudflare.html" rel="alternate" type="text/html" title="给 Nginx 站点套上一层 Cloudflare" /><published>2022-04-05T15:44:00+09:00</published><updated>2022-04-05T15:44:00+09:00</updated><id>https://lisz.me/tech/webmaster/nginx-cloudflare</id><content type="html" xml:base="https://lisz.me/tech/webmaster/nginx-cloudflare.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  站点访问速度及安全一直以来都是站长们建站所关注的重要内容。为了满足站点能够被全球用户的访问需求，通常我们会采用云服务商提供的 CDN 来加速访问速度。比如国外比较知名的 AWS 提供的 &lt;a href=&quot;https://aws.amazon.com/cn/cloudfront/&quot;&gt;Cloudfront&lt;/a&gt;、GCP 提供的 &lt;a href=&quot;https://cloud.google.com/cdn&quot;&gt;Cloud CDN&lt;/a&gt; 以及 Cloudflare 公司提供的 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt; 等，国内比较知名的腾讯云提供的 &lt;a href=&quot;https://cloud.tencent.com/product/cdn&quot;&gt;CDN&lt;/a&gt;、阿里云提供的 &lt;a href=&quot;https://cn.aliyun.com/product/cdn&quot;&gt;CDN&lt;/a&gt;、又拍云提供的 &lt;a href=&quot;https://www.upyun.com/products/cdn&quot;&gt;CDN&lt;/a&gt; 以及七牛云提供的 &lt;a href=&quot;https://www.qiniu.com/products/qcdn&quot;&gt;CDN&lt;/a&gt; 等。(PS：其实国内的其他云服务商比如华为云、百度云、滴滴云、京东云等等都提供了 CDN 解决方案。)&lt;/p&gt;

&lt;p&gt;  CDN 除了常规的多地、多节点缓存加速之外，还可以清洗流量，从而预防和对抗 DDoS 攻击。如果我们购买的服务器不是固定带宽、流量无限，而是大带宽、流量按量付费的话，遇到 DDoS 就会受到很大损失。DDoS 攻击不仅会让服务器上的服务无法正常响应请求，从而造成 Nginx 或 Apache 服务过饱和，甚至服务器宕机，还会产生很大的无效入站流量消耗。一般来说，流量按量计费是对入站流量进行计费。这样一来，光流量这一项的经济损失就可能会是非常庞大的数字。&lt;/p&gt;

&lt;p&gt;  当我们给 Nginx 站点套上一层 Cloudflare 或者其他 CDN 服务之后，用户访问服务时会先经过 Cloudflare。Cloudflare 免费版就具有清洗流量的功能：当 Cloudflare 发现流量来自僵尸网络或者异常流量请求时，就会拒绝响应或者只响应某些请求，而这些请求也会转给真实的服务器进行响应。从这里也可以看出来，用上 Cloudflare 之后，用户根本不知道真实服务器的 IP 地址或其他信息，能进一步保障服务器的安全。&lt;/p&gt;

&lt;p&gt;  这里，为了在实际的应用场景中来实践，特地选取了适合个人搭建的个人短地址服务 &lt;a href=&quot;https://yourls.org&quot;&gt;Yourls&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;yourls&quot;&gt;Yourls&lt;/h3&gt;

&lt;h4 id=&quot;简介&quot;&gt;简介&lt;/h4&gt;

&lt;p&gt;  Yourls （&lt;strong&gt;Y&lt;/strong&gt;our &lt;strong&gt;O&lt;/strong&gt;wn &lt;strong&gt;URL&lt;/strong&gt; &lt;strong&gt;S&lt;/strong&gt;hortener） 是一款基于 PHP 的允许你运行自己的短地址服务的免费和开源的软件。你可以完全控制你的数据、详细的统计和分析、插件以及更多。以下是源代码和官方推荐插件的仓库：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/YOURLS/YOURLS&quot;&gt;YOURLS/YOURLS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/YOURLS/awesome-yourls&quot;&gt;YOURLS/awesome-yourls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;部署&quot;&gt;部署&lt;/h4&gt;

&lt;p&gt;  为了更加快速地部署 Yourls 服务，这里选用 docker-compose 的方式进行部署。以下是配置文件内容：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.1&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;yourls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yourls&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;YOURLS_DB_PASS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;abcdefgh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;YOURLS_SITE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://url.com&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;YOURLS_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;YOURLS_PASS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin@2022&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:5.7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./db:/var/lib/mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;abcdefgh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yourls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  Yourls 的官方 Docker 镜像提供了多种服务方式和体系架构，如下图所示。如果使用的服务器体系架构不同，对应的 mysql 镜像也应做出更改。比如，如果服务器是 IBM 的 s390x 架构，就可以选 &lt;a href=&quot;https://hub.docker.com/ibmcom/mysql-s390x&quot;&gt;ibmcom/mysql-s390x:5.7.34&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/q0AAZg.webp&quot; alt=&quot;Yourls Dockerhub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  编辑完配置文件后执行以下命令启动 Yourls 服务：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cloudflare-配置&quot;&gt;Cloudflare 配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;访问 &lt;a href=&quot;https://dashcloudflare.com&quot;&gt;Cloudflare 控制台&lt;/a&gt;，选择进入已添加的域名操作面板。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;添加域名记录&quot;&gt;添加域名记录&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;进入 &lt;strong&gt;DNS&lt;/strong&gt; 面板，点击&lt;strong&gt;添加记录&lt;/strong&gt;按钮。&lt;/li&gt;
  &lt;li&gt;采用 A 记录或 CNAME 记录类型，这里的代理状态一定要像现在这样打开，否则 Cloudflare 将不会被启用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/tQK16A.webp&quot; alt=&quot;添加域名 Add DNS record&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;生成证书&quot;&gt;生成证书&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;进入 &lt;strong&gt;SSL/TLS&lt;/strong&gt; 的 &lt;strong&gt;源服务器&lt;/strong&gt; 面板，点击&lt;strong&gt;创建证书&lt;/strong&gt;按钮。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/gIMUvW.webp&quot; alt=&quot;创建证书 Create certs&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用默认配置点击&lt;strong&gt;创建&lt;/strong&gt;按钮即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/pituGT.webp&quot; alt=&quot;添加主机名 Add hosts&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;然后新的证书和私钥就生成了。需要注意的是，以下的私钥只能在生成时看到，证书可以之后也能看到，所以这里一定要复制好如下框内的源证书和私钥的内容。可以分别保存为 url.com.pem 和 url.com.key 文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/2CAEBX.webp&quot; alt=&quot;保存证书 Save certs&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保存完成后，点击&lt;strong&gt;确定&lt;/strong&gt;按钮结束操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;部署证书&quot;&gt;部署证书&lt;/h4&gt;

&lt;p&gt;  可以使用以下命令远程拷贝源证书和私钥到目标服务器，或者刚才直接保存在目标服务器上。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp url.com.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; nginx:/home/ubuntu/ssl/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginx-配置&quot;&gt;Nginx 配置&lt;/h3&gt;

&lt;h4 id=&quot;添加配置&quot;&gt;添加配置&lt;/h4&gt;

&lt;p&gt;  在 Nginx 配置目录 /etc/nginx/sites-available 下新增 yourls 配置文件（需使用 sudo 权限方可新增），配置文件内容如下所示：&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# /etc/nginx/sites-available/yourls&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;ssl_certificate&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;/home/linux1/ssl/url.com.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_certificate_key&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;/home/linux1/ssl/url.com.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;url.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;access_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/yourls.access.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;error_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/yourls.error.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Real-IP&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;可选只允许-cloudflare-访问&quot;&gt;（可选）只允许 Cloudflare 访问&lt;/h4&gt;

&lt;p&gt;  为了进一步确保真实服务器只响应来自 Cloudflare 转发的请求，我们可以在 Nginx 的配置文件中增加对于允许访问 IP 地址的限制。如下配置文件中的 IPv4/IPv6 的 IP 地址段均来自 Cloudflare 官方声明。此 cf.conf 文件放置在 /etc/nginx 目录下。&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cf.conf&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://www.cloudflare.com/ips&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# IPv4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.21.244.0/22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.22.200.0/22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;103&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.31.4.0/22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.16.0.0/12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.162.192.0/18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.72.0/22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;141&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.101.64.0/18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;162&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.158.0.0/15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.64.0.0/13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;173&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.245.48.0/20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;188&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.114.96.0/20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;190&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.93.240.0/20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;197&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.234.240.0/22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;198&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.41.128.0/17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# IPv6&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cb00::/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;2606&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f800::/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b500::/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;2405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;2a06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c0::/29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2c0f:f248::/32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  另外，如要启用该配置文件，需在刚才写好的站点配置文件 yourls 中再增加两行来使其生效，内容如下所示:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;s&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cf.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;deny&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;生效配置&quot;&gt;生效配置&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/nginx/sites-available/yourls /etc/nginx/sites-enabled/yourls
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;验证&quot;&gt;验证&lt;/h2&gt;

&lt;p&gt;  访问 &lt;a href=&quot;https://url.com/install.php&quot;&gt;https://url.com/install.php&lt;/a&gt; 确认是否正常访问 Yourls 的安装初始化界面，如下所示。点击 &lt;strong&gt;Install YOURLS&lt;/strong&gt; 按钮即可完成安装。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/bQwdsu.webp&quot; alt=&quot;Yourls&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gingerdoc.com/tutorials/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-20-04&quot;&gt;如何在 Ubuntu 20.04 上使用 Cloudflare 和 Nginx 托管网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nova.moe/nginx-block-non-cloudflare-ips/&quot;&gt;让 Nginx 只允许 Cloudflare 反向代理流量以隐藏源站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zhonger</name></author><category term="tech" /><category term="webmaster" /><category term="Nginx" /><category term="Cloudflare" /><category term="加速" /><summary type="html">前言</summary></entry><entry><title type="html">[译文]实用性 vs 理解力：进入 2022 年的机器学习领域</title><link href="https://lisz.me/ac/ml/utility-vs-understanding.html" rel="alternate" type="text/html" title="[译文]实用性 vs 理解力：进入 2022 年的机器学习领域" /><published>2022-03-21T14:30:00+09:00</published><updated>2022-03-21T14:30:00+09:00</updated><id>https://lisz.me/ac/ml/utility-vs-understanding</id><content type="html" xml:base="https://lisz.me/ac/ml/utility-vs-understanding.html">&lt;p&gt;&lt;strong&gt;原文标题&lt;/strong&gt;：&lt;a href=&quot;https://www.aidancooper.co.uk/utility-vs-understanding/&quot;&gt;Utility vs Understanding: the State of Machine Learning Entering 2022&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;原文作者&lt;/strong&gt;：Aidan Cooper&lt;/p&gt;

&lt;p&gt;  机器学习在某些领域中的经验实用性已经远远超出了我们对基础理论的理解：这些模型不合理地非常有效，但我们并不完全确定原因。相反，在其他相对容易理解的研究领域中难以实现或者在实践中的适用性有限。本文试图就机器学习的实用性和理解力绘制不同角度的图，并探讨科学和技术进步如何在这一框架内体现。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 声明 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  构建这个矩阵是一项非常主观的尝试，它将多方面的字段减少为一维尺度上未定义的单个值，它们本身由多个因素组成。这个矩阵仅代表我个人的观点——一个仅根据一般特征粗略评估的领域。我承认这不精确，无视了细微差别，而且我也不是这些技术中大多数的专家。&lt;br /&gt;
  本文主要旨在讨论经验效用和理论理解之间的对比，以及它们与科学或者技术进步的关系。在矩阵中精确定位研究领域并不是目标。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  我所说的&lt;strong&gt;经验效用&lt;/strong&gt;是指一种综合衡量方法，它考虑了一种方法的适用性广度、实施的难易程度，最重要的是：它在现实世界中的有用程度。一些具有高实用性的方法具有更广泛的适用性，而另一些则更强大，但仅限于狭窄的领域。可靠、可预测且没有重大缺陷的方法也被认为具有更高的效用。&lt;/p&gt;

&lt;p&gt;  我所说的&lt;strong&gt;理论理解&lt;/strong&gt;是指一种综合衡量方法（比如，输入和输出之间的关系如何？如何可以获得预期的结果？这种技术的内部机制是什么？），它考虑了直观可解释性（interpretability）和理论可解释性（explainability），以及其文献的深度和完整性。&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;理解程度低的方法通常在实施时采用启发式方法或大量试错。理解程度高的方法往往具有公式化的实现，具有强大的理论基础和可预测的结果。更简单的方法（例如线性回归）具有较低的理论上限，而更复杂的方法（例如深度学习）具有更高的理论上限。当谈到一个领域的文献的深度和完整性时，我已经更具其假设的理论上限来评估该领域——一个来自直觉的想象值。&lt;/p&gt;

&lt;p&gt;  我们可以将矩阵构造为四个象限，轴的交点代表一个假设的、半成熟的参考领域，具有平均理解和平均效用。这让我们能够以定性的方式解释矩阵中的领域，具体取决于领域所在的象限，如下图所示。给定象限中的领域可能具有部分或全部这些普遍特征。&lt;/p&gt;

&lt;p&gt;  一般来说，我们期待效用和理解是松散相关的，因为被很好理解的东西比那些不被理解的东西可能更有用。这意味着大多数领域应位于左下象限或右上象限。远离对角线的领域代表着有趣的例外。通常，实用性落后于理论，因为将新兴的研究转化为实际应用需要时间。因此，对角线应该位于原点上方，而不是直接穿过它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/PJcfa1.webp&quot; alt=&quot;机器学习领域分布图 The distribution of Machine Learning fields&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2022-年的机器学习领域&quot;&gt;2022 年的机器学习领域&lt;/h2&gt;

&lt;p&gt;  并非所有的领域都完全包含在机器学习（ML）中，但它们都可以应用在机器学习的上下文中或与之密切相关。许多评估的领域重叠并且无法清晰地描述：强化学习、联邦学习和图学习等高级机器学习方法通常基于深度学习。在这些情况下，我考虑了与它们的理论和实用性的非深度学习方面相关的领域。&lt;/p&gt;

&lt;h3 id=&quot;右上象限高理解高效用&quot;&gt;右上象限：高理解，高效用&lt;/h3&gt;

&lt;p&gt;  &lt;strong&gt;线性回归&lt;/strong&gt;是一种简单、易于理解且高效的技术的典型示例。它是被低估的、默默无闻的英雄，经常被时尚同行所忽视。它的使用广度和透彻的理论基础不仅将其置于右上角，而且将其固定在右上角。&lt;/p&gt;

&lt;p&gt;  传统（非深度）&lt;strong&gt;机器学习&lt;/strong&gt;已经成熟为一个具有高度理解性和实用性的领域。复杂的机器学习算法，例如梯度决策树，已证明自己在非平凡的预测任务中通常优于线性回归。大数据问题无疑就是这种情况。可以说，对过度参数化模型的理论理解仍然存在漏洞，但实施机器学习是一个精炼的方法论过程，并且模型可以在行业环境中可靠地操作（如果做得好）。然而，额外的复杂性和灵活性确实会导致错误的实现，这就是为什么我将机器学习放在线性回归的左侧。一般来说，&lt;strong&gt;有监督的&lt;/strong&gt;机器学习会比&lt;strong&gt;无监督的&lt;/strong&gt;机器学习更精细，影响更大，但两种方法都有效地解决了不同的问题空间。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;贝叶斯方法&lt;/strong&gt;有一群狂热的从业者，他们宣扬它优于更流行的经典统计方法。在某些情况下，贝叶斯模型特别有用：当仅有点估计不够时，不确定性的估计就显得很重要；当数据有限或高度缺失时；并且当您了解要在模型中明确包含的数据生成过程时。贝叶斯模型的实用性受到了以下事实的限制：对于许多问题，点估计已经足够好，人们只是默认使用非贝叶斯方法。更重要的是，有一些方法可以量化传统机器学习的不确定性（它们只是很少被使用）。通常，将机器学习算法简单地应用于数据会更容易，而不必考虑数据生成机制和先验。贝叶斯模型在计算上也很昂贵，如果理论进步产生更好的采样和逼近方法，它会具有更高的效用。&lt;/p&gt;

&lt;h3 id=&quot;右下象限低理解高效用&quot;&gt;右下象限：低理解，高效用&lt;/h3&gt;

&lt;p&gt;  与大多数领域的进展相反，&lt;strong&gt;深度学习&lt;/strong&gt;取得了一些惊人的成功，尽管理论方面被证明从根本上难以取得进展。深度学习体现了一种鲜为人知的方法的许多特征：模型不稳定、难以可靠地构建、基于弱启发式进行配置以及产生不可预测的结果。像随机种子之类的可疑调参方法非常普遍，而且工作模型的内部机制也很难解释。然而，深度学习继续推进并在计算机视觉和自然语言处理等领域达到了超人的水平，开辟了一个充满其他难以完成的任务的世界，如自动驾驶。&lt;/p&gt;

&lt;p&gt;  假设，&lt;strong&gt;通用人工智能&lt;/strong&gt;将占据右下角，因为根据定义，超级智能超出了人类的理解范围，可以用于解决任何问题。目前，它仅作为思想实验包含在内。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/aSdim3.webp&quot; alt=&quot;理论理解力 vs 经验实用性 understanding vs utility&quot; /&gt;
&lt;strong&gt;&lt;center&gt;图1. 每个象限的定性描述。领域可以通过其对应区域的部分或全部描述来描述。&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;左上象限高理解低效用&quot;&gt;左上象限：高理解，低效用&lt;/h3&gt;

&lt;p&gt;  大多数的&lt;strong&gt;因果推断&lt;/strong&gt;不是机器学习，但有时是，并且总是对预测模型感兴趣。因果关系可以分为随机对照实验（RCT）和更复杂的因果推理方法，后者试图从观察数据中衡量因果效应。RCT 在理论上很简单并给出严格的结果，但在现实世界中进行通常既昂贵又不切实际——如果不是不可能的话——因此效用有限。因果推理方法本质上是模拟随机对照实验，而无需做任何事情，这使得它们执行起来不那么令人望而却步，但有许多限制和陷阱可能使结果无效。总体而言，因果关系仍然是一个令人沮丧的追求，其中当前的方法通常不能满足我们想要问的问题，除非这些问题可以通过随机对照实验进行探索，或者它们恰好适合某些框架（例如，作为“自然实验”的偶然结果）。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;联邦学习&lt;/strong&gt;（FL）是一个很酷的概念，但却很少受到关注——可能是因为它最引人注目的应用程序需要分发到大量智能手机设备，因此联邦学习只有两个参与者才能真正研究：Apple 和 Google。联邦学习还存在其他用例，例如汇集专有数据集，但协调这些倡议存在政治和物流挑战，限制了它们在实践中的效用。尽管如此，对于听起来像是一个奇特的概念（大致概括为：“将模型引入数据，而不是将数据引入模型”），联邦学习是有效的，并且在键盘文本预测和个性化新闻推荐等领域有切实的成功案例。联邦学习背后的基本理论和技术似乎具有足够的鲁棒性，以让联邦学习得到更广泛的应用。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;强化学习&lt;/strong&gt;（RL）在国际象棋、围棋、扑克和 Dota 2 等游戏中达到了前所未有的能力水平。但在视频游戏和模拟环境之外，强化学习还没有令人信服地转化为现实世界的应用程序。机器人技术本应成为强化学习的下一个前沿领域，但这并没有实现——现实似乎比高度受限的玩具环境更具挑战性。也就是说，到目前为止，强化学习的成就是鼓舞人心的，真正喜欢国际象棋的人可能会认为它的效用应该更高。我期待看到强化学习在被置于矩阵右侧之前实现一些潜在的实际应用。&lt;/p&gt;

&lt;h3 id=&quot;左下象限低理解低效用&quot;&gt;左下象限：低理解，低效用&lt;/h3&gt;

&lt;p&gt;  &lt;strong&gt;图神经网络&lt;/strong&gt;（GNNs）是目前机器学习的一个非常热门的领域，在多个领域都取得了可喜的成果。但对于其中许多示例，尚不清楚图神经网络是否比使用更传统的结构化数据与深度学习架构组合的替代方法更好。数据本身是图结构的问题，例如化学信息学中的分子似乎具有更引人注目的图神经网络结果（尽管这些通常不如非图相关的方法）。与大多数领域相比，用于大规模训练图神经网络的开源工具与工业中使用的内部工具之间似乎存在很大差异，这限制了大型图神经网络在这些有围墙的花园之外的可行性。该领域的复杂性和广度表明理论上限很高，因此图神经网络应该有成熟的空间并令人信服地证明某些任务的优势，这将带来更大的实用性。图神经网络也可以从技术进步中获益，因为图目前还不能自然地适用于现有的计算硬件。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;直观可解释的机器学习&lt;/strong&gt;（Interpretable machine learning，IML）是一个重要且有前途的领域，并且持续受到关注。SHAP 和 LIME 等技术已经成为真正可用的工具来处理机器学习模型。由于有限的采用，现有方法的效用尚未完全实现——尚未建立健全的最佳实践和实施指南。然而，直观可解释的机器学习目前的主要弱点是它没有解决我们真正感兴趣的因果问题。直观可解释的机器学习解释了模型如何进行预测，但没有解释数据背后隐含的因果关系（尽管经常被错误地解释）。在取得重大理论进展之前，直观可解释的机器学习的合法用途大多仅限于模型调试或监控和假设生成。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;量子机器学习&lt;/strong&gt;（Quantum machine learning，QML）远远超出了我的知识，但目前似乎是一种假设性的尝试，耐心地等待着可行的量子计算机变成可用。在那之前，量子机器学习先暂时默默地置于左下角。&lt;/p&gt;

&lt;h2 id=&quot;渐进式进展技术飞跃和范式转变&quot;&gt;渐进式进展、技术飞跃和范式转变&lt;/h2&gt;

&lt;p&gt;  领域可以通过三种主要机制来遍历理论理解与经验效用矩阵（图2）。&lt;/p&gt;

&lt;p&gt;  渐进式进展是缓慢而稳定的进展，它在矩阵的右侧向上移动。过去几十年的&lt;strong&gt;有监督机器学习&lt;/strong&gt;就是一个很好的例子，在此期间，越来越有效的预测算法得到改进和采用，为我们提供了很强大的工具箱。&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;渐进式进展是所有成熟领域的现状，除非由于技术飞跃和范式转变才会经历了更强烈的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/lR1g7Q.webp&quot; alt=&quot;领域发展机制 The steps of development&quot; /&gt;
&lt;strong&gt;&lt;center&gt;图2. 领域可以遍历矩阵的方式的说明性示例。&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  由于技术的飞跃，一些领域看到了科学进步的阶梯式变化。&lt;strong&gt;深度学习&lt;/strong&gt;领域并没有因其理论基础而解锁，这些理论基础是在 2010 年代深度学习热潮之前 20 多年发现的——它是由消费级 GPU 支持的并行处理推动了它的复兴。技术飞跃通常表现为沿经验效用轴向右跳跃。然而，并非所有以技术为主导的进步都是飞跃。今天的深度学习的特点是通过使用更多的计算能力和越来越专业的硬件训练越来越大的模型来实现跃进式进步。&lt;/p&gt;

&lt;p&gt;  在这个框架内科学进步的最终机制是&lt;strong&gt;范式转变&lt;/strong&gt;。正如托马斯·库恩（Thomas Kuhn）在他的著作《科学革命的结构》中所指出的，范式转变代表了科学学科的基本概念和实验实践的重要变化。Donald Rubin 和 Judea Pearl 开创的因果框架就是这样的一个例子，它将因果关系领域从随机对照实验和传统的统计分析提升为&lt;strong&gt;因果推理&lt;/strong&gt;形式的更强大的数学化学科。范式转变通常表现为理解的向上运动，这可能会跟随或伴随着效用的增加。&lt;/p&gt;

&lt;p&gt;  但是，范式转变可以在任何方向上遍历矩阵。当神经网络（以及随后的深度神经网络）将自己确立为传统机器学习的独立范式时，这最初对应着实用性和理解力的下降。许多新兴领域以这种方式从更成熟的研究领域分化出来。&lt;/p&gt;

&lt;h2 id=&quot;预测和深度学习的科学革命&quot;&gt;预测和深度学习的科学革命&lt;/h2&gt;

&lt;p&gt;  总而言之，以下是我认为未来可能发生的一些推测性预测（表1）。右上象限中的领域被省略，因为它们太成熟而看不到重大进展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;center&gt;表1. 机器学习的特定领域未来可能会或可能不会取得进展的预测。&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.luish.cc/blog/w4ELGn.webp&quot; alt=&quot;未来可能的发展方向 Possible development in future&quot; /&gt;&lt;/p&gt;

&lt;!-- | 研究领域 | 2022 年以后的预测 |
| -- | -- |
| 深度学习 | 深度学习将继续从扩展越来越大的模型中看到渐近式进展，而基础理论没有显著进步。我不知道这是否会（单独）伴随着 2022 年范式转变级别的科学突破，但让我们希望如此！ |
| 因果推断 | 在受控因果框架之外研究现实世界中的因果关系将继续具有挑战性并充满陷阱。 ML 是否以及如何学习和发现因果关系仍然不明显。我认为这是一个本质上很难解决的问题，无论是理论上还是实践上都不会很快解决。 |
| 联邦学习 | 联合学习将继续成熟并在智能手机设备（由 Apple 领导）上找到进一步的用途，这得益于设备上 AI 芯片组的进步。我预计到 2022 年，随着联合学习在智能手机上的效用赶上现有理论的潜力，将会有渐进式的进步。这最终可能会因监管压力或消费者对数据隐私的担忧而加速，尽管我预计这些不会成为 2022 年的巨大推动力。 |
| 强化学习 | 乐观地说：到 2022 年，DeepMind 将在将深度强化学习应用于现实世界问题方面取得显着进步，这将使强化学习进入右上象限。模仿学习将成为训练强化学习模型越来越普遍的起点。 |
| 图神经网络 | 我认为 GNN 在建模图表示（例如分子和其他自然图结构数据）方面将比节点表示更成功。在 2022 年，我认为我们会看到更多图神经网络的例子，其在与化学结构相关的问题上的表现优于替代方法。我预测在理解和实用性方面都会有适度的进步，但仅限于狭窄的领域（其他深度学习方法将证明对大多数任务都有优势）。 |
| 直观可解释的机器学习 | 2022 年，现有的可解释机器学习技术将在行业内得到更广泛的采用。 SHAP 将把自己确立为事实上的起点（如果还没有的话）。神经网络仍然难以理解。随着标准化最佳实践的出现，大部分进展将沿着效用轴进行。 |
| 量子机器学习 | 在量子计算实现技术飞跃之前，量子机器学习不会取得进展，这在 2022 年不会发生。预计不会有任何进展。 |
| 通用人工智能 | 我们不要得意忘形... | --&gt;

&lt;p&gt;  然而，比个别领域将如何发展更重要的观察是经验主义的总体趋势，以及越来越愿意承认全面的理论理解。&lt;/p&gt;

&lt;p&gt;  从历史上看，理论（假设）先出现，然后再制定想法。深度学习引领了一个新的科学过程，颠覆了这一点。在人们关注理论之前，方法有望展示最先进的性能。实证结果为王，理论是可选的。&lt;/p&gt;

&lt;p&gt;  这导致了机器学习研究中系统的广泛博弈，通过简单地修改现有方法并依靠随机性来超越基线，而不是有意义地推进该领域的理论，从而获得最新成果。但也许这就是我们为新一波机器学习的繁荣所付出的代价。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/FHXFkf.png&quot; alt=&quot;深度学习的潜在进展 Possible development of Deep Learning&quot; /&gt;
&lt;strong&gt;&lt;center&gt;图3. 2022 年深度学习三种潜在的进展。&lt;/center&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  2022 年可能被证明是“深度学习是否不可逆转地采用这种以结果为导向的新过程并将理论理解降级为可选”的转折点。这些是我们应该思考的问题（图 3）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;理论突破能否让我们的理解赶上实用性，并将深度学习转变为像传统机器学习一样更有条理的学科？&lt;/li&gt;
  &lt;li&gt;现有的深度学习文献是否足以让效用无限增长，仅仅通过扩展越来越大的模型？&lt;/li&gt;
  &lt;li&gt;或者，一个经验性的突破会带领我们进一步深入兔子洞，进入一种增强效用的新范式，尽管我们对这种范式理解得更少？&lt;/li&gt;
  &lt;li&gt;这些路线中的任何一条都会导致通用人工智能吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  只有时间会给出答案。&lt;/p&gt;

&lt;h2 id=&quot;笔者感想&quot;&gt;笔者感想&lt;/h2&gt;

&lt;p&gt;  这篇文章从实用性和理解力两个角度描述了机器学习中的各个分支，并对它们进行了宏观上的把握，还给出了一些未来可能的进展预测，内容十分丰富精彩。诚如原文作者所言，计算机硬件 GPU 和智能设备 AI 芯片的进步给深度学习带来了一种新的前进思路，即先实现高效用再慢慢提升理论理解。可能对于某些只要求结果的领域，比如人脸识别、游戏、自然语言处理等，这种思路完全没有什么问题。但是对于一些基础领域，比如物理化学、生物、材料等，并不能一味地只追求结果，还是需要在理论理解上稳扎稳打，才能完善和推动基础学科领域的发展。&lt;/p&gt;

&lt;p&gt;  另外对文中有些内容个人存在不同的看法。&lt;/p&gt;

&lt;h3 id=&quot;联邦学习的适用和研究领域&quot;&gt;联邦学习的适用和研究领域&lt;/h3&gt;

&lt;p&gt;  联邦学习的本质是保护隐私，即在不能完全窥探数据全貌的情况下进行多数据源的交叉融合学习。联邦学习可以在分布式的智能设备上独立运行并汇集数据，也可以在不同的分布式服务器集群间汇集数据。这在银行的机器学习实践中应用较多，香港科技大学的杨强教授（微众银行首席人工智能官）就曾主持过很多这类的研究。&lt;/p&gt;

&lt;h3 id=&quot;可解释性的两个英语单词&quot;&gt;可解释性的两个英语单词&lt;/h3&gt;

&lt;p&gt;  脚注中有原文作者所注的说明，但本人对此持怀疑态度。interpretability 和 explainability 这两个单词从翻译上来看中文意义完全一样，这也导致大家觉得两者没有差别。但是从两个单词的词根来看，interpret 这个解释是指表面上地、直观地解释某样东西，而 explain 这个解释是在有一定的背景知识等前提条件下理论上解释某样东西。简而言之，前者突出解释的直观性，后者更突出解释的前提和逻辑。&lt;/p&gt;

&lt;p&gt;  举个例子，有一个二次函数 \(y=ax^2+bx+c\)。如果给出这个二次函数对应的图，我们就能很容易地看出这个二次函数是否有最大值或者最小值，且具体的最大值或最小值为多少。这种可解释性就是 interpretability。当我们只知道二次函数的数学表达形式时，如果我们知道二次函数的对称轴和最值的固定公式，我们能够通过代入 \(a、b、c\) 的值计算出来结果。这种可解释性就是 explainability。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 版权声明 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于本文是对英文博文的译文，本人对文章内容不享有版权。如有版权争议，可联系撤下本文。&lt;br /&gt;
  As this article is a translation of an English blog post, I do not have the copyright of the content in this article. If there is a copyright dispute, please contact me to withdraw this article.&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;脚注来自原文&quot;&gt;脚注（来自原文）&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;机器学习中的术语“直观可解释性”（interpretability）和“理论可解释性”（explainability）没有统一的定义，许多研究人员互换使用它们。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;例如随机森林算法的出现不会增加对之前的支持向量机算法的理解或实用性，但它确实推进了有监督机器学习的总体领域。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>zhonger</name></author><category term="ac" /><category term="ml" /><category term="机器学习" /><category term="实用性" /><category term="理解力" /><category term="machine learning" /><category term="utility" /><summary type="html">原文标题：Utility vs Understanding: the State of Machine Learning Entering 2022 原文作者：Aidan Cooper</summary></entry></feed>