<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr Li</title>
    <description>个人的一个技术博客站点，主要用于记录个人在学习过程中遇到的技术问题及解决方法、技术实验，以及一些比较有趣的事情。</description>
    <link>https://lisz.me//</link>
    <atom:link href="https://lisz.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 20 Jan 2022 10:27:04 +0900</pubDate>
    <lastBuildDate>Thu, 20 Jan 2022 10:27:04 +0900</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Gitlab 升级那些事儿</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Gitlab 的升级策略似乎已经在 &lt;a href=&quot;../docker/gitlab.html&quot;&gt;私有代码托管平台的搭建与运维&lt;/a&gt; 中解释得比较详细了，但实际上忽略了秘钥文件 /home/git/gitlab/config/secrets.yml 和 /home/git/gitlab/config/gitlab.yml 的备份。这两个文件不是在容器内的代码文件里面吗？为什么又需要备份这两个秘钥文件呢？其实为了安全性的考虑，Gitlab 自带的备份工具只会备份包括数据库、数据文件以及基本配置信息，而秘钥作为安全文件不在备份之列。这两个秘钥文件涉及到数据库中某些加密字段的加密和解密过程，如果没有这两个原始文件或者使用了新的文件，那么 Gitlab 将无法对这些数据库中已有的加密字段进行解密，从而影响到某些页面的使用，尤其是管理员界面。&lt;/p&gt;

&lt;h2 id=&quot;升级及修复&quot;&gt;升级及修复&lt;/h2&gt;

&lt;h3 id=&quot;升级&quot;&gt;升级&lt;/h3&gt;

&lt;p&gt;  本次的升级及修复过程以 14.0.6 -&amp;gt; 14.6.1 为例。根据 Gitlab 官方给出的建议规划路线 latest 14.0.Z -&amp;gt; 14.1.Z -&amp;gt; latest 14.Y.Z 以及 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; 所发布的容器镜像版本，可以判断出实际可行的最短升级路线为 14.0.6 -&amp;gt; 14.1.3 -&amp;gt; 14.6.1（完全逐步迭代升级路线为 14.0.6 -&amp;gt; 14.1.3 -&amp;gt; 14.2.5 -&amp;gt; 14.3.3 -&amp;gt; 14.4.4 -&amp;gt; 14.5.2 -&amp;gt; 14.6.1）。这里值得注意的是，从 14.1.0 的 &lt;a href=&quot;https://docs.gitlab.com/ee/update/#1410&quot;&gt;版本更新说明&lt;/a&gt; 也可以看出，14.1.0 版本是一个重大更新版本，14.0.6 无法跨过 14.1.Z 版本进行更新到其他更新版本。另外，14.2.0 和 14.3.0 版本都对数据库做了微小的调整。具体升级过程可以参照 &lt;a href=&quot;../docker/gitlab.html#边备份边升级&quot;&gt;私有代码托管平台的搭建与运维 - 边备份边升级&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;修复管理员设置-500-错误&quot;&gt;修复管理员设置 500 错误&lt;/h3&gt;

&lt;p&gt;  前面已经提到当两个秘钥文件与加密数据库字段的密钥文件不一致时，加密字段无法被解析，从而导致在管理页面修改任何涉及到加密字段的内容都会弹出 500 错误。官方给出的解决方案是将这些加密字段都置空，加密字段无法置空的记录均删除。&lt;/p&gt;

&lt;h4 id=&quot;验证错误情况&quot;&gt;验证错误情况&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 验证秘钥引发的错误情况&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; git gitlab_gitlab_1 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake gitlab:doctor:secrets

&lt;span class=&quot;c&quot;&gt;# 打印信息&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:06.976367 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : Checking encrypted values in the database&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.207746 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::InstanceVariable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.236285 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::PipelineScheduleVariable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.264758 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::Variable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.289639 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::GroupVariable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.311448 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::PipelineVariable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.330957 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::JobVariable failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.364695 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ApplicationSetting failures: 1&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.457574 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - User failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.483107 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Platforms::Kubernetes failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.504624 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Snippet failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.507763 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - PersonalSnippet failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.510827 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ProjectSnippet failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.534412 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Applications::Helm failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.552858 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Applications::Prometheus failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.572631 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - AlertManagement::HttpIntegration failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.591745 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ProjectImportData failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.612651 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - RemoteMirror failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.634588 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - GrafanaIntegration failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.657573 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - PagesDomainAcmeOrder failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.678924 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - JiraConnectInstallation failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.701446 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - PagesDomain failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.723396 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - WebHook failures: 1&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.728267 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ProjectHook failures: 1&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.732394 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ServiceHook failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.735019 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - SystemHook failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.756876 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Integrations::IssueTrackerData failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.775782 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Integrations::JiraTrackerData failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.797853 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Integrations::ZentaoTrackerData failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.818263 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - BulkImports::Configuration failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.838087 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::KubernetesNamespace failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.859981 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Atlassian::Identity failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.881123 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - IncidentManagement::ProjectIncidentManagementSetting failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.903973 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - ErrorTracking::ProjectErrorTrackingSetting failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.922100 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Alerting::ProjectAlertingSetting failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.941501 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Serverless::DomainCluster failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.944543 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Integrations::Prometheus failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.965724 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Providers::Gcp failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:14.985521 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::Providers::Aws failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.005871 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Packages::Debian::ProjectDistributionKey failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.025454 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Packages::Debian::GroupDistributionKey failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.029060 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Gitlab::BackgroundMigration::BackfillJiraTrackerDeploymentType2::JiraTrackerDataTemp failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.081215 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::Runner failures: 1&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.309755 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Ci::Build failures: 1&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.449126 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Group failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.662949 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Project failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.710390 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - DeployToken failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.740096 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Clusters::AgentToken failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.762011 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : - Operations::FeatureFlagsClient failures: 0&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.762112 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : Total: 5 row(s) affected&lt;/span&gt;
I, &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2022-01-14T12:11:15.762150 &lt;span class=&quot;c&quot;&gt;#207818]  INFO -- : Done!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;连接数据库&quot;&gt;连接数据库&lt;/h4&gt;

&lt;p&gt;  以下为官方给定的在不同版本和安装方式下连接数据库的命令。由于容器 sameersbn/docker-gitlab 采用的是源码安装方式，所以采用最后一种连接方式，所以使用命令如最后所示。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# For Omnibus GitLab 14.1 and earlier:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gitlab-rails dbconsole

&lt;span class=&quot;c&quot;&gt;# For Omnibus GitLab 14.2 and later:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gitlab-rails dbconsole &lt;span class=&quot;nt&quot;&gt;--database&lt;/span&gt; main

&lt;span class=&quot;c&quot;&gt;# For installations from source, GitLab 14.1 and earlier:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails dbconsole &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; production

&lt;span class=&quot;c&quot;&gt;# For installations from source, GitLab 14.2 and later:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails dbconsole &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; production &lt;span class=&quot;nt&quot;&gt;--database&lt;/span&gt; main

&lt;span class=&quot;c&quot;&gt;# 容器 sameersbn/docker-gitlab 连接数据库&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; git gitlab_gitlab_1 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails dbconsole &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; production &lt;span class=&quot;nt&quot;&gt;--database&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查询并重置-cicd-数据&quot;&gt;查询并重置 CI/CD 数据&lt;/h4&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;--  查询所有 CI/CD 记录&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;ci_group_variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;ci_variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 删除所有 CI/CD 记录&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci_group_variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci_variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;清除加密-token&quot;&gt;清除加密 TOKEN&lt;/h4&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- Clear project tokens&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runners_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runners_token_encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Clear group tokens&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespaces&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runners_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runners_token_encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Clear instance tokens&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application_settings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runners_registration_token_encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Clear key used for JWT authentication&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- This may break the $CI_JWT_TOKEN job variable:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- https://gitlab.com/gitlab-org/gitlab/-/issues/325965&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application_settings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_ci_jwt_signing_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Clear runner tokens&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci_runners&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Clear build tokens&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci_builds&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token_encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- truncate web_hooks table&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web_hooks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;重新验证错误&quot;&gt;重新验证错误&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 验证秘钥引发的错误情况&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; git gitlab_gitlab_1 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake gitlab:doctor:secrets

&lt;span class=&quot;c&quot;&gt;# 发现所有错误均为 0 表示修复成功。可以访问管理员设置页面进行验证。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;修复指标和分析-500-错误&quot;&gt;修复指标和分析 500 错误&lt;/h3&gt;

&lt;p&gt;  指标和分析 500 错误是从升级到 14.0.5 版本之后开始出现的，主要是因为在指标和分析中新增了指向 tmpfs 的配置项 prometheus_multiproc_dir。在默认的 sameersbn/docker-gitlab 容器中还未添加这一配置项，从而导致指标和分析页面无法访问。修复方法是，在 docker-compose.yml 中添加该配置项，如下所示。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2.3&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis:6.2.6&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--loglevel warning&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis-data:/data&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sameersbn/postgresql:12-20200524&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./postgresql-data:/var/lib/postgresql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_USER=gitlab&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_PASS=password&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_NAME=gitlabhq_production&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_EXTENSION=pg_trgm,btree_gist&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;gitlab&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sameersbn/gitlab:14.6.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgresql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;22:22&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gitlab-data:/home/git/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;healthcheck&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CMD&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/sbin/healthcheck&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;start_period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG=false&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus_multiproc_dir=/dev/shm&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/raketasks/backup_restore.html#when-the-secrets-file-is-lost&quot;&gt;When the secrets file is lost&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/raketasks/backup_restore.html#storing-configuration-files&quot;&gt;Storing configuration files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/administration/monitoring/prometheus/gitlab_metrics.html#metrics-shared-directory&quot;&gt;Metrics shared directory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_44295157/article/details/119618816&quot;&gt;Gitlab Admin 管理页面提示 500 内部错误(500 Internal error)的解决办法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Shawn_wang_0919/article/details/115895292&quot;&gt;gitlab 迁移之后 runner 报 500 解决方案—-gitlab-secrets.json 忘记备份&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lintian.co/archives/16&quot;&gt;GitLab 备份恢复后 500 错误修复&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab/issues/2387&quot;&gt;metrics and profiling not working after upgrade to 14.0.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 14 Jan 2022 11:13:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/gitlab-upgrade.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/gitlab-upgrade.html</guid>
        
        <category>Nextcloud</category>
        
        <category>Upgrade</category>
        
        <category>Fix</category>
        
        <category>升级</category>
        
        <category>修复</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>Nextcloud 升级那些事儿</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Nextcloud 的升级根据部署方式的不同也会有所差异。比如源码部署的 Nextcloud 的升级，一般是通过在网页端的管理页面点击升级按钮、经过漫长的等待然后完成。由于这种方式的升级要对本地的源代码同时进行升级，因此存在本地环境与升级所需环境不一致而导致升级失败的可能性。当然，一般来说源码升级总是要先看看环境要求是否相同，如果不同则应该先满足环境要求、再进行后续的升级。&lt;/p&gt;

&lt;p&gt;  而对于 Docker 方式部署的 Nextcloud 来说，源代码、数据文件（包括配置文件和网盘文件）、数据库、缓存数据库四者之间既可独立维护，也可搭配使用。这样一来，每次的升级基本上都只需要升级一下源代码的容器镜像即可。数据文件一般是直接本地持久化的，数据库容器镜像一般不太更新，除非是 Nextcloud 进行数据库大版本升级的大更新。至于缓存数据库（比如 Redis），升不升级都不大会影响 Nextcloud 的正常运行，除非是缓存数据库新旧版本的差异导致源代码无法直接使用新版本的缓存数据库。&lt;/p&gt;

&lt;p&gt;  之前笔者也写过两篇关于 Nextcloud 的文章： &lt;a href=&quot;../webmaster/nextcloud.html&quot;&gt;Nextcloud 搭建自己的云盘&lt;/a&gt; 和 &lt;a href=&quot;../docker/nextcloud-docker.html&quot;&gt;Nextcloud 源码部署迁移到容器部署&lt;/a&gt;。其中前一篇中其实也包括正常的 Docker 部署方式的 Nextcloud 升级，那为什么又要重新写一篇专门关于 Nextcloud 升级的文章呢？主要还是因为在实际升级过程中，发现了一些容易出问题的升级方式，而“如何在此基础上进行修复”是一件非常有意思的事情。那么接下来就来看看 Nextcloud 升级过程中到底能遇到哪些问题呢。&lt;/p&gt;

&lt;h2 id=&quot;问题及修复&quot;&gt;问题及修复&lt;/h2&gt;

&lt;h3 id=&quot;问题一跨版本升级&quot;&gt;问题一：跨版本升级&lt;/h3&gt;

&lt;h4 id=&quot;问题描述&quot;&gt;问题描述&lt;/h4&gt;

&lt;p&gt;  所谓跨版本升级就是指跳过某些重要版本更新而直接升级到另一个大版本。之前在 &lt;a href=&quot;../docker/gitlab.html&quot;&gt;私有代码托管平台的搭建与运维&lt;/a&gt; 一文也提到过 Gitlab 的版本升级中不能直接从一个旧版本直接升级到最新版本，Nextcloud 亦然。比如，从 Nextcloud 22.0 版本升级到 Nextcloud 23.0 版本的话，就属于跨版本升级（在它们之间有一个重要版本更新 Nextcloud 22.2）。&lt;/p&gt;

&lt;h4 id=&quot;修复方案&quot;&gt;修复方案&lt;/h4&gt;

&lt;p&gt;  如果你在更新 Nextcloud 时未对版本更新可行性进行检验而直接跨版本更新，那么你将会在 Docker 容器的日志上看到提示无法跨版本更新。此时，由于容器只修改了 www/version.php 文件（如下所示），未对数据库及其他文件进行修改，还是可以修复回来的。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- version.php --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_VersionString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;23.0.0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Edition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;stable&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_VersionCanBeUpgradedFrom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;nextcloud&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;22.2&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;23.0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;owncloud&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;10.5&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2021-11-26T20:54:42+00:00 0619207f13792250aea775a2c3133d41ab625980&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$vendor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nextcloud&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  修复的主要步骤分为以下两步：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;将 version.php 文件修改为以下内容，然后重新使用 nextcloud:22.0 容器启动。&lt;/li&gt;
  &lt;li&gt;启动后会发现一切恢复正常，然后根据 22.0 -&amp;gt; 22.2 -&amp;gt; 23.0 的规划路线进行正常升级即可。一般来说，升级镜像后镜像内部会自动运行更新命令，并在更新完成后自动关闭维护模式。如果镜像内部为自动运行，可以参考下面命令手动完成相关插件更新。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- modified version.php --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 修改为升级前版本号&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_VersionString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;22.0.0.12&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 修改为升级前版本号&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Edition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;stable&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_VersionCanBeUpgradedFrom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;nextcloud&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;22.0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 添加支持从升级前版本号开始升级&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;22.2&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;23.0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;owncloud&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;10.5&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$OC_Build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2021-11-26T20:54:42+00:00 0619207f13792250aea775a2c3133d41ab625980&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$vendor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;nextcloud&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 手动更新镜像内部插件，并在更新后关闭维护模式。&lt;/span&gt;

docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; www-data &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; nextcloud_app_1 php occ maintenance:mode &lt;span class=&quot;nt&quot;&gt;--on&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; www-data &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; nextcloud_app_1 php occ upgrade
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; www-data &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; nextcloud_app_1 php occ maintenance:mode &lt;span class=&quot;nt&quot;&gt;--off&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;问题二数据库索引缺失&quot;&gt;问题二：数据库索引缺失&lt;/h3&gt;

&lt;h4 id=&quot;问题描述-1&quot;&gt;问题描述&lt;/h4&gt;

&lt;p&gt;  在完成新版本更新后，打开管理员的概览界面，有的时候会看到如下报错：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在数据表 “oc_share” 中无法找到索引 “share_with_index”。
在数据表 “oc_share” 中无法找到索引 “parent_index”。
在数据表 “oc_share” 中无法找到索引 “owner_index”。
在数据表 “oc_share” 中无法找到索引 “initiator_index”。
在数据表 “oc_filecache” 中无法找到索引 “fs_mtime”。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修复方案-1&quot;&gt;修复方案&lt;/h4&gt;

&lt;p&gt;  一般我们可以在报错的提示中看到建议执行命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;occ db:add-missing-indices&lt;/code&gt; 来修复丢失的索引。在容器外我们可以采用以下命令执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; www-data &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; nextcloud_app_1 php occ db:add-missing-indices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;问题三数据库类型转换失败&quot;&gt;问题三：数据库类型转换失败&lt;/h3&gt;

&lt;h4 id=&quot;问题描述-2&quot;&gt;问题描述&lt;/h4&gt;

&lt;p&gt;  数据库中的一些列由于进行长整型转换而缺失。由于在较大的数据表重改变列类型会耗费一些时间，因此程序没有自动对其更改。以下为可能提示的列：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;activity.activity_id
activity.object_id
activity_mq.mail_id
filecache.fileid
filecache.storage
filecache.parent
filecache.mimetype
filecache.mimepart
filecache.mtime
filecache.storage_mtime
mimetypes.id
mounts.storage_id
mounts.root_id
mounts.mount_id
storages.numeric_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修复方案-2&quot;&gt;修复方案&lt;/h4&gt;

&lt;p&gt;  这种问题也比较容易修正，一般会提示执行命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;occ db:convert-filecache-bigint&lt;/code&gt; 来修复。在容器外我们可以采用以下命令执行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; www-data &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; nextcloud_app_1 php occ db:convert-filecache-bigint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nicolasbouliane.com/blog/nextcloud-docker-upgrade-error&quot;&gt;How to fix an accidental Nextcloud docker image update&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/robin_cai/article/details/119530743&quot;&gt;Nextcloud 升级后问题解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 13 Jan 2022 11:26:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/nextcloud-upgrade.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/nextcloud-upgrade.html</guid>
        
        <category>Nextcloud</category>
        
        <category>Upgrade</category>
        
        <category>Docker</category>
        
        <category>升级</category>
        
        <category>修复</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>Jekyll 文章侧边索引导航</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前言&quot; id=&quot;markdown-toc-前言&quot;&gt;前言&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jekyll-生成目录的方案&quot; id=&quot;markdown-toc-jekyll-生成目录的方案&quot;&gt;Jekyll 生成目录的方案&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#第一种方案&quot; id=&quot;markdown-toc-第一种方案&quot;&gt;第一种方案&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#第二种方案&quot; id=&quot;markdown-toc-第二种方案&quot;&gt;第二种方案&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#第三种方案&quot; id=&quot;markdown-toc-第三种方案&quot;&gt;第三种方案&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实践&quot; id=&quot;markdown-toc-实践&quot;&gt;实践&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#布局&quot; id=&quot;markdown-toc-布局&quot;&gt;布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#目录生成&quot; id=&quot;markdown-toc-目录生成&quot;&gt;目录生成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#自适应&quot; id=&quot;markdown-toc-自适应&quot;&gt;自适应&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#最终代码&quot; id=&quot;markdown-toc-最终代码&quot;&gt;最终代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Jekyll 与 Hexo 不同之处有很多，其中一处是在文章页面中不支持原生 [TOC] Markdown 语法来自动生成目录。而在 Hexo 中，即使主题不支持侧边悬浮的优化目录导航，也可以通过最简单的方式在文章的开始位置生成目录。虽然这种目录永远固定在文章开始的地方，但是总算是能够通过大小标题来给读者一个大概的思路。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-生成目录的方案&quot;&gt;Jekyll 生成目录的方案&lt;/h3&gt;

&lt;p&gt;  如参考资料 1 中所提到的，如果想要在 Jekyll 中实现文章目录，有三种不同的方案可供选择：&lt;/p&gt;

&lt;h4 id=&quot;第一种方案&quot;&gt;第一种方案&lt;/h4&gt;

&lt;p&gt;  利用完整的标签来生成静态目录，可以看到在本文的开头就是这样的一个实例。这种方法的好处是不需要修改什么复杂的模板或者添加什么样式，Github Pages 也默认支持这种方式。不好的地方是与标准的 Markdown 语法略有不同，而且每次都得在文章内容页面开头加上以下代码。如果你使用带有 markdownlint 插件的编辑器编辑文章时，可能会有一堆告警。当然，如果不想折腾的人，这种方法不失为一种最简单方便的解决方案。&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; TOC
{:toc}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;第二种方案&quot;&gt;第二种方案&lt;/h4&gt;

&lt;p&gt;  利用第三方插件 &lt;a href=&quot;https://github.com/toshimaru/jekyll-toc&quot;&gt;jekyll-toc&lt;/a&gt;。这种方式在实现上比上一种要更加优雅一些，不需要自己修改或编写代码，只需要执行以下步骤即可。缺点在于 Github Pages 不支持这类自定义插件，你可能需要使用自定义的 workflow.yml 文件来指导 Github Action 来编译生成静态文件。如果不怎么了解 Github Action，恐怕这种方式部署在 Github Pages 上也不是很省心。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# gemfile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-toc&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 添加后需执行 bundle install 安装插件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 在全局配置文件中启用 jekyll-toc 插件&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jekyll-toc&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 默认为所有文章启用 toc&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;第三种方案&quot;&gt;第三种方案&lt;/h4&gt;

&lt;p&gt;  采用新增 jekyll 模板的方式来支持自动生成目录。这种方式也可以直接运行在 Github Pages 下。主要的步骤是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;将 &lt;a href=&quot;https://github.com/allejo/jekyll-toc/releases/download/v1.2.0/toc.html&quot;&gt;toc.html&lt;/a&gt; 文件下载到 _includes 目录下；&lt;/li&gt;
  &lt;li&gt;在 _layouts 需要使用 toc 功能的页面模板的 content 前面加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;% include toc.html html=content %&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  从上述三种方案综合来看，第三种方案能够同时支持自动生成目录和 Github Pages，比较适合预期的需求。另外，采用模板的方式还有一个好处，可以在全局配置文件 _config.yml 中一键设置“开启”或“关闭”，配置上比较简单。但如果仅仅照搬上述的第三种方案，还是不能完全满足实际的需求。因为第三种方案的结果是自动生成目录的内容，并不涉及到具体的布局，也就是说只能放在某一个固定的位置。总结的来说，实际的目标起码需要满足以下两点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;目标一&lt;/strong&gt;：目录位于正文右侧（或左侧），且当内容滑动时目录位置固定不变。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;目标二&lt;/strong&gt;：目录在宽屏时自动显示，在窄屏或移动端分辨率不足时自动隐藏。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;布局&quot;&gt;布局&lt;/h3&gt;

&lt;p&gt;  从目标一来看，其实在大部分的静态博客主题中都是有这样的功能的（PS：可能 Jekyll 是个例外，原生只支持静态目录）。我们可以先来看两个例子 &lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot;&gt;hexo-theme-even&lt;/a&gt; 和 &lt;a href=&quot;https://www.markdownguide.org/getting-started/&quot;&gt;markdownguide&lt;/a&gt;。前面的例子是 Hexo 主题，其中采用的是 js 控制 toc 的 div 层在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position: fixed&lt;/code&gt; 之间变换：当页面初始时，处于 absolute 位置；当页面在向下滑动时，处于 fixed 位置。这种方式需要有 js 代码的介入，增加了运算的成本（虽然其实很小）和维护成本（占比更大）。后面的例子是采用了 Bootstrap 框架中的 toc js 插件，能够满足目标一，且能跟踪内容位置来切换显示的二级目录，相对来说功能更加强大。唯一的缺点是，拖着 Bootstrap 这个大拖油瓶，如果本身的主题是基于 Bootstrap 框架的，那么就非常合适了。&lt;/p&gt;

&lt;p&gt;  这里我们想要实践的是在未使用 Bootstrap 框架的 Jekyll 主题中增加目标一的功能，因此这两个例子的做法都不是很合适。实际上，从需要维护的代码量来说，第一个例子的做法所需的 js 代码应该是算少的，但是不是存在完全不使用 js 代码也能实现这样的功能的方案呢？实际上是存在的。据我们所知，现在已有的页面布局的方法大致有三种：&lt;strong&gt;Table 布局&lt;/strong&gt;、&lt;strong&gt;Div 布局&lt;/strong&gt;和 &lt;strong&gt;Flex 布局&lt;/strong&gt;。Table 布局算是最原始的布局方式了，主要利用 Table 的横列来组织页面中的各个元素的位置，特点是容易上手且不易出问题。缺点也比较明显，不大符合语义化 HTML 的规范，即 HTML 标签只做与它含义相同的事情。Table 标签作为表格布局标签，应该专注于展示表格数据，而非为整个页面布局操心。于是，Div 布局开始流行起来。Div 层的概念和布局的含义完全吻合，也容易理解。Div 布局比较让人头疼的地方是，页面中有很多浮动元素出现时，可能会出现各种各样想象不到的问题，某些布局之后被迫要清除浮动。Flex 布局的出现为 Div 布局提出了改善，使得页面布局不再被浮动元素和 Div 层浮动时内容大小为零所困恼。&lt;/p&gt;

&lt;p&gt;  由于想要目录内容块随着内容滑动而改变 position，我们可以采用 sticky 的 position 方案。这可能是 css 的一大进步，通过定义 sticky 的 position 可以让元素根据相邻元素的滑动而改变 position。其实，sticky 就等于 absolute 加上 fixed。只是这种等价只在某些条件成立时才能生效。我们可以通过参考资料 2~4 来了解更多详情。&lt;/p&gt;

&lt;h3 id=&quot;目录生成&quot;&gt;目录生成&lt;/h3&gt;

&lt;p&gt;  目录生成这里直接采用的是上述的第三种方案。具体在 post 模板页使用 toc 模块的代码如最后所示。&lt;/p&gt;

&lt;h3 id=&quot;自适应&quot;&gt;自适应&lt;/h3&gt;

&lt;p&gt;  为了实现目标二，这里采用了最简单的 CSS 媒体查询，即在平常 PC 端宽屏时采用如下 common.sass 中的样式。显示目录时，正文内容宽度为 720 px，目录宽度为 280 px。同时为了将目录与正文拉大间距以及更好区分，这里增加了 margin-left （30 px）、border-left（2px）和 padding（10px）。总计为，720+280+30+10*2=1050 px（这里忽略了 2px 的边界）。不显示目录时，让正文占据所有宽度，并设置目录块为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display: none&lt;/code&gt;，即隐藏该元素。具体实现如最终代码 common.sass 和 layout.sass 所示。在没有 sass 编译环境下，此处的 sass 代码可以取出转换为 css 使用。&lt;/p&gt;

&lt;h3 id=&quot;最终代码&quot;&gt;最终代码&lt;/h3&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- post.html --&amp;gt;

&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;div class=&quot;container&quot;&amp;gt;  
    &amp;lt;div class=&quot;contents&quot;&amp;gt;
      &amp;lt;article class=&quot;markdown-body&quot;&amp;gt;
        &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/div&amp;gt;   
    &amp;lt;div class=&quot;table-of-contents&quot;&amp;gt;
      &amp;lt;h2&amp;gt;Contents&amp;lt;/h2&amp;gt;
      &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;toc.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;article class=&quot;markdown-body&quot;&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &amp;lt;/article&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sass highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.sass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1050px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;720px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.table-of-contents&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;border-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#efefef&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;280px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webkit-sticky&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sticky&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fit-content&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fantasy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#e32e00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#005b81&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#005b81&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#e32e00&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;underline&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sass highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.sass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1050px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.post-content&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;.contents&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;.table-of-contents&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://plutotree.me/jekyll/2019/01/30/jekyll-toc-solution.html&quot;&gt;jekyll自动生成目录的几种方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.runoob.com/css/css-positioning.html&quot;&gt;Runoob - CSS Position 定位&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000039858711&quot;&gt;position:sticky 粘性定位的几种巧妙应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.php.cn/css-tutorial-466057.html&quot;&gt;css3 sticky不生效怎么办&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 09 Jan 2022 22:00:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/jekyll-toc.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/jekyll-toc.html</guid>
        
        <category>Jekyll</category>
        
        <category>主题</category>
        
        <category>theme</category>
        
        <category>侧边索引</category>
        
        <category>TOC</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>[译文]迭代机器学习：迈向模型准确性的一步</title>
        <description>&lt;p&gt;&lt;strong&gt;原文标题&lt;/strong&gt;：&lt;a href=&quot;https://hub.packtpub.com/iterative-machine-learning-step-towards-model-accuracy/&quot;&gt;Iterative Machine Learning: A step towards Model Accuracy&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;原文作者&lt;/strong&gt;：Amarabha Benerjee&lt;/p&gt;

&lt;p&gt;  通过死记硬背来学习一些东西，比如重复多次，通过一遍又一遍地练习来完善一项技能，或者通过逐步对原型进行细微调整来构建某些东西，这些都是我们人类自然而然发生的事情。机器也可以学习这种方式，这被称为“迭代机器学习”。在大多数情况下，迭代是一种有效的学习方法，有助于更快、更准确地达到预期的最终结果，而不会成为资源紧缩的噩梦。&lt;/p&gt;

&lt;p&gt;  现在，你可能会想，迭代本身不就是任何机器学习的一部分吗？换句话说，从基础的回归分析、决策树、贝叶斯网络到高级的神经网络和深度学习算法，现代机器学习技术都内置了一些固有的迭代组件。那么，将迭代学习作为一个独立的主题来讨论的必要性是什么呢？这仅仅是因为将迭代外部引入到算法可以最大限度地减少误差范围，从而有助于准确建模。&lt;/p&gt;

&lt;h2 id=&quot;迭代学习是如何工作的&quot;&gt;迭代学习是如何工作的&lt;/h2&gt;

&lt;p&gt;  让我们仔细观察机器学习算法中单个迭代流期间发生的情况来了解迭代的原理。&lt;/p&gt;

&lt;p&gt;  首先将预处理的训练数据集引入到模型中。在对给定的数据进行处理和构建模型后，对模型进行测试，然后将结果与所期待的输出进行匹配。然后将反馈返回给系统，以便算法那进一步学习和微调其结果。这清楚地表明，这里发生了两个迭代过程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数据迭代——算法固有的&lt;/li&gt;
  &lt;li&gt;模型训练迭代——外部引入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/mYccJd.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  现在，如果我们没有将结果反馈到系统中，比如说不允许算法迭代学习，而是采用顺序方法，情况会变成怎么呢？算法是否有效，能否提供正确的结果呢？&lt;/p&gt;

&lt;p&gt;  是的，算法肯定会起作用。但是，它产生的结果的质量将会因为许多因素而有很大的差异。训练数据集的质量和数量、所采用的特征定义和特征抽取技术、算法本身的鲁棒性等都是许多因素之一。即使上述所有工作都做得完美，仍然不能保证顺序方法产生的结果将非常准确。简而言之，结果既不准确，也不可重复。因此，迭代学习允许算法提高模型准确性。&lt;/p&gt;

&lt;p&gt;  某些算法在设计中具有迭代核心，可以根据数据量的多少进行缩放。这些算法处于机器学习实现的最前沿，因为它们能够更快更好地执行。在接下来的部分，我们将讨论来自三种主要机器学习方法的不同算法类别的迭代——&lt;strong&gt;有监督机器学习&lt;/strong&gt;、&lt;strong&gt;无监督机器学习&lt;/strong&gt;和&lt;strong&gt;强化学习&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;提升算法有监督机器学习中的迭代&quot;&gt;提升算法：有监督机器学习中的迭代&lt;/h2&gt;

&lt;p&gt;  提升算法本质上是迭代的，是通过最小化错误来改善结果的最佳方式。它们主要旨在减少结果中的偏差，并将一组特定的弱学习分类器算法转换为强学习器，从而使它们能够减少错误。以下是一些示例：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AdaBoost（Adaptive Boosting）&lt;/li&gt;
  &lt;li&gt;梯度提升树（Gradient Tree Boosting）&lt;/li&gt;
  &lt;li&gt;XGBoost&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;它们是如何工作的&quot;&gt;它们是如何工作的&lt;/h3&gt;

&lt;p&gt;  所有的提升算法都有一个通用的分类器，这些分类器经过迭代修改以达到想要的结果。让我们以“在某篇文章中找抄袭案例”为例。这里的第一个分类器是找到一组单词，这些单词出现在其他地方或者另一篇文章中，这将导致一个红色信号。如果我们创建 10 个单独的单词组，并将它们称为分类器 1 到 10，那么我们将根据这些分类器检查我们的文章，并且任何可能的匹配都将会标记为红色。但是，这 10 个分类器没有任何红色信号并不意味着一个肯定的 100% 原创文章。因此，我们需要更新分类器，创建可能基于第一次通过的更短的组，从而提高分类器发现这篇文章与其他文章的相似性的准确性。Boosting 算法中的这个迭代过程最终使我们获得了相当高的准确率。原因是在每次迭代之后，分类器都会根据其性能进行更新。与其他内容非常相似的内容将进行更新和调整，以便我们可以获得更好的匹配。这种本质上改进算法的过程被称为提升，目前是有监督机器学习中最流行的方法之一。&lt;/p&gt;

&lt;h3 id=&quot;优缺点&quot;&gt;优缺点&lt;/h3&gt;

&lt;p&gt;  这种方法的明显优点是，它允许在最终模型中出现最小的错误，因为迭代模型能够在每次出现错误时自行纠正。缺点是处理时间较长，并且大量迭代对总体内存的要求较高。另一个重要方面是，反馈给训练模型的错误是在外部完成的，这意味着监督者可以控制模型及其修改方式。这反过来又有一个缺点，即模型无法学会自行消除错误。因此，该模型不能用于另一组数据。换句话说，模型不会自己学习如何变得无差错，因此不能移植到另一个数据集上，因为它需要从头开始学习过程。&lt;/p&gt;

&lt;h2 id=&quot;人工神经网络无监督机器学习中的迭代&quot;&gt;人工神经网络：无监督机器学习中的迭代&lt;/h2&gt;

&lt;p&gt;  神经网络已经成为无监督机器学习的典型代表，因为它们在预测数据模型方面的准确性。一些众所周知的神经网络有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;卷积神经网络（Convolutional Neural Networks，CNNs）&lt;/li&gt;
  &lt;li&gt;玻尔兹曼机（Boltzman Machines，BMs）&lt;/li&gt;
  &lt;li&gt;循环神经网络（Recurrent Neural Networks，RNNs）&lt;/li&gt;
  &lt;li&gt;深度神经网络（Deep Neural Networks，DNNs）&lt;/li&gt;
  &lt;li&gt;记忆网络（Memory Networks，MNs）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;它们是如何工作的-1&quot;&gt;它们是如何工作的&lt;/h3&gt;

&lt;p&gt;  人工神经网络在模拟数据模型方面非常准确，主要是因为它们的迭代学习过程。但这个过程与我们之前探索的 Boosting 算法的过程不同。在这里，这个过程是无缝和自然的，在某种程度上，它为人工智能系统中的强化学习铺平了道路。&lt;/p&gt;

&lt;p&gt;  神经网络由模拟人脑工作方式的电子网络组成。每个网络都有一个输入和输出节点，以及由算法组成的中间隐藏层。输入节点被赋予初始数据集以执行一系列的操作，并且每次迭代都会创建一个数据字符串输出作为结果。然后，这个输出与实际结果数据集进行匹配，并将错误反馈给输入节点。这样一来，这个错误使得算法能够自行纠正，并越来越接近实际数据集。这个过程称为训练神经网络，每次迭代都会提高准确性。与 Boosting 算法执行迭代的方式相比，执行的迭代之间的关键区别在于，这里我们不必手动更新分类器，算法会根据错误反馈自行更改。&lt;/p&gt;

&lt;h3 id=&quot;优缺点-1&quot;&gt;优缺点&lt;/h3&gt;

&lt;p&gt;  这个过程的主要优点是它可以达到的准确度。该模型也是可重用的，因为它学习了实现准确性的方法，而不仅仅是为你提供直接的结果。这种方法的另一面是，模型可能会严重出错，并完全偏离不同的方向。这是因为归纳迭代有自己的过程，不需要人工监督。“Facebook 聊天机器人偏离了他们最初的目标，并用自己的语言在他们内部进行交流”就是一个很好的例子。但俗话说，聪明的东西有其自身的问题。如果我们想要创建更准确的模型和更智能的系统，我们必须准备好应对这一风险。&lt;/p&gt;

&lt;h2 id=&quot;强化学习&quot;&gt;强化学习&lt;/h2&gt;

&lt;p&gt;  强化学习是机器学习的一个有趣的案例，其中简单的神经网络被连接起来，它们与环境相互作用，从错误和奖励中学习。这里介绍的迭代以复杂的形式发生。迭代以奖励或惩罚的形式发生，分别对应得出正确或错误的结果。在每次这种交互之后，多层神经网络都会合并反馈，然后重新创建模型以提高准确性。典型的奖励和惩罚方法在某种程度上将其置于一个即不是受监督也不是不受监督的空间，但表现出两者的特征，并且还具有产生更准确结果的额外优势。这里的缺点是模型在设计上很复杂。多层神经网络在多次迭代的情况下很难处理，因为每一层可能对某种奖励或惩罚做出不同的反应。因此，它可能产生内部冲突，这些冲突可能导致系统停滞不前——无法决定下一步向哪个方向发展。&lt;/p&gt;

&lt;h2 id=&quot;迭代的一些实际实现&quot;&gt;迭代的一些实际实现&lt;/h2&gt;

&lt;p&gt;  许多现代机器学习平台和框架已经实现了自己的迭代过程，从而创建更好的数据模型，Apache Spark 和 MapReduce 就是两个这样的例子。两者实现迭代的方式在技术上是不同的，它们有其优点和局限性。&lt;/p&gt;

&lt;p&gt;  让我们来看看 MapReduce。它直接在磁盘上存在的 HDFS 文件系统上读取和写入数据。请注意，从磁盘读取和写入的每个迭代都需要大量的时间。这在某种程度上创建了一个更健壮和容错的系统，但在速度上妥协了。另一方面，Apache Spark 将数据存储在内存（弹性分布式数据集），比如 RAM 中。因此，每次迭代花费的时间要少得多，这使得 Spark 能够执行闪电般的快速数据处理。但是，Spark 执行迭代方式的主要问题是，动态内存或者 RAM 在存储迭代数据和执行复杂操作方面的可靠性远低于磁盘存储。因此，它的容错能力远低于 MapReduce。&lt;/p&gt;

&lt;h2 id=&quot;将其整合在一起&quot;&gt;将其整合在一起&lt;/h2&gt;

&lt;p&gt;  为了总结讨论，我们可以大致如下来看一下迭代过程及其实现机器学习模型的阶段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/4XY4X4.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;参数迭代&lt;/strong&gt;：这是任何算法迭代的第一个也是固有的阶段。算法涉及到的参数运行多次，并在此过程中最终确定模型的最佳拟合参数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据迭代&lt;/strong&gt;：一旦模型参数最终确定之后，将数据放入系统并模拟模型。将多组数据放入系统中，以检查参数在产生想要的结果方面的有效性。因此，如果数据迭代阶段表明某些参数不适合模型，则将它们带回参数迭代阶段，并添加或修改参数。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;模型迭代&lt;/strong&gt;：在初始参数和数据集最终确定后，进行模型测试/训练。模型测试阶段的迭代是关于使用相同的参数和数据集多次运行相同的模型模拟，然后检查错误量，如果错误在每次迭代中都有很大变化，则数据或参数或两者都有问题。对数据和参数进行迭代，直到模型达到准确性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人工迭代&lt;/strong&gt;：此步骤涉及到人工归纳的迭代，其中将不同的模型放在一起以创建功能齐全的智能系统。在这里，多层次的拟合和再拟合恰好可以实现一个连贯的总体目标，比如创建无人驾驶汽车系统或功能完全的人工智能（AI）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;  迭代对于在不久的将来创建更智能的 AI 系统至关重要。对复杂数据集执行多次迭代的巨大内存需求继续带来重大挑战。但随着人工智能芯片、存储设备和数据传输技术的日益完善，这些挑战变得越来越容易应对。&lt;/p&gt;

&lt;p&gt;  我们相信，迭代机器学习技术将在不久的将来继续引领人工智能领域的转型。&lt;/p&gt;

&lt;h2 id=&quot;版权声明&quot;&gt;版权声明&lt;/h2&gt;

&lt;p&gt;  由于本文是对英文博文的译文，本人对文章内容不享有版权。如有版权争议，可联系撤下本文。&lt;/p&gt;

&lt;p&gt;  As this article is a translation of an English blog post, I do not have the copyright of the content in this article. If there is a copyright dispute, please contact me to withdraw this article.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jan 2022 20:30:00 +0900</pubDate>
        <link>https://lisz.me/ac/ml/iterative-learning.html</link>
        <guid isPermaLink="true">https://lisz.me/ac/ml/iterative-learning.html</guid>
        
        <category>迭代学习</category>
        
        <category>机器学习</category>
        
        <category>iterative learning</category>
        
        <category>machine learning</category>
        
        
        <category>ac</category>
        
        <category>ml</category>
        
      </item>
    
      <item>
        <title>H2O-ac theme for Jekyll</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  正如大家所知，Jekyll 是一款高可定制的、非常流行的静态博客生成工具。围绕着 Jekyll 也衍生出了很多优秀的 Jekyll 主题， 由 &lt;a href=&quot;https://github.com/kaeyleo&quot;&gt;廖柯宇&lt;/a&gt; 开发的 &lt;a href=&quot;https://github.com/kaeyleo/jekyll-theme-H2O&quot;&gt;H2O&lt;/a&gt; 主题就是其中之一。极简主义、风格扁平化、卡片式布局、Medium 及知乎专栏的视觉风格等等特点，为我们带来了或许是迄今为止最漂亮的 Jekyll 主题。&lt;/p&gt;

&lt;p&gt;  诞生之初，H2O 主题就在 Github 平台上以 MIT 许可证协议开放了源代码。这吸引了很多小伙伴纷纷转投 Jekyll 和 H2O 主题的阵营，本人也是其中之一。随着使用者越来越多，不少的小伙伴在使用过程中发现了一些小问题并主动修复，最后贡献到了 H2O 的主项目，这让 H2O 主题变得更好。本人在使用过程中也的确是发现了一些与自己实际需求不大一致的地方，并且在原 H2O 主题的基础上做了一些改动。考虑到这些改动可能并不是大多数人的需求，直接向原 H2O 主题提交 pull 请求合并的必要性不大，因此决定将原项目 fork 并改名为 &lt;a href=&quot;https://github.com/zhonger/jekyll-theme-H2O-ac&quot;&gt;zhonger/jekyll-theme-H2O-ac&lt;/a&gt;。现正式将源代码以与 H2O 主题相同的 MIT 许可证协议在 Github 平台上公开。&lt;/p&gt;

&lt;p&gt;  在此，非常感谢廖柯宇及其他小伙伴对于 H2O-ac 主题的基础主题 H2O 的代码开发和开放共享。&lt;/p&gt;

&lt;h2 id=&quot;新特性&quot;&gt;新特性&lt;/h2&gt;

&lt;h3 id=&quot;更适合学术人和运维程序员的页面结构&quot;&gt;更适合学术人和运维程序员的页面结构&lt;/h3&gt;

&lt;p&gt;  H2O 主题其实在很大程度上已经满足了大部分人的需求，只是对于学术研究人员和运维程序员来说，个人觉得页面结构还是有点不够合适。学术研究人员比较重视在首页直接展示个人信息和研究情况，能够让人很快地了解到所需的信息，这其实是将 About me 这样一个平常的辅助页面当成了主页面来用。另外，运维程序员比较重视能一览所有文章的标题以迅速找到感兴趣的文章。虽然搜索功能、标签页、卡片展示页都能够列出所有的文章，但个人觉得还是不够简洁、方便。而像 Hexo 静态生成工具自带的 Archive 归档页面比较能满足这样的需求。除此之外，整个博客的系统日志变迁记录对于运维程序员来说也非常重要，毕竟如果通过发布一篇文章来描述变迁过程并不适合联系起来完整了解。如果有系统日志页，就可以按照年份、月份、事件的先后进行简要的描述，并且一览无遗。&lt;/p&gt;

&lt;p&gt;  因此，在 H2O-ac 主题中，从原来 H2O 的主页中抽出框架做成了页面模板。根据实际页面的内容需求，增加了&lt;strong&gt;学术首页&lt;/strong&gt;、&lt;strong&gt;归档页&lt;/strong&gt;和&lt;strong&gt;系统日志页&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;学术首页&quot;&gt;学术首页&lt;/h4&gt;

&lt;p&gt;  学术首页如下图所示，并将原来 H2O 中的卡片首页移动到 blog 子目录下了。如果读者想要看到文章卡片展示页，还是可以点击顶部的导航栏中的 BLOG 直接访问。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/pICzcE.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;归档页&quot;&gt;归档页&lt;/h4&gt;

&lt;p&gt;  归档页设置为由 Jekyll 按照模板自动生成，以年份、日期、文章标题分级列表展示，简洁清晰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/25IZzc.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;系统日志页&quot;&gt;系统日志页&lt;/h4&gt;

&lt;p&gt;  系统日志页其实也不是经常更新的，只有在博客整体作出设置或改进的才加以说明。另外，也可以将一些固定的站点信息放置在系统日志页，比如站点的多点部署信息，读者可以根据此信息访问最快、最合适的节点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/tUCNEb.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用体验提升&quot;&gt;使用体验提升&lt;/h3&gt;

&lt;p&gt;  廖柯宇也在 H2O 主题的默认页面中写道，目前 H2O 主题还有一些可优化的内容，比如夜间模式、查看大图等。这里，根据个人的一些实际需求和了解，在 H2O-ac 主题中做了调整。&lt;/p&gt;

&lt;h4 id=&quot;社交图标扩展&quot;&gt;社交图标扩展&lt;/h4&gt;

&lt;p&gt;  H2O 原有的社交图标其实已经比较广泛，只是还有些领域局限性，比如学术研究人员可能更希望展示谷歌学术、ResearchGate、ORCID 等社交图标及链接，而运维开发人员可能更希望展示 SegmentFault、CSDN、博客园等社交图标及链接。这里在 H2O 提供的社交图标类型基础上做了这些平台图标的扩充，同时尝试了 Symbol 引用的方式来实现社交图标鼠标悬停的效果，从而简化代码（H2O 采用的是字体图标的方式，需要为每一个社交图标定义不同的主题色）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/ebCeqM.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;查看大图&quot;&gt;查看大图&lt;/h4&gt;

&lt;p&gt;  查看大图功能的确对于读者的阅读体验来说有很大的提升。就像我们阅读文献一样，可能首先会只看文章附图来大致掌握文章的核心点。博文的查看大图功能也可能有这样的异曲同工之妙。这里是采用的 &lt;a href=&quot;https://fancyapps.com/docs/ui/fancybox&quot;&gt;Fancybox&lt;/a&gt; 插件实现的。H2O-ac 主题中只使用了最简单的配置，用户可以根据需求查看文档做出更多的修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/FNRDTv.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;代码高亮优化&quot;&gt;代码高亮优化&lt;/h4&gt;

&lt;p&gt;  本人使用 H2O 主题的时候代码高亮功能还是沿用的 Jekyll 自带的，后来 H2O 主题也开始采用了 &lt;a href=&quot;https://prismjs.com/&quot;&gt;Prism.js&lt;/a&gt;。不过由于使用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OKAIDIA&lt;/code&gt; 高亮主题，所以有些段落中的格式化字段显示上有些问题。这里，仍然采用默认主题，并且扩增到 Prism.js 支持的所有编程语言类型。效果可以从前一句的 OKAIDIA 字段和下面即将出现的代码片段看出。&lt;/p&gt;

&lt;h4 id=&quot;字数统计及阅读时间估计&quot;&gt;字数统计及阅读时间估计&lt;/h4&gt;

&lt;p&gt;  字数统计及阅读时间估计这个小功能其实以前在用 WordPress 的时候比较常见。虽然说统计和估计的结果不一定完全准确，但是还是起到了一定的辅助阅读的作用。效果可以查看本页标题下的基本信息区域。&lt;/p&gt;

&lt;h4 id=&quot;文章侧边索引导航&quot;&gt;文章侧边索引导航&lt;/h4&gt;

&lt;p&gt;(2022年1月9日更新)&lt;/p&gt;

&lt;p&gt;  在一些基于 Bootstrap 前端框架的 Jekyll 主题中，这个功能比较常见。由于本主题未使用 Bootstrap 前端框架，所以添加起来稍微有些麻烦，现已增加此功能。在浏览器窗口超过 1050 px 的情况下，在文章页面可以正常看到右侧的文章侧边索引导航。当窗口滑动时，侧边索引导航也会跟着滑动。在浏览器窗口不足 1050 px 的情况下，侧边索引导航自动隐藏。在 _config.yml 配置文件中，可以通过设置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toc: false&lt;/code&gt; 来全局禁用此功能。&lt;/p&gt;

&lt;h4 id=&quot;配置项&quot;&gt;配置项&lt;/h4&gt;

&lt;p&gt;  配置项中新增了&lt;strong&gt;友情链接&lt;/strong&gt;、&lt;strong&gt;备案号&lt;/strong&gt;、&lt;strong&gt;Google Analytics&lt;/strong&gt; 和 &lt;strong&gt;CNZZ&lt;/strong&gt; 统计功能，可以直接在 _config.yml 文件的对应配置项下设置即可，如下所示。友情链接主要是方便跟其他博主交换友链，备案号主要是为了方便部署在国内需备案的 vps 或虚拟主机上。此处，二者都可以置空。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Links 友情链接&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Mr&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Li&apos;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://lisz.me&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Beian 备案号&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;beian&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;沪ICP备xxxxxxxx号&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# CNZZ 统计代码&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cnzz&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Google Analytics&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;google_analytics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;前端自动构建工作流优化&quot;&gt;前端自动构建工作流优化&lt;/h4&gt;

&lt;p&gt;  H2O 主题中使用了 Gulp + Node-Sass 的方案来自动化前端构建工作流。不得不说，这个方案还是很不错的，只是随着 Gulp 和 Node-Sass 版本的更新，对 NodeJS 环境及其他依赖库都有一些要求。这里，H2O-ac 主题在 package.json 文件中将所有库都更新到目前最新，对应版本列表如下所示。另外，为了减少一些第三方 CSS 样式的请求数，利用自动构建工作流将固定的第三方 CSS 样式文件合并并压缩为 plugins.min.css 文件。app.min.css 仍为多个自编写 CSS 样式文件的合并压缩。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;运行环境或依赖库&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;版本号&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NodeJS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v17.0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v4.0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp-clean-css&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v4.3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp-rename&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v20.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp-sass&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v5.0.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp-uglify&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v3.0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gulp-concat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v2.6.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;node-sass&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;v7.0.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;h3 id=&quot;初始化&quot;&gt;初始化&lt;/h3&gt;

&lt;h4 id=&quot;方式一从模板新建博客&quot;&gt;方式一：从模板新建博客&lt;/h4&gt;

&lt;p&gt;  为了方便用户使用 H2O-ac 主题，特别提供了 Github 的模板功能。如下图所示，访问 &lt;a href=&quot;https://github.com/zhonger/jekyll-theme-H2O-ac&quot;&gt;H2O-ac&lt;/a&gt; 可以看到如下的 Use this template 按钮，点击该按钮即可用 H2O-ac 主题创建自己的博客代码仓库。想要了解更多步骤，可以访问 Github 官方文档之 &lt;a href=&quot;https://docs.github.com/cn/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template&quot;&gt;从模板创建仓库&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/y7lv2Q.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;方式二已有博客迁移&quot;&gt;方式二：已有博客迁移&lt;/h4&gt;

&lt;p&gt;  &lt;del&gt;暂时无法支持 gem 直接切换主题，后续将更新此方式。目前只能使用方式一创建仓库后，将文章的 markdown 文件复制到 _posts 目录下应用 H2O-ac 主题。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;(2021年12月26日更新)&lt;/p&gt;

&lt;p&gt;  现已支持使用 gem 直接切换主题 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-theme-h2o-ac&lt;/code&gt;。同时，也推出了一键式构建工具 &lt;a href=&quot;https://github.com/zhonger/easy-to-h2o-ac&quot;&gt;easy-to-h2o-ac&lt;/a&gt;，详细可以见项目主页。&lt;/p&gt;

&lt;h3 id=&quot;本地测试&quot;&gt;本地测试&lt;/h3&gt;

&lt;p&gt;  在进行本地测试时，如果需要修改一些样式，则需要先执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 来完成前端自动构建工作流依赖库的安装。注意，这里设定的可用 NodeJS 版本为 v17.0.0，使用老版本会报错。其次，务必使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 安装主题所需的所有 Ruby 依赖库。最后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --livereload&lt;/code&gt; 命令即可在本地实时同步预览。只要不修改 _config.yml 文件，不必中断后再启动。然后就是在 _posts 目录下写 markdown 文章即可。&lt;/p&gt;

&lt;h3 id=&quot;发布部署&quot;&gt;发布部署&lt;/h3&gt;

&lt;p&gt;  由于 Github 提供 Jekyll 静态生成器的静态页面托管，只要打开仓库的 Pages 功能，当推送更新到 Github 时即会自动部署。此处值得注意的是，如果代码仓库的名字不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;，而也没有为该仓库的 Pages 提供自定义域名，那么这个仓库将会被部署到子目录，因此此时必须在 _config.yml 文件中设置 base_url，从而生成正常的静态页面。&lt;/p&gt;

&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;

&lt;p&gt;  再次感谢廖柯宇及其他小伙伴们对 H2O 主题的付出，没有 H2O 主题就没有 H2O-ac 主题！H2O-ac 主题后续也将继续更新，欢迎小伙伴们使用和 &lt;a href=&quot;https://github.com/zhonger/jekyll-theme-H2O-ac&quot;&gt;Star&lt;/a&gt;，也欢迎大家一起来贡献代码。&lt;/p&gt;

&lt;p&gt;（Ps: &lt;del&gt;由于沿用了 H2O 的 Logo，可能会侵犯廖柯宇的版权。如果的确如此，后续将会设计一个新的 Logo。&lt;/del&gt; 已采用新 Logo。）（2022年1月10日更新）&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Dec 2021 20:50:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/new-theme-h2o-ac.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/new-theme-h2o-ac.html</guid>
        
        <category>jekyll</category>
        
        <category>theme</category>
        
        <category>blog</category>
        
        <category>ac</category>
        
        <category>develop</category>
        
        <category>主题</category>
        
        <category>前端开发</category>
        
        <category>学术</category>
        
        <category>运维</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>Jekyll 社交图标集合创建</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  一般来说，我们的个人博客都会放上一些社交图标以及社交链接。这样一来，想要关注我们更多的最新研究或工作的读者就可以很快找到路径。于是，在 Jekyll 博客主题设计的时候，通常会在个人简介的地方放置几个社交小图标，点击社交小图标即可把读者带到你的社交个人主页上。对于不同类型的作者，常用的或者关注的社交平台基本上不大一样，社交小图标也会有不一样的需求。比如说，对于从事科研工作的人来说，像谷歌学术、ResearchGate、ORCID 等等能够列举发表论文或者相关研究的平台就比较重要；对于一般程序员来说，像 Github、Gitlab、Segmentfault、CSDN、简书等等能够展示自己所参与的项目和技术心得体会的平台就比较重要；对于前端设计师来说，像 Instgram、UI 中国、Dribble等等能够展示 UI 设计作品的平台就比较重要。因此，对于一款 Jekyll 博客主题的设计者来说，同时要兼顾到这么多不同的需求可能会有点为难，毕竟领域不同、了解的程度也很有限。&lt;/p&gt;

&lt;p&gt;  俗话说得好，授人以鱼不如授人以渔。今天我们就来讲讲如何自己定制一套社交图标集合。&lt;/p&gt;

&lt;h2 id=&quot;技术发展回顾&quot;&gt;技术发展回顾&lt;/h2&gt;

&lt;h3 id=&quot;图片索引&quot;&gt;图片索引&lt;/h3&gt;

&lt;p&gt;  对网站前端设计有点了解的小伙伴可能知道，如果要为网站添加一些社交图标，并且支持鼠标悬停高亮显示，最早的办法是采用不同的图片进行切换的方法。具体来说就是，鼠标悬停前是一张图片，悬停后切换到另外一张图片。由于如果要支持很多个社交图标就要准备很多对这样的图片，那么同一页面内的文件 HTTP 请求数就会陡然增加，对页面加载性能有非常大的影响。&lt;/p&gt;

&lt;p&gt;  随之产生了一种比较可行的解决方案：将所有的社交图片拼在一张图上，然后通过定位的方式来索引到不同的社交图标，我们通常将这张图称为&lt;strong&gt;雪碧图&lt;/strong&gt;。这种方法的好处比较明显，浏览器只需要发出一次请求下载雪碧图即可，减少了文件 HTTP 请求数，加载时间显著变短。比较明显的困难是，定位找起来简直不要太麻烦。而且为了能描述不同的图标悬停前后的位置，必须写很多对样式与之对应，工作量比较大。另外一个比较大的困难是，图标集合的更新很麻烦。新增图标的时候，为了能沿用原来已经写好的样式，只能在原有的雪碧图的基础上往后增加图标，当然同时也要增加对应的样式。&lt;/p&gt;

&lt;p&gt;  虽然雪碧图在某种程度上提升了加载效率，但是给后期的更新、维护带来了不小的麻烦。还有一个越来越凸显的问题——随着访问网站的设备类型的不断增多，图片的质量会影响到不同设备、不同平台下的效果一致性，甚至在高分辨率屏幕下会出现图标模糊的情况，用户体验极其不佳。最有效的改进方法可能就是采用分辨率更高、质量更高的图片来拼凑雪碧图，不过同时也会增大雪碧图的文件体积。这会导致虽然只发出了一个文件 HTTP 加载请求，但是由于文件体积过大、加载速度慢，而给用户带来不好的使用体验。&lt;/p&gt;

&lt;h3 id=&quot;字体图标&quot;&gt;字体图标&lt;/h3&gt;

&lt;p&gt;  接着发展出了一种&lt;strong&gt;字体图标&lt;/strong&gt;的东西来解决图片索引中存在的问题。字体图标，顾名思义就是把所有的图标都变成了字体编码一样，只要我们在网页中引入字体图标文件就可以像用 Unicode 一样使用字体图标了。这种方式最好的一点就是，像操纵字体一样设置字体图标的样式。比如说，虽然我们只在字体图标文件中定义了一个图标，但是当我们使用不同的 color 定义时，图标就会改变其颜色。而且，我们操纵字体图标的大小是采用 font-size 的方式而非 width/height 的方式。这样一来，字体图标和行内文字段落一起使用时也是非常匹配的，行距等文字样式都能同等适用。&lt;/p&gt;

&lt;p&gt;  当然，字体图标在后期的维护、更新过程中也会有些问题。比如说，对于一个大型项目的迭代开发，每个子系统可能都会弄一套需要的字体图标，然后在代码分支合并时就会出现问题。因此，有些项目团队可能会为此而设定一位管理员来专门管理字体图标的更新。每个子系统只能向图标管理员提交他们的更新，最终更新由图标管理员来完成。虽然这样也能在某种程度上解决问题，但是对于图标管理员来说还是会很苦恼。&lt;/p&gt;

&lt;p&gt;  说到这里，有人可能会想起 Bootstrap 等 UI 框架中自带的字体图标集合。那我们直接使用某个框架提供的字体图标集合不就万事大吉了吗？可事实并非如此，框架所包含的字体图标集合虽然看起来还是比较全面，但是还是有可能缺少某些我们想要的字体图标。想到这里，可能会想不如把多个字体图标集合整合在一起使用不就好了吗？这样随之而来的问题是，很大可能存在大量冗余。对于前端界面来说，除了大量的 HTTP 请求是无法接受的，大量冗余代码也是无法接受的。当我们用 &lt;a href=&quot;https://web.dev/measure/&quot;&gt;Lighthouse&lt;/a&gt; 类似的工具来测试网页的性能时，就可以很容易地发现请求代码的使用率情况。如果我们采用多个字体图标集合并用的方案，那么代码实际使用率可能就会很低。也就是说，请求的代码基本上不会在网页中被使用到，这对于优化页面性能来说简直就是噩梦。&lt;/p&gt;

&lt;p&gt;  如果我们觉得自己来手动管理、手动更新字体图标文件太麻烦了，其实也可以用阿里的 &lt;a href=&quot;https://www.iconfont.cn&quot;&gt;Iconfont&lt;/a&gt; 或者其他类似工具来在线管理字体图标集合。Iconfont 会提供一个阿里 CDN 上的链接地址来直接使用你建立好的字体图标集合，这样一来基本上就解决了上面所说的维护难题。我们在 Iconfont 上更新好字体图标集合后，Iconfont 会生成一个新的链接地址。然后，我们只需要修改页面代码的对应地址就可以非常方便地应用更新。&lt;/p&gt;

&lt;p&gt;  这么看来，字体图标的方案好像很完美了，但事实上还是存在其他的问题。Iconfont 这类平台比较适合个人开发者或者开源项目，而对于企业开发者或者非开源项目来说可能依然不大适合。另外，字体图标因为像字体一样被操纵，所以只能支持一种颜色，无法同时支持多种颜色。除此之外，如果我们想要预览所有的图标，但是抱歉的是脱离了 Iconfont 这类平台我们可能就没有办法做到。&lt;/p&gt;

&lt;h3 id=&quot;symbol-图标&quot;&gt;Symbol 图标&lt;/h3&gt;

&lt;p&gt;  实际上除了字体图标在不同设备、不同平台上有相同的效果之外，SVG 图标也具有类似的效果，这主要是因为 SVG 图标的矢量本质，即缩放不会产生任何失真。SVG 图标还支持多种颜色、可以通过字体样式调整样式，并且支持 IE9 以上版本的浏览器。（随着时代的进步，IE 其实已经不是最新的 Windows 11 操作系统默认软件之一了，而且微软也不再提供 IE 安装包下载了，所以未来 IE 浏览器可能不会出现在考虑支持列表里。）为了能够创建一个 SVG 图标集合，我们可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素来定义一个图形模板对象，然后用一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;use&amp;gt;&lt;/code&gt; 元素实例化。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素对图形的作用是在同一文档中多次使用，添加结构和语义。结构丰富的文档可以更生动地呈现出来，类似讲演稿或盲文，从而提升了可访问性。值得注意的是，一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素本身是不会呈现的，只有当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素的实例（即，一个引用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;use&amp;gt;&lt;/code&gt; 元素）才能呈现。&lt;/p&gt;

&lt;p&gt;  如下代码所示，是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 图标的例子。其中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素定义了两个圆圈，对应信息如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;圆的编号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;位置&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;半径&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;填充色&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描边宽度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描边颜色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(50, 50)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;红色&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;红色&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(90, 60)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;白色&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;绿色&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;实例化了三个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 元素，分别为：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;实例编号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;位置&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;宽度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;高度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(0, 0)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(0, 50)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;38&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(0, 100)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&quot;language-svg&quot;&gt;&amp;lt;svg&amp;gt;
&amp;lt;!-- symbol definition  NEVER draw --&amp;gt;
&amp;lt;symbol id=&quot;sym01&quot; viewBox=&quot;0 0 150 110&quot;&amp;gt;
  &amp;lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke-width=&quot;8&quot; stroke=&quot;red&quot; fill=&quot;red&quot;/&amp;gt;
  &amp;lt;circle cx=&quot;90&quot; cy=&quot;60&quot; r=&quot;40&quot; stroke-width=&quot;8&quot; stroke=&quot;green&quot; fill=&quot;white&quot;/&amp;gt;
&amp;lt;/symbol&amp;gt;

&amp;lt;!-- actual drawing by &quot;use&quot; element --&amp;gt;
&amp;lt;use xlink:href=&quot;#sym01&quot;
     x=&quot;0&quot; y=&quot;0&quot; width=&quot;100&quot; height=&quot;50&quot;/&amp;gt;
&amp;lt;use xlink:href=&quot;#sym01&quot;
     x=&quot;0&quot; y=&quot;50&quot; width=&quot;75&quot; height=&quot;38&quot;/&amp;gt;
&amp;lt;use xlink:href=&quot;#sym01&quot;
     x=&quot;0&quot; y=&quot;100&quot; width=&quot;50&quot; height=&quot;25&quot;/&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/eTsY1a.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;创建自定义社交图标集合&quot;&gt;创建自定义社交图标集合&lt;/h2&gt;

&lt;p&gt;  现在让我们来尝试一下借助 Iconfont 来创建自定义的社交图标集合吧。首先访问 &lt;a href=&quot;https://www.iconfont.cn&quot;&gt;Iconfont 首页&lt;/a&gt; 并使用 Github 账户或者其他方式登录好。然后在搜索框中输入 github 查询平台所有开放的相关图标，点击即可加入购物车。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/RkgKa1.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  接着点击右上角的购物车按钮如下所示可以查看已加入到购物车的所有图标，并点击&lt;strong&gt;添加到项目&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/QHdhi5.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  然后给项目取名（这里的名字随便起），点击&lt;strong&gt;确认&lt;/strong&gt;按钮完成项目添加，自动跳转到项目页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/dymDV8.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  点击生成代码即可生成专属链接，并出现&lt;strong&gt;点击复制代码&lt;/strong&gt;按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/NNSsLJ.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  点击&lt;strong&gt;收起在线链接&lt;/strong&gt;旁边的下箭头可以看到&lt;strong&gt;预览字体&lt;/strong&gt;，点击&lt;strong&gt;预览字体&lt;/strong&gt;即跳转到在线预览页面，如下所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/tKwaPx.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里提供了三种方式来使用创建好的社交图标集合，目前平台推荐的是&lt;strong&gt;Symbol 引用&lt;/strong&gt;方式。接着即可按照以下三个步骤在你的网页上轻松使用自定义好的社交图标集合了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/7C7G0A.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;小提示&quot;&gt;小提示&lt;/h3&gt;

&lt;p&gt;  如果想要实现鼠标悬停图标高亮的效果，还需要自己修改一下 CSS 样式，如下所示。这里采用了灰度遮罩滤镜的方式，给原来彩色的图标灰度化了。当鼠标悬停时，灰度化效果被移除，并且有 0.2 s 的缓慢过渡。不过如果原来的图标是黑色的话，灰度化的效果可能就比较差，悬停前后的差异不大明显，所以推荐使用彩色社交图标。Iconfont 平台实际上提供了在线编辑修改颜色的功能，如果想要知道某个图标或者品牌的主题颜色可以访问 &lt;a href=&quot;https://www.schemecolor.com/&quot;&gt;Schemecolor&lt;/a&gt; 来查询。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;vertical-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-0.15em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-ms-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-o-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.2s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-webkit-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-moz-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-ms-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;-o-filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element/symbol&quot;&gt;symbol - SVG | MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/jys1216/article/details/8852158&quot;&gt;使网站首页变灰色，遮罩滤镜&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/6844904162442870792&quot;&gt;还在用字体图标吗，试试svg图标吧(内附vuecli-svg-sprite-loader插件)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Dec 2021 11:30:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/jekyll-sns-icons.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/jekyll-sns-icons.html</guid>
        
        <category>Jekyll</category>
        
        <category>主题</category>
        
        <category>theme</category>
        
        <category>社交图标</category>
        
        <category>sns</category>
        
        <category>icons</category>
        
        <category>Iconfont</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>科学文献的那些事儿</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  现在有越来越多的人涌入了读研、读博的大潮当中，但是“如何搜索到自己需要的科学文献，并进行阅读和管理”却成了一个比较棘手的问题。所以，今天打算介绍一些本人在这方面的经验。&lt;/p&gt;

&lt;p&gt;  一般的科学探索过程可以分为以下几个大的版块：&lt;strong&gt;选题&lt;/strong&gt;、&lt;strong&gt;搜索文献&lt;/strong&gt;、&lt;strong&gt;阅读文献&lt;/strong&gt;、&lt;strong&gt;提出想法&lt;/strong&gt;、&lt;strong&gt;代码编写与测试&lt;/strong&gt; 以及 &lt;strong&gt;论文撰写与投稿&lt;/strong&gt;。其中，选题可以是一个具体的题目，也可以是几个关键词，比如说“钙钛矿”、“能带间隙”、“机器学习”等。在明确了选题之后，我们仍然可能不知道我们想要关注和解决的问题是什么。这种时候往往需要通过在阅读一定量的文献之后，才有可能对问题本身有一个比较清晰的认识。所以说，前三个版块其实都可以归于 &lt;strong&gt;提出问题&lt;/strong&gt; 的大步骤里。事实上，&lt;strong&gt;提出想法&lt;/strong&gt; 也是需要建立在阅读一定量的文献的基础上的。如果不能够很好地掌握研究方向上的各种各样的研究思路和关注的问题，自然也就无法产生自己的想法，甚至说可能有些时候自己的想法已经被研究过了而不自知。再一个与文献有关系的版块就是 &lt;strong&gt;论文撰写与投稿&lt;/strong&gt;。一旦在上一个版块中有了与你期待的一致的结果时，这里不仅需要把你的想法和结果告诉别人，还需要通过对文献的引用来多方面地论证自己观点的正确性和适用性。这其实也是论文撰写过程中最难的一环，如果缺少这一环，那么你撰写的论文将和实验报告没有什么太大的差别。不过，对于一些原创性极强的文章，可能会有一种难以找到相关的文献来论证自己观点。一般来说，可能在完全相同或相近的研究方向上存在的文献非常少，但是和自己的研究中所用到的细节上的相关研究应该还是有不少的，同样可以用来论证细节上的正确性和适用性。&lt;/p&gt;

&lt;p&gt;  接下来，将从与文献有关的&lt;strong&gt;搜索&lt;/strong&gt;、&lt;strong&gt;阅读&lt;/strong&gt;和&lt;strong&gt;管理&lt;/strong&gt;几个方面分享一些具体的经验。&lt;/p&gt;

&lt;h2 id=&quot;文献搜索&quot;&gt;文献搜索&lt;/h2&gt;

&lt;p&gt;  最初大家印象里的文献搜索可能就是在 &lt;strong&gt;百度&lt;/strong&gt;、&lt;strong&gt;必应&lt;/strong&gt;、&lt;strong&gt;谷歌&lt;/strong&gt; 等第三方搜索引擎中输入关键词(中文/英文)，然后可能进阶到用 &lt;strong&gt;百度学术&lt;/strong&gt;、&lt;strong&gt;必应学术&lt;/strong&gt;、&lt;strong&gt;谷歌学术&lt;/strong&gt; 等专注于文献或书籍的搜索引擎搜索关键词。当然了，国内外高校基本上新生入学都会有一个图书馆教育。一般的图书馆教育中，除了日常的借书、还书的事务性教育外，还有一大部分是关于如何正确地、合理地使用图书馆所购买的各项文献数据库，并遵守应有的学术规范、学术道德。接着大家可能会发现学校图书馆的主页上其实也有一个大大的搜索框。这个搜索框也是一个搜索引擎，而且是学校花钱购买的统一了学校所有纸质资源和电子资源的搜索引擎。发现了这个之后，很多人可能会从第三方提供的搜索引擎转向图书馆的搜索引擎。可是用了不久之后，慢慢地会觉得是不是哪里出了问题，怎么搜索不到更多我想要的文献了？哈哈哈，有这种感觉完全没有什么问题，这是一个必然的结果。所谓的搜索引擎是建立在一个复杂的数据库和索引上的，如果数据库没有及时更新信息，那么采用相同的关键词搜索出来的文献列表自然没有什么变化。图书馆搜索引擎如此，第三方搜索引擎亦是如此。&lt;/p&gt;

&lt;p&gt;  单单依靠图书馆搜索引擎和第三方搜索引擎可能都无法满足最新、最全的需求，我们需要借助更加全面的搜索引擎工具– &lt;a href=&quot;https://www.webofscience.com/&quot;&gt;Web of Science&lt;/a&gt; (WoS)。这个搜索引擎最初是由在美国费城的科学情报研究所建立的，之后又转交给 科睿唯安(Clarivate)公司 进行维护。WoS 包含了非常丰富的文献数据以及引用情况，如 SCI 索引、SSCI 索引、ESCI 索引、书籍索引等。下表比较了这三种不同的搜索引擎的优势和缺点。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;搜索引擎提供方&lt;/th&gt;
      &lt;th&gt;优势&lt;/th&gt;
      &lt;th&gt;缺点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;图书馆&lt;/td&gt;
      &lt;td&gt;有版权可直接下载（登录后校外也可）&lt;/td&gt;
      &lt;td&gt;缺少某些数据库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;第三方搜索&lt;/td&gt;
      &lt;td&gt;搜索引擎算法更好&lt;/td&gt;
      &lt;td&gt;偶有未索引文献；无法直接下载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Web of Science&lt;/td&gt;
      &lt;td&gt;数据库索引和相关信息齐全&lt;/td&gt;
      &lt;td&gt;搜索引擎一般&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;  有人觉得，既然说三种搜索引擎各有千秋那为什么不同时使用它们三个呢？当然，三者同时使用的话可以进行优势互补，可以满足 80% 以上的个人需求。那还有 20% 的需求指的是什么呢？又需要如何满足呢？实际上，并不是说我们需要的文献就可以通过我们定义的那几个关键词在搜索引擎中搜索出来。相反，有不少可能对我们非常有用的文献所关联的关键词并非我们常用的。&lt;/p&gt;

&lt;p&gt;  对于这部分文献我们需要从两种方法来补齐。一种是，改变搜索的策略为“按人名搜索”。“按人名搜索”与“按关键词搜索”不同的是，前者的结果是某个研究者参与的所有工作，后者的结果是可能与关键词非常相关的很多研究者的某项工作。当我们阅读到一定量的文献之后，其实我们可以知道在国内外有哪些非常知名的研究者或研究团队在从事和我们相同或类似的工作。一般来说，某个研究者或者研究团队都是在一个研究方向上会有持续性的研究。这样一来，随着时间的积累自然也会有不少的值得一读的文献。顺便提一句，当我们刚进入一个研究团队开始我们的研究时，应该先阅读一下研究团队发表的大部分文章，以此明确未来可能的研究方向。甚至说，你可能从这些文章中发现一些你可以做的点（问题）。另外一种是，让平台为你自动推荐，比如 Research Gate、Mendeley、谷歌学术等。这些平台会根据你日常阅读或已发表的文献来推荐你可能感兴趣的文献，虽然说有些时候推荐的文献并不是让人很感兴趣，但是只要几十篇里面有一篇可以对你有所帮助，那么它的价值就已经足够了。&lt;/p&gt;

&lt;p&gt;  以下就对上述所提到的三种文献搜索方式进行详细地解释：&lt;/p&gt;

&lt;h3 id=&quot;按关键词搜索&quot;&gt;按关键词搜索&lt;/h3&gt;

&lt;p&gt;  关键词搜索其实是模糊搜索中最常用的一种搜索策略，不管对于任何的搜索引擎来说，都是同样有效的。唯一的差别是，根据搜索引擎的算法不同、数据库索引不同，搜索出来的结果会有差异。而且，当我们输入中文关键词或英文关键词时，也会对搜索结果产生影响。因为搜索结果也是与关键词所使用的语言密切相关的，比如说在图书馆搜索引擎中搜索中文关键词，那么默认搜索结果将会以中文优先，英文及其他语言的结果会在中文结果之后。除了某些像 WoS 那样只支持多语言界面单语言搜索的搜索引擎之外，其他大部分搜索引擎亦然。所以，如果想要搜索中文文献可以使用 &lt;a href=&quot;https://www.cnki.net/&quot;&gt;知网&lt;/a&gt;、&lt;a href=&quot;https://www.wanfangdata.com.cn/&quot;&gt;万方&lt;/a&gt;、&lt;a href=&quot;https://www.cqvip.com/&quot;&gt;维普&lt;/a&gt; 来代替 WoS。相反，如果想要搜索英文文献最好使用 WoS。&lt;/p&gt;

&lt;p&gt;  以下就拿“基于机器学习的二元合金的固溶度研究”来举例。首先根据这个标题，可以确定几个英文关键词：alloys、machine learning、 solid solubility。其次，需要选择一个搜索引擎，这里选用 &lt;a href=&quot;https://www.bing.com/academic&quot;&gt;必应学术&lt;/a&gt;。以下是搜索的结果。（哈哈哈，没想到我的文章居然是最相关的。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/JTSLHF.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如果直接点击搜索结果的链接，那么将会直接跳转到文献的在线出版页。一般来说，学校购买的版权都是只能校园网内使用的。如果在校外直接访问文献的在线出版页，会提示你没有权限在线访问文献的所有内容以及下载。这个时候我们就可以打开图书馆搜索引擎搜索想要的文献标题，并且使用自己的校园账号登录授权。结果如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/obuh1i.png&quot; alt=&quot;vgy.me&quot; /&gt;
&lt;img src=&quot;https://i.vgy.me/OScEFQ.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  从图中可以看出，如果学校已购买版权，就会像上面那样是“有全文（请点击查看全文了解详情）”。但是问题是，如果我们在校外即使点击了这个链接，也会提示没有权限。这又是怎么了？我们期待的是可以直接访问有权限的页面。实际上，出版商们为了能够有效地控制所有可用的请求都是从可以追踪的授权方发出的，坚持限制只有固定的公网校园网 IP 段有权限。这样就是说，你想要在校外通过 IP 验证权限访问文献就必须连上学校的 VPN。但是学校的 VPN 也是花钱买的，所以还是会有客户端数量的限制，尤其一个大学往往是几万人起步，显然 VPN 的路径是特别拥堵的。为此，国外诞生了名为 EZproxy 的图书馆专用代理软件。它主要是给所有可能会使用到的网站都做了一个反向代理，并且利用学校提供的 IDP 服务进行鉴权。国外很多高校都采用了 EZproxy 作为校外访问图书馆资源的替代方式。&lt;/p&gt;

&lt;p&gt;  国内高校虽然没有使用 EZproxy，但是有一个由北京大学计算中心开发和维护的 &lt;a href=&quot;https://ds.carsi.edu.cn&quot;&gt;CARSI 联盟认证&lt;/a&gt;。CARSI 与 EZproxy 不同的是，它不依赖于每个高校去建立一套完整的反向代理，而是借助所有出版商提供的第三方账号鉴权 API 为学校和出版商之间架起了一座桥。登录之后如下图所示，会展示学校购买的所有数据库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/ItMLGh.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  因为刚才我们想要下载的文章属于 ScienceDirect 平台的，所以我们点击进入下图详情页面。然后点击访问资源，系统会帮助你自动完成登录操作，并且显示如下图所示的“You have institutional access”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/j02Gdk.png&quot; alt=&quot;vgy.me&quot; /&gt;
&lt;img src=&quot;https://i.vgy.me/F9ArXM.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  现在我们去再次刷新一下刚才文献的在线出版页，发现也已经变成了有权限访问和下载了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/RKg3E1.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里也尝试了一下在 WoS 中搜索相同的关键词，搜索结果如下。（没想到最相关的结果也还是我的那篇文章。）这里的“出版商处的全文”其实与图书馆搜索引擎中的全文类似–点击就会直接跳转到文献的在线出版页。如果点击这里的标题的话，就会跳转到如下的详情页。在这个详情页里，我们可以看到非常丰富的相关信息，比如作者的 ORCID 号、文献的 DOI 号、摘要、资助信息、期刊的相关信息等。这里值得一提的是，每个研究者都可以创建一个属于自己的唯一 ORCID 号，不论所在单位或联系邮箱发生了改变都可以保持 ORCID 号完全不变。并且，ORCID 提供一个学术页面，可以介绍个人的教育经历、发表论文以及自定义的链接。现在一般投稿的时候都会建议与 ORCID 账号连接，这样可以保证相同的名字不同的人的一一对应，为整理某个研究者发表的所有文章列表非常有用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/S0YiNx.png&quot; alt=&quot;vgy.me&quot; /&gt;
&lt;img src=&quot;https://i.vgy.me/EWcRfi.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;按人名搜索&quot;&gt;按人名搜索&lt;/h3&gt;

&lt;p&gt;  前面提到为了补足关键词搜索所欠缺的 20% 未发现的文献，我们通常还会通过搜索某个研究者来发现他参加的所有相关工作。虽然上面提到的三种搜索引擎都可以把姓名当做关键词来进行搜索，但是仍然有可能有很多同名的其他人的工作，或者缺失目标研究者的某些工作。为了得到尽可能完整的列表，通常采用 &lt;a href=&quot;https://www.scopus.com/&quot;&gt;Scopus&lt;/a&gt; 专门搜索研究者。可以看到 WoS 的文献详情页面中的作者信息虽然没有错，但是上面提供的作者链接可能是有问题的，主要是因为同名不同人的问题。&lt;/p&gt;

&lt;p&gt;  Scopus 是由 ELSEVIER (爱思唯尔) 出版社建立的，与 ScienceDirect 属于兄弟网站。所以，如果你已经进行了刚才的登录，现在进入 Scopus 网站时就会是已登录状态。而且，Scopus 同时也提供一个期刊度量评价服务，虽然有类似 的第三方评价网站，但是这个指标还是更靠谱的。首先访问 &lt;a href=&quot;https://www.scopus.com/&quot;&gt;Scopus&lt;/a&gt;，然后点击顶部导航栏中的作者搜索，并输入姓和名（拼音或英文）点击搜索即可查看搜索结果。输入 Li 和 Shengzhou 的搜索结果如下所示，第二个就是我自己。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/DcxfiR.png&quot; alt=&quot;vgy.me&quot; /&gt;
&lt;img src=&quot;https://i.vgy.me/RUSMUy.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  那么我们可以点击这第二项进入查看详情，如下图所示。如果你开始看到的画面链接有很多灰色的地方，可以点击右上角铃铛旁边的机构登录按钮再次登录，之后就可以看到下图这样完整的画面了。不得不说，Scopus 整理出来的文章列表还是非常齐全的，其中连预印本也包括在内了。同样，这里既可以查看基本信息，也可以点击“View at Publisher”查看文献的在线出版页。甚至说，这里最后还有一个“相关文献”的推荐按钮，或许可以从中找到更多我们需要的文献。除此之外，如果我们在推荐列表中看到了感兴趣的文献，还可以点击其中的作者查看该作者参与的所有文献的列表，岂不是一举多得。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/WdXVxT.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;平台自动推荐&quot;&gt;平台自动推荐&lt;/h3&gt;

&lt;p&gt;  另外一种获取推荐文献的方式是注册 &lt;a href=&quot;https://www.researchgate.net&quot;&gt;Research Gate&lt;/a&gt;、&lt;a href=&quot;https://www.mendeley.com&quot;&gt;Mendeley&lt;/a&gt;、谷歌学术等平台的账号，并关注一些研究者的账号，那么系统将会定期向你发送推荐邮件。一般来说，频率不会太高，最多一周一次。除此之外，还可以关注领域内的一些知名公众号。毕竟对于一篇刚在线发表公众号的文献来说，公众号的运营者可能很快就知道了，而搜索引擎由于采用爬虫自动爬取很大可能还没来得及增加索引。&lt;/p&gt;

&lt;h2 id=&quot;文献阅读&quot;&gt;文献阅读&lt;/h2&gt;

&lt;p&gt;  虽然利用以上文献搜索方法可能获取到了你想要的文献，但是从文献中阅读出对你有用的东西依旧困难。如果你去知乎上搜索一下“如何阅读文献”，可能会有一大堆的回答，而且讲得都很有道理。但是归根结底，理论和实践还是两回事。对于不同的人来说，也会有不同适合的方法。有些时候能够从摘要中就能够觉得获取到了想要的信息，有些时候甚至阅读了全文也很难获取到想要的信息，这种差异就体现了事先预判的必要性。一般来说，文献的结构与我们开展科学研究的过程基本上是一致的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Introduction 部分&lt;/strong&gt;：首先要提出问题，其次要介绍问题相关的研究现状（目的也是为了对问题本身进行充分讨论得出自己将要在文献中解决的问题），接着是简要概括全文的目标、方法和结果。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Method 部分&lt;/strong&gt;：要对提出的方法或模型的构成以及数据集作出充分的阐述，有必要的话可能还有一些简单的性能测试预备。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Results 部分&lt;/strong&gt;：会对所有的结果进行说明，但一定是按照开展研究的思路进行说明的。比如说，想要验证提出模型的好坏，首先要与别的方法的结果进行一个横向的比较，当然也可以包括一个模型内部模块必要性的纵向性能比较。这样可以在某种程度上证明提出的模型的确可以解决对应的问题，但是还缺乏更多的验证。因此，往往还会用一个没有见过的数据集来验证一下模型的泛化能力。如此一来，模型的完备性得到了证明。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discussion 部分&lt;/strong&gt;：会对研究过程中一些比较关键性的结果或者细节进行充分讨论，从而在理论层面上巩固模型的可用性。有些期刊也会将结果与讨论两个部分放在一起。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Conclusion 部分&lt;/strong&gt;：可能有人觉得这个部分用处不大，但又是必不可少的。因为当读者阅读完以上所有内容之后还需要这个部分来帮他重新总结升华一下，进一步理清思路。在这个部分，也有的作者会提出一些比较前瞻性的考虑，比如未来可以研究的方向或可能实现的目标等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  个人觉得读一篇文献可以有四个目标：找到主线、找到支线、找到“有趣之处”和找到可研究点，接下来就对它们逐一解释。&lt;/p&gt;

&lt;h3 id=&quot;找到主线&quot;&gt;找到主线&lt;/h3&gt;

&lt;p&gt;  每一篇文献能够被发表在期刊上，一定有其比较优秀的地方，有的时候是一点，有的时候是几点。从摘要中我们可以获得至少一点，而这一点一般来说会与标题相呼应。有了这样一个预期之后，我们去阅读全文的时候就能找到主线是什么。当然，主线也应该是由“提出的问题”和“解决方案”组成的。&lt;/p&gt;

&lt;h3 id=&quot;找到支线&quot;&gt;找到支线&lt;/h3&gt;

&lt;p&gt;  对于一篇文献来说，除了上述的主线之外，应该还可能会有若干条支线。支线的任务有可能是做一些前期工作，为进一步引入解决方案做好准备；也有可能是针对解决方案中的某个细节进行更加深入的探究，进一步增强解决方案的理论可信度；也有可能是对一些小问题的简单探索，并不打算作为主要的结果或结论告诉大家。无论是这里面的哪一种，都对我们进一步了解和思考文献所提出的解决方案有很大的帮助。&lt;/p&gt;

&lt;h3 id=&quot;找到有趣之处&quot;&gt;找到“有趣之处”&lt;/h3&gt;

&lt;p&gt;  这里所说的“有趣之处”并不一定是来自解决方案中的某个核心的思路或者模块，也有可能是作者在实践的过程中偶然得到的灵感体现在了解决方案的某个细节上。这种“有趣之处”，虽然可能不能为你提出想要解决问题的思路，但是却能够给你带来更加灵活的思考。比如说，在机器学习领域已经有各种各样的基础算法，诸如支持向量机、决策树、随机森林、贝叶斯优化等等。不少现有的工作都是在这些算法的基础上提出针对某一方面的改进，尤其是应用于交叉领域学科，似乎原有的机器学习算法就已经足够了。这其实会很大地限制你的思考空间，很难有一些实践上的灵活应用。&lt;/p&gt;

&lt;p&gt;  这里举一个&lt;strong&gt;交叉验证方法&lt;/strong&gt;和&lt;strong&gt;集成学习&lt;/strong&gt;灵活应用的例子。一般来说，交叉验证方法是为了提高验证模型分类或预测能力的准确性，但是在交叉验证中实际上根据训练集和验证集的不同会训练得到多个同质模型。往往我们只会关注于交叉验证后的模型平均效果如何，而不会关心学习之后的模型是否也可以利用起来。有文献就利用集成学习将交叉验证得到的多个同质模型集成为一个强学习模型。这样一来，既保证了模型的分类或预测能力，又使得学习模型变得更加具有鲁棒性。只有去深入了解和理解这些，才能在实际应用中灵活应用所学的基础知识得到更好的成果。&lt;/p&gt;

&lt;h3 id=&quot;找到可研究点&quot;&gt;找到可研究点&lt;/h3&gt;

&lt;p&gt;  阅读文献不仅仅是在了解与选题相关的国内外研究现状，同时也是在找选题中的可研究点，即需要解决且有可能解决的问题。虽然可能在某些课题组已有研究成果的基础上存在这样的可研究点，但是依旧需要联系客观的研究需求，提出属于自己的可研究点。&lt;/p&gt;

&lt;p&gt;  可研究点可以通过在阅读一定量文献之后进行文献总结的方式，梳理现有的研究问题和解决方案以及待解决的研究问题，从而判断有哪些可研究点是值得研究并可能研究的。当然，理论还是要和实际结合的，比如说导师有哪方面的事情想去做，那也应该将其考虑进来，作出一个比较恰当、可行性高的判断。&lt;/p&gt;

&lt;h2 id=&quot;文献管理&quot;&gt;文献管理&lt;/h2&gt;

&lt;p&gt;  文献的管理其实是一个非常繁琐的过程，也不存在绝对完美的方式方法。知乎上有很多关于“如何使用 iPad Pro 和 Apple pencil 搭配来做笔记”的回答。虽然所展示的做阅读笔记的方式让人感觉看起来很不错，但是自己实践起来却非常困难。主要有两个原因：一是文献阅读大部分是 PDF 文件，需要边读边在旁边做笔记，但是诸多因素限制了这一目标的实现；二是在 iPad 上书写与在纸质上书写存在较大的不同，无法有相同的感觉，也无法获得相同的效果。因此，本人采用的文献管理方法依旧比较传统，大部分文献还是要打印出来，然后在纸质上边读边做笔记。唯独在文献引用管理上借助一下工具 Mendeley。&lt;/p&gt;

&lt;h3 id=&quot;pdf-文件的管理&quot;&gt;PDF 文件的管理&lt;/h3&gt;

&lt;p&gt;  首先 PDF 文件的命名需要有比较好的规范。比如说，可以按照“(期刊简写) 文献标题.pdf”的格式来命名所有文献。这样一来，相同期刊的文献就会排列在一起，再按照字母顺序进行排列。同时为了很好地区分某些专题或系列文献，可以建立一个单独的文件夹，将它们放进去。这样的好处是想要哪个方向的文献可以在很小的范围找到，不好的地方是如果只想找文献中的一个小细节，那么可能不大容易与文件夹名字联系起来。另外，使用网盘进行同步也是非常有必要的。这样可以在没有常用电脑在身边的时候，也可以在网盘上找到想要的文献。&lt;/p&gt;

&lt;h3 id=&quot;mendeley-的使用&quot;&gt;Mendeley 的使用&lt;/h3&gt;

&lt;p&gt;  Mendeley 是一款完全免费的文献管理软件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mendeley 客户端不仅可以从 PDF 文件或引用条目中自动识别文献的相关信息，还可以直接打开 PDF 文件进行阅读。如果不是很强调软件的界面，可能你就不需要其他的 PDF 阅读软件了。&lt;/li&gt;
  &lt;li&gt;Mendeley 提供文献同步功能，当你将文献放到 Mendeley 客户端或者上传到网页上时，会自动同步所有登录设备。只不过同步的容量有所限制，5 GB 左右。如果你只将引用条目导入 Mendeley 的话，这样的容量完全是非常充足的。&lt;/li&gt;
  &lt;li&gt;Mendeley 与 Microsoft Office 完全无缝兼容，支持在撰写论文时直接从你的库里选择文献并自动生成引用。当然，你也可以选择你要投递的期刊，Mendeley 会帮你自动转换引用格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  和 Mendeley 类似的文献管理软件也有很多，比如 RefWorks、Endnote、Citavi 等等。相比之下，其他大部分文献管理软件都是收费的。不过有些学校也会买某个软件的版权，只要你还是在校生，都可以使用。&lt;/p&gt;

&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;

&lt;p&gt;  在看完以上的内容之后，相信你对科学文献相关的一些问题可能能得到解答了吧。如果存在什么疑问也不要紧，在实践的过程中不断总结和扩展自己的知识面，相信很快就可以把问题都解决了。&lt;/p&gt;

&lt;p&gt;  加油💪🏻💪🏻💪🏻&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.carsi.edu.cn/aboutCARSI.html&quot;&gt;CARSI &amp;amp; eduGAIN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.biomart.cn/experiment/793/2714581.htm&quot;&gt;6 款主流文献管理软件测评&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wr.lib.tsinghua.edu.cn/&quot;&gt;清华大学图书馆推荐网络学术站点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Dec 2021 10:10:00 +0900</pubDate>
        <link>https://lisz.me/ac/experience/search-papers.html</link>
        <guid isPermaLink="true">https://lisz.me/ac/experience/search-papers.html</guid>
        
        <category>Paper</category>
        
        <category>Reading</category>
        
        <category>manage</category>
        
        
        <category>ac</category>
        
        <category>experience</category>
        
      </item>
    
      <item>
        <title>私有代码托管平台的搭建与运维</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;版本控制&quot;&gt;版本控制&lt;/h3&gt;

&lt;p&gt;  当我们谈到代码托管平台，我们不得不先谈一谈“版本控制”。什么是“版本控制”？版本控制是一种记录一个或若干内容变化，以便将来查阅特定版本修订情况的系统。在我们日常的编写代码过程或者工作中，版本控制显得尤为重要。有了它你就可以将选定的文件回溯到之前的状态，甚至可以将整个项目代码都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控控制系统通常还意味着，就算你胡乱处理项目中的文件，你也照样可以轻松回复到原先的养殖，而且额外增加的工作量却是微乎其微。&lt;/p&gt;

&lt;p&gt;  其实除了代码之外，任何文件都可以加入版本控制。比如像最新的 Office 365 中，如果将文件放在与 Onedrive 同步的文件夹中，那么 Office 365 不但会时不时为你自动保存文件，而且会把每一次的保存都记录下来，同时在你关闭文档时记录为一个版本。&lt;/p&gt;

&lt;p&gt;  回过头来看版本控制系统，它主要可以分为本地版本控制系统、集中化的版本控制系统和分布式版本控制系统。&lt;/p&gt;

&lt;h4 id=&quot;本地版本控制系统&quot;&gt;本地版本控制系统&lt;/h4&gt;

&lt;p&gt;  举个例子，当我在写论文或者做 PPT 的时候，我习惯在文件名的最后加上完成年月日以示区分。这样做的唯一好处就是简单便捷，但是特别容易犯错，尤其是需要和之前的版本进行交叉修改的时候。为了解决这种问题，很久以前就有许多中本地版本控制系统被开发出来，其中大多数都是采用某种简单的数据库来记录文件的历次更新差异。其中最流行的一种叫做 RCS，现今许多计算机系统上还看得到它的踪影。RCS 的工作原理是在硬盘上保留补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。我们常用的网盘的增量同步就是采用了这种方式，网盘同步工具会在同步的主目录建立一个文件来描述本地文件的修订情况，在联网之后与远程服务器的信息进行对比就能发现本地文件与远程文件是否一致。如果两个文件的 MD5 值相同则可以说明文件无须操作，如果不同则根据时间戳来判断哪个文件最新，并将最新的文件更新给另一方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/local.png&quot; alt=&quot;local-version&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;集中化的版本控制系统&quot;&gt;集中化的版本控制系统&lt;/h4&gt;

&lt;p&gt;  以上的本地版本控制系统也有一定的局限性，比如无法让不同系统上的开发者协同工作。于是就有了集中化的版本控制系统（CVCS）。比较有名的像 Subversion（SVN），CVS 等等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人脉通常通过客户端连接到这台服务器，取出最新的文件或者提交更新。在 Git 没有被发明出来之前，这是主要的版本控制系统的标准，而且主要以 SVN 使用者最多。&lt;/p&gt;

&lt;p&gt;  这样一来，的确在某种程度上提供了多人开发协同的功能，但是如果中央服务器发生了故障，那么谁也无法提交更新或者协同工作。如果磁盘发生损坏且未进行实时备份，毫无疑问所有或者一部分数据都会丢失。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/centralized.png&quot; alt=&quot;central-version&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;分布式版本控制系统&quot;&gt;分布式版本控制系统&lt;/h4&gt;

&lt;p&gt;  于是分布式版本控制系统（DVCS）应运而生，其中比较知名的有 Git、Mercurial、Bazaar 等等。在这类系统中，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来，包括完整的历史记录、这样一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p&gt;

&lt;p&gt;  关于 Git 的诞生有个小故事一直被人津津乐道。Linux 内核开源项目有着众多的参与者，但是早期（1991~2002 年间）绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上。从 2002 年开始，整个项目组开始启用一个专门的分布式版本控制系统 BitKeeper 来管理和维护代码。到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核开源社区免费使用 BitKeeper 的权利。于是 Linux 的缔造者 Linus 决定闭关开发一款自己的版本控制系统。一个星期后 Git 就诞生了。Git 的目标是速度、简单的设计、对非线性开发模式的强力支持、完全分布式、有能力高效管理类似 Linux 内核一样的超大规模项目，因此它的速度非空，极其适合管理大项目。&lt;/p&gt;

&lt;p&gt;  Git 诞生以前几乎是 SVN 占据了开源届版本控制系统的江山，但之后随着 Git 的诞生与日臻完善，版本控制系统的天下早已被 Git 收入囊中。就连原来以 SVN 作为版本控制系统的 &lt;a href=&quot;https://sf.net/&quot;&gt;SourceForge&lt;/a&gt; 和以 Mercurial 作为版本控制系统的 &lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt; 都相继支持 Git。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/distributed.png&quot; alt=&quot;distributed-version&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;git-私有代码托管平台解决方案&quot;&gt;Git 私有代码托管平台解决方案&lt;/h3&gt;

&lt;p&gt;  目前公有代码托管平台国外主要有 &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;、&lt;a href=&quot;https://gitlab.com&quot;&gt;Gitlab&lt;/a&gt;、&lt;a href=&quot;https://sf.net&quot;&gt;SourceForge&lt;/a&gt;、&lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt; 等，国内主要有 &lt;a href=&quot;https://gitee.com&quot;&gt;Gitee&lt;/a&gt;、&lt;a href=&quot;https://coding.net&quot;&gt;Coding&lt;/a&gt;、&lt;a href=&quot;https://code.aliyun.com/&quot;&gt;阿里云 Code&lt;/a&gt; 等。其中，Github、SourceForge、Bitbucket、Gitee 都提供商业化的 Git 私有代码托管平台解决方案，只有 Gitlab 提供开源的 Git 私有代码托管平台解决方案，其他平台暂不了解是否有相应的解决方案。&lt;/p&gt;

&lt;p&gt;  除了 Gitlab 这家开源的解决方案之外，其实还有 &lt;a href=&quot;https://gogs.io/&quot;&gt;gogs&lt;/a&gt;、&lt;a href=&quot;https://gitea.io/&quot;&gt;Gitea&lt;/a&gt; 等。Gitlab CE 版本提供了与 Gitlab EE 几乎一样的功能，并包含了非常丰富的特性，比如 Pages（静态页面托管）、Oauth2（第三方应用登录验证）、CI（持续集成）、CD（持续部署）等。相比之下，gogs 或者 Gitea 则偏向于更加基础、精悍的 Git 私有代码托管平台解决方案。从 Gitea 提供的 &lt;a href=&quot;https://docs.gitea.io/en-us/comparison/&quot;&gt;Gitea compared to other Git hosting options&lt;/a&gt; 一文可以看出，Gitlab CE、Gitlab EE 与 Github EE 事实上是特性最为丰富的，Gitea 除了不支持 Pages、内置容器 Registry、内置 CI/CD、提交人身份验证等特性之外，还是支持大部分特性的。考虑到未来可能出现的更加复杂的应用场景需求，比如 JupyterLab 的 Oauth2 登录验证等，这里我们采用了 Gitlab CE 的解决方案。&lt;/p&gt;

&lt;p&gt;  随着 Docker 的广泛使用和发展，Gitlab CE 官方也提供了 Docker 化的部署方式，但是相比较而言，由 sameersbn 提供的 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; 更加适合实践。主要的理由有以下两点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;对 Gitlab CE 的多个组成部分包括数据库、缓存数据库、应用进行了分离，解耦程度更高，更有利于应用本身的独立升级。&lt;/li&gt;
  &lt;li&gt;Gitlab CE 应用的升级并非只是镜像的更新，还涉及到应用容器实例启动后的内部数据库和文件的更新，&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; 提供了一键式的部署和更新，让用户无须关注容器内部的操作。唯一值得注意的是，Gitlab 的版本升级是具有路线图的，当跨版本升级的时候需要根据官方给出的路线图逐步迭代更新，&lt;strong&gt;不能直接从一个旧版本直接升级到最新版本&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;平台搭建&quot;&gt;平台搭建&lt;/h2&gt;

&lt;p&gt;  由于这里采用了 Docker 化的方式进行部署 Gitlab CE，所以预先需要安装 Docker 环境 和 docker-compose 工具，这里不对此进行赘述。&lt;/p&gt;

&lt;h3 id=&quot;准备&quot;&gt;准备&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 为 Gitlab 创建一个目录用于放置应用配置和数据&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/web/gitlab

&lt;span class=&quot;c&quot;&gt;# 下载 docker-compose.yml 文件&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;修改配置&quot;&gt;修改配置&lt;/h3&gt;

&lt;h4 id=&quot;镜像版本的设置&quot;&gt;镜像版本的设置&lt;/h4&gt;

&lt;p&gt;  编辑 docker-compose.yml 配置文件。配置文件包含了对于使用的各个容器镜像的定义，主要有三个：redis、postgresql、gitlab。由于缓存数据库与应用本身没有直接的影响，只是为了加快应用的访问响应速度，所以 redis 镜像一般是使用默认的最新镜像即可，可以使用具体的最新版本号，也可以直接使用 latest 标签。数据库这里采用的 postgresql 数据库，一般来说使用 sameersbn 构建的版本即可。由于 Gitlab 在 13.7.0 版本之后将 postgresql 最低版本的要求升级到了 12，所以现在一般 sammersbn/postgresql 镜像的版本标签都是 12-20200524，以前 postgresql 11 的时候对应的标签就是 11-20200524。gitlab 镜像的版本号主要是跟着 Gitlab 的本身的版本升级而变化，但是由于 Gitlab 的版本更新比较频繁（Gitlab 素来有“版本帝”的称号），所以 sameersbn/gitlab 的版本更新可能不会包含每一个版本，但是已编译的版本标签是符合 Gitlab 官方的版本升级路线图的。&lt;/p&gt;

&lt;h4 id=&quot;数据持久化&quot;&gt;数据持久化&lt;/h4&gt;

&lt;p&gt;  这里为了使容器的数据能够持久化，一般来说会把挂载一个本地目录来对应容器的数据目录。当然 Docker 本身提供了 volume 的创建和管理，sameersbn 推荐的也是 volume 的方式挂载，但是考虑到实际的中心存储服务器来存储所有数据，仍然使用最原始的本地目录对应挂载。在下面的配置文件中，三个容器对应的数据目录都做了这项变动。&lt;/p&gt;

&lt;h4 id=&quot;随机秘钥&quot;&gt;随机秘钥&lt;/h4&gt;

&lt;p&gt;  由于 Gitlab 应用本身需要有三个随机字符串来分别完成数据库记录生成、密码加密、二次验证生成，所以这里建议使用 uuid 命令生成三个长随机字符串替代 GITLAB_SECRETS_DB_KEY_BASE 、GITLAB_SECRETS_SECRET_KEY_BASE、GITLAB_SECRETS_OTP_KEY_BASE 三个参数，如下所示。&lt;/p&gt;

&lt;h4 id=&quot;时区设置&quot;&gt;时区设置&lt;/h4&gt;

&lt;p&gt;  这里使用的时区默认是 sameersbn 所在的时区，如果需要改成中国，则 TZ 为 Asia/Shanghai ，GITLAB_TIMEZONE 为 Beijing。注意，中国时区的表示并不是 Asia/Beijing，而是 Asia/Shanghai。只用一个单词表示时区时，则使用 Beijing （北京时间）。&lt;/p&gt;

&lt;h4 id=&quot;端口和-ssl-设置&quot;&gt;端口和 SSL 设置&lt;/h4&gt;

&lt;p&gt;  在 gitlab 容器中实际上是有 Nginx 服务的，所以官方提供了自带的 SSL 加载方式。但是考虑到搭建 Gitlab 的服务器可能还要用于其他服务，所以这里的 80 和 22 端口将会修改成本地其他端口，而在宿主机上使用统一的 Nginx + SSL 来支持 SSL 化。虽然这样不需要把 SSL 证书挂载到容器内，但还是需要告诉容器启动 HTTPS （GITLAB_HTTPS）和实际使用的端口 (GITLAB_PORT 和 GITLAB_SSH_PORT)，否则在 UI 上显示的将是 HTTP 和 容器内部的端口。&lt;/p&gt;

&lt;h4 id=&quot;自动备份设置&quot;&gt;自动备份设置&lt;/h4&gt;

&lt;p&gt;  一般来说采用默认的“每天凌晨1点”策略自动备份即可，可以根据实际需求修改为不同的时间点或每周或每月。备份的压缩包会保存在 gitlab-data 目录下的 backups 目录里。&lt;/p&gt;

&lt;h4 id=&quot;pages-设置&quot;&gt;Pages 设置&lt;/h4&gt;

&lt;p&gt;  Pages 功能是 Gitlab CE 提供的一个非常实用的内部静态页面托管方案，不像 Github Pages 是完全公开的， Gitlab Pages 也可以根据 Gitlab 本身的用户验证来限制页面的访问权限。这里上面下载的配置文件中默认不包含 Pages 的配置，需要进行添加如下以 GITLAB_PAGES_ 开头的配置节。当开启 Pages 功能后，需要设定好对应的域名（建议二级域名，非主域名），并将该域名对应的通配符解析到 Gitlab 服务器。解析好后，普通项目的访问 URL 是 &lt;a href=&quot;https://{username}.pages.example.com/{project}&quot;&gt;https://{username}.pages.example.com/{project}&lt;/a&gt;，比如项目 zhonger/zhonger 的 Pages 访问 URL 为 &lt;a href=&quot;https://zhonger.pages.example.com/zhonger&quot;&gt;https://zhonger.pages.example.com/zhonger&lt;/a&gt;。如果项目名与前面的域名完全对应，那么就可以直接使用域名访问，无须带子目录，比如项目 zhonger/zhonger.pages.example.com 的 Pages 使用 &lt;a href=&quot;https://zhonger.pages.example.com&quot;&gt;https://zhonger.pages.example.com&lt;/a&gt; 访问即可。&lt;/p&gt;

&lt;h4 id=&quot;相对路径配置&quot;&gt;相对路径配置&lt;/h4&gt;

&lt;p&gt;  如果想要把 Gitlab 服务与其他服务共用一个域名对外提供服务，那么就需要设置相对路径 GITLAB_RELATIVE_URL_ROOT。比如想要使用 &lt;a href=&quot;https://example.com/git&quot;&gt;https://example.com/git&lt;/a&gt; 的 URL 访问 Gitlab 服务，那么就需要将相对路径的配置内容设为 /git。这里笔者没有这个需求，所以置空即可。注意，当使用相对路径配置时升级前最好将相对路径置空，待正常升级后再重新设置相对路径编译生效。编译过程可能比较长，大约十分钟左右。&lt;/p&gt;

&lt;h4 id=&quot;初始-root-密码配置&quot;&gt;初始 root 密码配置&lt;/h4&gt;

&lt;p&gt;  GITLAB_ROOT_PASSWORD 配置节为初始管理员用户（root）密码，如果置空则为 Gitlab 官方常用默认密码 &lt;strong&gt;5iveL!fe&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2.3&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis:6.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--loglevel warning&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis-data:/data&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sameersbn/postgresql:12-20200524&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./postgresql-data:/var/lib/postgresql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_USER=gitlab&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_PASS=password&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_NAME=gitlabhq_production&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_EXTENSION=pg_trgm,btree_gist&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;gitlab&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sameersbn/gitlab:14.1.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgresql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10080:80&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10022:22&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gitlab-data:/home/git/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;healthcheck&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CMD&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/sbin/healthcheck&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;start_period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG=false&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_ADAPTER=postgresql&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_HOST=postgresql&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_PORT=5432&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_USER=gitlab&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_PASS=password&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DB_NAME=gitlabhq_production&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;REDIS_HOST=redis&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;REDIS_PORT=6379&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TZ=Asia/Shanghai&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_TIMEZONE=Beijing&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_HTTPS=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SSL_SELF_SIGNED=false&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_HOST=localhost&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PORT=10080&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_SSH_PORT=10022&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_RELATIVE_URL_ROOT=&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_SECRETS_DB_KEY_BASE=fd6d127c-f4ce-11eb-8163-1e008a0e6985&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_SECRETS_SECRET_KEY_BASE=03221924-f4cf-11eb-a75e-1e008a0e6985&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_SECRETS_OTP_KEY_BASE=07d5caec-f4cf-11eb-ab3b-1e008a0e6985&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_ROOT_PASSWORD=root@root&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_ROOT_EMAIL=root@example.com&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_NOTIFY_ON_BROKEN_BUILDS=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_NOTIFY_PUSHER=false&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_EMAIL=notifications@example.com&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_EMAIL_REPLY_TO=noreply@example.com&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_INCOMING_EMAIL_ADDRESS=reply@example.com&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_BACKUP_SCHEDULE=daily&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_BACKUP_TIME=01:00&lt;/span&gt;

    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_SHARED_DIR=/home/git/data/shared&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PAGES_ENABLED=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PAGES_DOMAIN=pages.example.com&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PAGES_DIR=$GITLAB_SHARED_DIR/pages&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PAGES_PORT=80&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_PAGES_HTTPS=true&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;.....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;启动与测试&quot;&gt;启动与测试&lt;/h3&gt;

&lt;p&gt;  在 ~/web/gitlab/ 目录使用以下命令拉取并启动所有容器实例。如果已经在宿主机的 Nginx 上预先配置好 Gitlab 访问域名 git.example.com 以及 SSL 证书，则可以使用 &lt;a href=&quot;https://git.example.com&quot;&gt;https://git.example.com&lt;/a&gt; 直接访问启动好的 Gitlab。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gitlab-runner&quot;&gt;Gitlab Runner&lt;/h3&gt;

&lt;p&gt;  Gitlab CE 提供的 Pages 功能必须与 Gitlab Runner 一起联合使用，否则源代码无法编译成静态页面，从而无法正常提供 Pages 功能。虽然 Gitlab Runner 有好几种方式，但是为了避免对于服务器的环境的破坏和支持更多的源码编译环境，这里建议采用 docker 方式启动 Gitlab runner。&lt;/p&gt;

&lt;h4 id=&quot;启动&quot;&gt;启动&lt;/h4&gt;

&lt;p&gt;  使用以下命令拉取并启动 gitlab-runner 的最新镜像。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; gitlab-runner &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; gitlab-runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 进入 gitlab-runner 容器并执行 gitlab-runner 命令&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ti&lt;/span&gt; gitlab-runner gitlab-runner register
&lt;span class=&quot;c&quot;&gt;# 根据提示输入内容&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输入 Gitlab 服务的 URL，比如 https://git.example.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输入 Token，可以在 Gitlab 的管理员配置的 Runner 里面看到&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输入描述，根据实际自行设定，可以是主机别名&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输入与该 runner 绑定的标签 tag，可以输入一个或空格间隔多个，也可以置空（建议）&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 选择 runner executor 为 docker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 输入默认的编译环境镜像，比如 python:alpine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（2022年1月14日更新，gitlab-runner 容器现采用 gitlab-runner 命令来统一管理。）&lt;/p&gt;

&lt;h2 id=&quot;平台运维&quot;&gt;平台运维&lt;/h2&gt;

&lt;h3 id=&quot;升级&quot;&gt;升级&lt;/h3&gt;

&lt;h4 id=&quot;升级路线规划&quot;&gt;升级路线规划&lt;/h4&gt;

&lt;p&gt;  前面已经提到过 Gitlab 的升级实际上是要遵循 Gitlab 官方提供的路线图的，即按版本逐步迭代升级，具体可以查看 &lt;a href=&quot;https://docs.gitlab.com/ce/update/#upgrade-paths&quot;&gt;Upgrade-paths&lt;/a&gt;。截止到文章撰写之时，Gitlab 的版本升级主要路线为：8.11.Z -&amp;gt; 8.12.0 -&amp;gt; 8.17.7 -&amp;gt; 9.5.10 -&amp;gt; 10.8.7 -&amp;gt; 11.11.8 -&amp;gt; 12.0.12 -&amp;gt; 12.1.17 -&amp;gt; 12.10.14 -&amp;gt; 13.0.14 -&amp;gt; 13.1.11 -&amp;gt; latest 13.12.Z -&amp;gt; latest 14.0.Z -&amp;gt; 14.1.Z -&amp;gt; latest 14.Y.Z。这里的 Z 指的是该主要版本的最后一个次要版本，Y 指的是最新的主要版本。Gitlab 的版本可以通过 &lt;a href=&quot;https://docs.gitlab.com/ce/update/#version-specific-upgrading-instructions&quot;&gt;Version-specific upgrading instructions&lt;/a&gt; 和 &lt;a href=&quot;https://about.gitlab.com/releases/categories/releases/&quot;&gt;Releases&lt;/a&gt; 来确认。当然，在文档中我们也可以看到一些具体的版本升级路线的示例。如果我们当前的版本符合某一条升级路线，那么可以直接按照示例中的路线逐步升级。如果不符合则需要自行根据主要路线进行确认。&lt;/p&gt;

&lt;p&gt;  这里我们以当前版本 13.2.6 想要升级到 13 主要版本的最后一个次要版本 13.12.4 为例进行尝试。首先查阅一下 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab/tags&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; 的版本号，发现如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;13.2.6 为 13.2.Z 的最后一个修补（patch）版本&lt;/li&gt;
  &lt;li&gt;自 13.7.0 版本开始 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt; 采用 Postgresql 12&lt;/li&gt;
  &lt;li&gt;13.12.4 是 13 主要（Major）版本中的最后一个次要（Minor）版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  根据以上的升级主要路线可知，从 13.2.6 版本到 13.12.4 其实一步到位升级也是可行的。但是实际上 13.2.6 版本对应的 postgresql 的版本还在 11，而从 13.7.0 版本之后开始升级到 12。根据 Gitlab 遵循的版本号命名规则，地位代表主要版本，第二位代表次要版本，第三位代表修补版本，并且每个次要版本的最后一个修补版本可以认为是稳定版本。在同一个主要版本内，从一个稳定次要版本升级到稳定次要版本被认为是稳定可行的。所以可以设定升级路线为：13.2.6 -&amp;gt; 13.7.4 -&amp;gt; 13.12.4。&lt;/p&gt;

&lt;h4 id=&quot;边备份边升级&quot;&gt;边备份边升级&lt;/h4&gt;

&lt;p&gt;  Gitlab 的备份还原需要是在与备份对应的版本上做的。如果因为升级失败而需要使用旧版本的备份还原，需要移除失败版本所用的文件夹及文件，并启动一个对应版本的新实例然后进行备份还原。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 首先对 13.2.6 版本进行备份&lt;/span&gt;
docker-compose run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; gitlab app:rake gitlab:backup:create &lt;span class=&quot;c&quot;&gt;# 将会进行手动备份&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改 docker-compose.yml 中的 gitlab 镜像版本为 13.7.4，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 同时修改 postgresql 的镜像版本为 12-20200524&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 销毁旧版本的实例集群并启动新的实例集群&lt;/span&gt;
docker-compose down &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 等待镜像完成数据库迁移和前端样式库生成，并自动重启各项服务&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 查询应用实例的状态&lt;/span&gt;
docker logs gitlab_gitlab_1
&lt;span class=&quot;c&quot;&gt;# 访问界面，登录验证，确认实例升级成功&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 对 13.7.4 版本进行备份&lt;/span&gt;
docker-compose run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; gitlab app:rake gitlab:backup:create &lt;span class=&quot;c&quot;&gt;# 将会进行手动备份&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改 dockerc-compose.yml 中的 gitlab 镜像版本为 13.12.4，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 同时修改 redis 的镜像版本为 6.2，之前 redis 的镜像版本为 5.0.9&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 销毁旧版本的实例集群并启动新的实例集群&lt;/span&gt;
docker-compose down &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 等待镜像完成数据库迁移和前端样式库生成，并自动重启各项服务&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 查询应用实例的状态&lt;/span&gt;
docker logs gitlab_gitlab_1
&lt;span class=&quot;c&quot;&gt;# 访问界面，登录验证，确认实例升级成功&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如果在升级之后发现升级失败或新版本中某些组件有问题想要回滚，就需要利用刚才升级过程中提前备份好的数据还原备份了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 复制刚才备份的所有数据文件到当前工作目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;gitlab/backups/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar ./
&lt;span class=&quot;c&quot;&gt;# 销毁所有实例&lt;/span&gt;
docker-compose down
&lt;span class=&quot;c&quot;&gt;# 移除本地持久化文件夹及文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; gitlab postgresql redis

&lt;span class=&quot;c&quot;&gt;# 修改 docker-compose.yml 中的配置到想要回滚的备份数据对应的版本&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 此处注意三个镜像版本的对应修改&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 启动实例集群&lt;/span&gt;
docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 复制备份数据到新实例的备份文件夹&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ./&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tar gitlab/backups
&lt;span class=&quot;c&quot;&gt;# 执行恢复数据操作&lt;/span&gt;
docker-compose run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; gitlab app:rake gitlab:backup:restore &lt;span class=&quot;c&quot;&gt;# 将会看到可用备份列表&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/&quot;&gt;《Pro Git》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;sameersbn/docker-gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 Aug 2021 08:10:00 +0900</pubDate>
        <link>https://lisz.me/tech/docker/gitlab.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/docker/gitlab.html</guid>
        
        <category>Git</category>
        
        <category>Gitlab</category>
        
        <category>docker</category>
        
        
        <category>tech</category>
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>JupyterLab 的搭建与运维</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;， 想必大家对这个项目都耳熟能详吧。因为能够实时交互、支持异构计算、部署简单、几乎无运维成本，所以得到了很多人的青睐。笔者的身边也有很多从事科学研究的人选择了 Jupyter 作为编写 Python 的工具，当然也有一部分人选择了 &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt;。不过笔者还是比较喜欢 &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;，简单的纯文本编辑功能，利用丰富的插件市场来添加各种想要的功能，无缝支持远程开发，简直就是理想中的编辑器了。但是，今天还是要来考虑一下 Jupyter，毕竟 JupyterLab 的服务功能也是非常强大的。&lt;/p&gt;

&lt;p&gt;  在 Jupyter 出现之前，也有可以替代 Python 自带的 Python Shell 的 &lt;a href=&quot;https://ipython.org/&quot;&gt;IPython&lt;/a&gt;。笔者在早期也曾使用过，体验还不错。其实，Jupyter 就是2014 年从 IPython 中衍生出来的，所以从 IPython 过渡到 Jupyter 毫无困难。如果说 IPython 是为了 Python 而量身定制的话，那么 Jupyter 则是为包括 Julia、Python、R 在内的几十种编程语言（&lt;a href=&quot;https://github.com/jupyter/jupyter/wiki/Jupyter-kernels&quot;&gt;详情连接&lt;/a&gt;）的交互式数据科学和科学计算而生的。&lt;/p&gt;

&lt;p&gt;  早期的 Jupyter 只包含 Jupyter Kernels 和 Jupyter Notebook，其中 Jupyter Kernels 是用于支持编程语言的内核，Jupyter Notebook 是基于 Web 的交互式计算环境，前身是 IPython Notebook。现在的 Jupyter 除了这两者以外还有 JupyterHub、JupyterHub API 和 JupyterLab。JupyterHub 是一个用于 Jupyter Notebook 的多用户服务器。它通过生成、管理和代理许多单一的 Jupyter Notebook 服务器来支持多用户。JupyterHub API 是以 REST 风格向开发者们提供的 API 接口，可以完成一系列对 Jupyter 的操作，比如生成用户环境、配置环境等。JupyterLab 号称是 Jupyter 项目的下一代用户界面，它以一个灵活且强大的用户界面向用户提供经典的 Jupyter Notebook、终端、编辑器、文件浏览器、丰富输出等模块，俨然像是朝着现代化的理想编辑器的目标进发的。&lt;/p&gt;

&lt;p&gt;  无论之前的 Jupyter 是什么样子，现在的 JupyterLab 已经是和曾经的 Cloud9 （一款先进的在线代码编辑器，现已被 AWS 收购）一样的支持多用户多实例的代码运行平台。对于从事科学研究的团队来说，使用 JupyterLab 搭建一个内部科学计算平台成为了可能。当然，个人用户还是可以选择使用 Anaconda 或者 PIP 来安装单用户版本。&lt;/p&gt;

&lt;h2 id=&quot;搭建&quot;&gt;搭建&lt;/h2&gt;

&lt;p&gt;  说到搭建平台自然而然想到了使用 Docker，既可以保证用户对自己所需的软件或环境可以修改，又保证不同用户之间互不干扰、宿主机与 Jupyter 之间互不干扰。虽说 Jupyter 官方提供了一个使用 Docker 来部署 Jupyter 各个产品的&lt;a href=&quot;https://jupyter-docker-stacks.readthedocs.io/&quot;&gt;文档网站&lt;/a&gt;，但不得不说即使看了这个文档也很难搞清楚到底怎么部署一套 JupyterLab。可能唯一有用的就是 Jupyter 官方提供的镜像构建 &lt;a href=&quot;https://github.com/jupyter/docker-stacks&quot;&gt;Dockerfile 集合&lt;/a&gt; 吧。&lt;/p&gt;

&lt;p&gt;  JupyterLab 提供两种方式启动多用户多实例：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DockerSpawner 方式&lt;/strong&gt;：每个用户独享一个 Docker 实例，能有效隔离用户。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SystemSpawner 方式&lt;/strong&gt;：共享同一个 Docker 实例，以系统用户身份运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  事实上，既然我们选择了用 Docker 来部署，自然而然应该选择 DockerSpawner 方式了。JupyterLab 中主要实现多用户多实例功能的是 JupyterHub 模块（如下图）。JupyterHub 模块为整个 JupyterLab 对外提供了一个共同的 HTTP 接口，并可以进行用户鉴权和为通过鉴权的用户创建一个新的 Docker 实例。笔者在这里主要是使用 Gitlab 方式鉴权登录，图中涉及到 Admin 以及数据库这里不作探讨。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jupyterhub.readthedocs.io/en/stable/_images/jhub-fluxogram.jpeg&quot; alt=&quot;JupyterHub 架构图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  以下为搭建所需的文件的列表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/4pnx0D.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;构建-jupyter-notebook-实例镜像&quot;&gt;构建 Jupyter Notebook 实例镜像&lt;/h3&gt;

&lt;h4 id=&quot;基础镜像-base-notebook&quot;&gt;基础镜像 base-notebook&lt;/h4&gt;

&lt;p&gt;  这里的基础镜像可以根据需要自行选择，与 &lt;a href=&quot;https://github.com/jupyter/docker-stacks/tree/master/base-notebook&quot;&gt;jupyter/docker-stacks&lt;/a&gt; 相比镜像构建 Dockerfile 有些内容做了修改，本目录下其他文件和 &lt;a href=&quot;https://github.com/jupyter/docker-stacks/tree/master/base-notebook&quot;&gt;base-notebook 目录&lt;/a&gt;一致。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Dockerfile&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG ROOT_CONTAINER=nvidia/cuda:10.2-devel-ubuntu18.04&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;ARG BASE_CONTAINER=$ROOT_CONTAINER&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;FROM $BASE_CONTAINER&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;ARG NB_USER=&quot;ubuntu&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG NB_UID=&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG NB_GID=&quot;100&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Fix DL4006&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;SHELL [&quot;/bin/bash&quot;, &quot;-o&quot;, &quot;pipefail&quot;, &quot;-c&quot;]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;USER root&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install all OS dependencies for notebook server that starts but lacks all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# features (e.g., download as all possible file formats)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN apt-get update \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; apt-get install -yq --no-install-recommends wget htop vim bzip2 ca-certificates sudo locales fonts-liberation run-one \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;RUN echo &quot;en_US.UTF-8 UTF-8&quot; &amp;gt; /etc/locale.gen &amp;amp;&amp;amp; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;locale-gen&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Configure environment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV CONDA_DIR=/opt/conda \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;SHELL=/bin/bash \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;NB_USER=$NB_USER \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;NB_UID=$NB_UID \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;NB_GID=$NB_GID \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;LC_ALL=en_US.UTF-8 \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;LANG=en_US.UTF-8 \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;LANGUAGE=en_US.UTF-8&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV PATH=$CONDA_DIR/bin:$PATH \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;HOME=/home/$NB_USER&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Copy a script that we will use to correct permissions after running certain commands&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY fix-permissions /usr/local/bin/fix-permissions&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN chmod a+rx /usr/local/bin/fix-permissions&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Enable prompt color in the skeleton .bashrc before creating the default NB_USER&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN sed -i &apos;s/^#force_color_prompt=yes/force_color_prompt=yes/&apos; /etc/skel/.bashrc&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create NB_USER wtih name ubuntu user with UID=1000 and in the &apos;users&apos; group&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and make sure these dirs are writable by the `users` group.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN echo &quot;auth requisite pam_deny.so&quot; &amp;gt;&amp;gt; /etc/pam.d/su \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; sed -i.bak -e &apos;s/^%admin/#%admin/&apos; /etc/sudoers \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; sed -i.bak -e &apos;s/^%sudo/#%sudo/&apos; /etc/sudoers \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; useradd -m -s /bin/bash -N -u $NB_UID $NB_USER -g $NB_GID \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; mkdir -p $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;# &amp;amp;&amp;amp; chown $NB_USER:$NB_GID  \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; chmod g+w /etc/passwd \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions $HOME \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; adduser ubuntu sudo \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; echo &quot;ubuntu ALL=(ALL) NOPASSWD&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ALL&quot; | tee /etc/sudoers.d/nopasswd4sudo&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;USER $NB_UID&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR $HOME&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG PYTHON_VERSION=default&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Setup work directory for backward-compatibility&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN mkdir /home/$NB_USER/work &amp;amp;&amp;amp; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fix-permissions /home/$NB_USER&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install conda as ubuntu and check the md5 sum provided on the download site&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENV MINICONDA_VERSION=4.9.2 \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;MINICONDA_MD5=122c8c9beb51e124ab32a0fa6426c656 \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;CONDA_VERSION=4.9.2&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;WORKDIR /tmp&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh  \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; echo &quot;${MINICONDA_MD5} *Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh&quot; | md5sum -c -  \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; /bin/bash Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm Miniconda3-py38_${MINICONDA_VERSION}-Linux-x86_64.sh \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; echo &quot;conda ${CONDA_VERSION}&quot; &amp;gt;&amp;gt; $CONDA_DIR/conda-meta/pinned \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda config --system --prepend channels conda-forge \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda config --system --set auto_update_conda &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda config --system --set show_channel_urls &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda config --system --set channel_priority strict \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; if [ ! $PYTHON_VERSION = &apos;default&apos; ]; then conda install --yes python=$PYTHON_VERSION; fi \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda list python | grep &apos;^python &apos; | tr -s &apos; &apos; | cut -d &apos;.&apos; -f 1,2 | sed &apos;s/$/.*/&apos; &amp;gt;&amp;gt; $CONDA_DIR/conda-meta/pinned \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda install --quiet --yes conda \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda install --quiet --yes pip \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda update --all --quiet --yes \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda clean --all -f -y \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm -rf /home/$NB_USER/.cache/yarn \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions /home/$NB_USER&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install Tini&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN conda install --quiet --yes &apos;tini=0.18.0&apos; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda list tini | grep tini | tr -s &apos; &apos; | cut -d &apos; &apos; -f 1,2 &amp;gt;&amp;gt; $CONDA_DIR/conda-meta/pinned \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda clean --all -f -y \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions /home/$NB_USER&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install Jupyter Notebook, Lab, and Hub&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Generate a notebook server config&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Cleanup temporary files&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Correct permissions&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Do all this in a single RUN command to avoid duplicating all of the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# files across image layers when the permissions change&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN conda install --quiet --yes \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;notebook=6.4.0&apos; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;jupyterhub=1.4.2&apos; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;jupyterlab=3.0.16&apos; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda clean --all -f -y \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; npm install -g npm@7.20.0 \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; npm cache clean --force \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; jupyter notebook --generate-config \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm -rf $CONDA_DIR/share/jupyter/lab/staging \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm -rf /home/$NB_USER/.cache/yarn \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions $CONDA_DIR \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; fix-permissions /home/$NB_USER&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;EXPOSE &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8888&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Configure container startup&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ENTRYPOINT [&quot;tini&quot;, &quot;-g&quot;, &quot;--&quot;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CMD [&quot;start-notebook.sh&quot;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Copy local files as late as possible to avoid cache busting&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY jupyter_notebook_config.py /etc/jupyter/&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Fix permissions on /etc/jupyter as root&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;USER root&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN fix-permissions /etc/jupyter/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN chmod +x /usr/local/bin/start-notebook.sh /usr/local/bin/start-singleuser.sh /usr/local/bin/start.sh&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Switch back to ubuntu to avoid accidental container runs as root&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;USER $NB_UID&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;WORKDIR $HOME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; base-notebook:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;单用户镜像-singleuser&quot;&gt;单用户镜像 singleuser&lt;/h4&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Dockerfile&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG BASE_IMAGE=base-notebook:latest&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;FROM $BASE_IMAGE&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;ADD install_jupyterhub /tmp/install_jupyterhub&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ARG JUPYTERHUB_VERSION=master&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# install pinned jupyterhub and ensure notebook is installed&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;amp;&amp;amp; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;python3 -m pip install notebook jupyterhub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;install_jupyterhub 脚本文件&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_call&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;JUPYTERHUB_VERSION&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pip_install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;-m&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;pip&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;install&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;--no-cache&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;--upgrade&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&apos;--upgrade-strategy&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;only-if-needed&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;master&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;https://github.com/jupyterhub/jupyterhub/archive/master.tar.gz&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upper_bound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;&amp;gt;=%s,&amp;lt;%s&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;jupyterhub%s&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;check_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip_install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; singleuser:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jupyterlab-单用户镜像-jupyter_lab_singleuser&quot;&gt;JupyterLab 单用户镜像 jupyter_lab_singleuser&lt;/h4&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;ARG BASE_IMAGE=singleuser:latest&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;FROM ${BASE_IMAGE}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Install jupyterlab&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN conda update -n base conda \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; conda install -c conda-forge jupyterlab&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN jupyter serverextension enable --py jupyterlab --sys-prefix&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;USER root&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN chpasswd &amp;lt;&amp;lt;&amp;lt; &quot;ubuntu:ubuntu&quot; \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; sed -i &apos;s/http:\/\/archive.ubuntu.com/https:\/\/mirrors.sjtug.sjtu.edu.cn/g&apos; /etc/apt/sources.list \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; apt update \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; apt install -y git zsh vim \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; usermod -s /bin/zsh ubuntu \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; echo &apos;chown -R ubuntu:users /home/ubuntu/work&apos; &amp;gt;&amp;gt; /usr/local/bin/start-notebook.sh&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Add supports for zsh and zh-CN language&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;USER ubuntu&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN git clone https://gitee.com/mirrors/oh-my-zsh.git ~/.oh-my-zsh \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; sed -i &quot;s/robbyrussell/bira/&quot; ~/.zshrc \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; wget -c https://jfds-1252952517.cos.ap-chengdu.myqcloud.com/jupyterhub/jupyterlab_language_pack_zh_CN-0.0.1.dev0-py2.py3-none-any.whl \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; pip install jupyterlab_language_pack_zh_CN-0.0.1.dev0-py2.py3-none-any.whl \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; rm jupyterlab_language_pack_zh_CN-0.0.1.dev0-py2.py3-none-any.whl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jupyter_lab_single:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;构建-jupyterhub-镜像&quot;&gt;构建 JupyterHub 镜像&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Dockerfile&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;ARG BASE_IMAGE=jupyterhub/jupyterhub:latest&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;FROM ${BASE_IMAGE}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;RUN pip install --no-cache --upgrade jupyter \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; pip install --no-cache dockerspawner \&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;amp;&amp;amp; pip install --no-cache oauthenticator&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EXPOSE &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  这里配置挂载的本地目录为根据用户名而区分的目录，当 Gitlab 用户名中包含 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 会被转义为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2d&lt;/code&gt;。另外，这里的本地目录需要预先建立好，否则由于 Docker 自身的安全性而新建立的目录的所有者会是 root 用户，这样就不能够正常使用该目录。以下配置文件需放置在 docker-compose.yml 的同层目录 data 里面。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# jupyterhub_config.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oauthenticator.gitlab&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GitLabOAuthenticator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JupyterHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticator_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GitLabOAuthenticator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GitLabOAuthenticator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oauth_callback_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITLAB_OAUTH_CALLBACK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GitLabOAuthenticator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITLAB_API_CLIENT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GitLabOAuthenticator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITLAB_API_KEY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JupyterHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawner_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;dockerspawner.DockerSpawner&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;jupyter_lab_singleuser:latest&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&apos;GRANT_SUDO&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&apos;UID&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_create_kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;ubuntu&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_create_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;command&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;start-singleuser.sh --SingleUserNotebookApp.default_url=/lab&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Mount the real user&apos;s Docker volume on the host to the notebook user&apos;s
# notebook directory in the container
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notebook_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;/home/ubuntu/work&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notebook_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notebook_dir&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volumes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;/home/data/jupyterhub/user-data-{username}&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notebook_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;--allow-root&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_containers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#network
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;jupyterhub_network&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_internal_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network_name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Pass the network name as argument to spawned containers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DockerSpawner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_host_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;network_mode&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# IP Configurations
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JupyterHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hub_ip&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;172.18.0.2&apos;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#c.JupyterHub.port = 8000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jupyterhub&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jupyterlab&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jupyterhub:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:8000&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.18.0.2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_HOST=https://{Gitlab Domain}&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_API_CLIENT=xxxxxx&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_API_KEY=xxxxxx&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GITLAB_OAUTH_CALLBACK=https://{JupyterHub Domain}/hub/oauth_callback&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bridge&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipam&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.18.0.0/24&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.18.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;测试&quot;&gt;测试&lt;/h2&gt;

&lt;p&gt;  访问 &lt;a href=&quot;https://{JupyterHub Domain}/&quot;&gt;https://{JupyterHub Domain}/&lt;/a&gt; 即可，点击登录按钮后跳转到 Gitlab 登录页，如果 Gitlab 已登录会自动跳回。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Jupyter&quot;&gt;Jupyter - 维基百科&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zsduo.com/archives/244.html&quot;&gt;JupyterLab 3.0 正式发布，同时解决中文语言包下载不成功，汉化不成功的问题，jupyterlab-language-pack-zh-CN 安装失败解决方案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cyfeng.science/2021/01/15/jupyterlab-error-when-install-chinses-language-pack/&quot;&gt;Jupyterlab 安装中文语言包失败&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/258724435&quot;&gt;使用JupyterHub向多用户提供jupyter服务的思路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kaifa99.com/GitHub/article_117797&quot;&gt;dockerspawner, 在 Docker 容器中，生成JupyterHub单用户服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Jul 2021 08:20:00 +0900</pubDate>
        <link>https://lisz.me/tech/docker/jupyterlab.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/docker/jupyterlab.html</guid>
        
        <category>JupyterLab</category>
        
        <category>Docker</category>
        
        <category>Gitlab</category>
        
        
        <category>tech</category>
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>[原创]远程服务环境与本地环境互联</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;异地组网&quot;&gt;异地组网&lt;/h3&gt;

&lt;p&gt;  谈到“异地组网”这个问题，其实已经有很多成熟的解决方案，包括最简单的拉光纤物理相连、向日葵异地组网等等。这些解决方案虽然稳定性和使用体验都极度让人舒适，但是实现的代价略微有点大，尤其财大气粗的光纤物理直接相连。不过对于某些大公司的异地数据中心互联，这仍然是最被认可的解决方案。至于向日葵异地组网，有点类似于把远程服务环境和本地环境同时连入一个网络，然后在形式上实现局域网化。由于这一解决方案往往依赖于一个由第三方提供的中心节点服务，这种局域网的带宽、速度和使用体验很大程度上受限于购买的套餐级别。那么，是否存在一种造价较低，速度和使用体验都较佳的解决方案呢？答案自然是存在的，只是有点&lt;strong&gt;曲线&lt;/strong&gt;而已。&lt;/p&gt;

&lt;h3 id=&quot;zerotier-组网&quot;&gt;Zerotier 组网&lt;/h3&gt;

&lt;p&gt;  在之前的一些文章中，我们已经体验了 Zerotier 带来的软件定义网络。这种软件定义网络方式，在某种程度上会受限于 Zerotier 的 Planet 节点发现路由的效果。如果两个客户端节点到 Planet 节点的路由来自于两条不同的线路，比如一个节点位于移动局域网网络，一个节点位于联通局域网网络，Planet 节点在规划路由的时候会认为两个客户端节点直接无法找到最短的路由，需要通过 Planet 节点来进行转发流量，甚至被认为完全没有可能互通。而实际上，在国内的运营商网络中，移动网络和联通网络之间是存在交换节点的，即可能存在一条最短路由。这种情况下，Zerotier 官方建议自己使用一台国内的公网服务器提供 Moon 服务，从而为 Zerotier 的路由规划提供辅助。从理论上来说，两个客户端节点在 Moon 的帮助下很大可能找到国内网络中的最短路由，并直接建立 UDP 通道。但在实际过程中，客户端节点之间的最短路由可能仍然十分长，且不足以直接建立 UDP 通道，毕竟它们位于两个底层的局域网中。&lt;/p&gt;

&lt;p&gt;  那么这样就完全不能让两个客户端节点直接互联吗？实际上还是有方法的。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;第一种方法&lt;/strong&gt;是，将公网服务器与远程服务环境的节点使用 Zerotier 组网互通，通过 SSH 自身提供的代理功能、将本来要发给远程服务环境的节点的 ssh 连接请求发往公网服务器进行转发。因为全程采用了 SSH 无密码登录（密钥登录），所以除非你的私钥被别人窃取否则理论上是绝对安全的，这也是国际上采用的通用安全做法。&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;第二种方法&lt;/strong&gt;是，将公网服务器分别与远程服务环境的节点、本地环境的节点使用 Zerotier 组网互通，并设置公网服务器允许转发来自 Zerotier 网卡的流量请求，然后在本地环境的节点上设置将所有发往远程服务环境的节点的网络请求经由公网服务器进行转发。因为这种方法是把公网服务器作为一个软件式的路由器，在网络上实现了本地环境与远程服务环境的完全互联，所以对于本地环境而言，远程服务环境中的任意节点的任意端口是完全可达的。这也存在某种安全上的隐患，一般来说只建议网络或服务管理用户使用这样的方式，对于普通用户来说第一种方法已经完全够用，且安全性较高。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.vgy.me/BCnz9e.png&quot; alt=&quot;vgy.me&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;

&lt;h3 id=&quot;公网服务器的选择&quot;&gt;公网服务器的选择&lt;/h3&gt;

&lt;p&gt;  无论是第一种方法还是第二种方法，都需要有一台公网服务器使用 Zerotier 与远程服务节点互通，因此第一步是需要拥有一台公网服务器。&lt;/p&gt;

&lt;h4 id=&quot;地理位置&quot;&gt;地理位置&lt;/h4&gt;

&lt;p&gt;  如果远程服务节点和本地客户端节点都在国内，那自然是国内的公网服务器最好。如果远程服务节点位于国内、本地客户端节点位于国外，也是使用国内的公网服务器最佳。因为无论哪种方式，公网服务器与远程服务节点直接都是使用 Zerotier 连接的。当然如果远程服务节点和本地客户端节点都在国外，自然使用国外的公网服务器最佳。&lt;/p&gt;

&lt;h4 id=&quot;服务商&quot;&gt;服务商&lt;/h4&gt;

&lt;p&gt;  根据笔者使用过的经验来看，按照推荐先后优先顺序，国内的 VPS 公网服务商推荐阿里云（国内国外路由较短）、腾讯云、Ucloud、华为云、百度云等等，国外的 VPS 公网服务商推荐 AWS（国内国外路由较短）、Azure、Linode、Digital Ocean、Vultr、GCP 等等。&lt;/p&gt;

&lt;h3 id=&quot;第一种方法&quot;&gt;第一种方法&lt;/h3&gt;

&lt;h4 id=&quot;提前准备&quot;&gt;提前准备&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;本地客户端节点生成一对公钥和私钥&lt;/li&gt;
  &lt;li&gt;公网服务器和远程服务节点都已安装 Zerotier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  如何生成一对公钥和私钥以及安装 Zerotier此处不做赘述。&lt;/p&gt;

&lt;h4 id=&quot;规划网络&quot;&gt;规划网络&lt;/h4&gt;

&lt;p&gt;  假设现在规划的 Zerotier 网段为 172.18.0.0/24，远程服务节点所在局域网网络为 192.168.1.0/24，：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;公网服务器实际 IP：1.1.1.1&lt;/li&gt;
  &lt;li&gt;远程服务节点实际 IP：192.168.1.200&lt;/li&gt;
  &lt;li&gt;公网服务器 Zerotier 规划 IP：172.18.0.10&lt;/li&gt;
  &lt;li&gt;远程服务节点 Zerotier 规划 IP：172.18.0.200&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;配置-zerotier&quot;&gt;配置 Zerotier&lt;/h4&gt;

&lt;p&gt;  登录 &lt;a href=&quot;https://my.zerotier.com&quot;&gt;Zerotier Web 控制面板&lt;/a&gt;，并将公网服务器和远程服务节点的 zerotier id 加入到同一个 Zerotier 网络中。在 Web 控制面板中设置上面对应的 IP。&lt;/p&gt;

&lt;p&gt;  以下为在公网服务器或远程服务节点上的操作：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询公网服务器或远程服务节点的 zerotier id&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zerotier-cli info

&lt;span class=&quot;c&quot;&gt;# 加入到同一个 Zerotier 网络中&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zerotier-cli &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &amp;lt;Zerotier Network Id&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 查询网络状态&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;zerotier-cli listnetworks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;验证组网结果&quot;&gt;验证组网结果&lt;/h4&gt;

&lt;p&gt;  如下所示可以分别在远程服务节点和公网服务器上验证是否可以互通。一般来说，从远程服务节点上 PING 公网服务器可能较容易 PING 通。如果两边都不通，可以使用直接 PING 公网服务器的公网 IP 来帮助 Zerotier 更快找到最短路由。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在远程服务节点上 PING 公网服务器&lt;/span&gt;
ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10 172.18.0.10

&lt;span class=&quot;c&quot;&gt;# 在公网服务器上 PING 远程服务节点&lt;/span&gt;
ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10 172.18.0.200

&lt;span class=&quot;c&quot;&gt;# 在远程服务节点上 PING 公网服务器的公网 IP&lt;/span&gt;
ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置路由转发&quot;&gt;配置路由转发&lt;/h4&gt;

&lt;p&gt;  经过以上步骤就可以实现公网服务器与远程服务节点之间的互通，但是在远程服务环境中往往存在多个节点，如果每个节点都这么做那将非常冗余。因此，需要借助已经配置好 Zerotier 的远程服务节点来转发所有的请求到远程服务环境的其他节点。&lt;/p&gt;

&lt;h5 id=&quot;远程服务节点&quot;&gt;远程服务节点&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 启动转发功能，编辑 /etc/sysctl.conf 文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/sysctl.conf

&lt;span class=&quot;c&quot;&gt;# 在 /etc/sysctl.conf 文件底部添加&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1

&lt;span class=&quot;c&quot;&gt;# 使修改的配置立即生效&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查看当前配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.ip_forward

&lt;span class=&quot;c&quot;&gt;# 如输出以下内容即为修改的配置已生效&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1

&lt;span class=&quot;c&quot;&gt;# 查询网卡信息&lt;/span&gt;
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;show

&lt;span class=&quot;c&quot;&gt;# 假设正常上网网卡为 eth0，Zerotier 虚拟网卡为 zt0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 添加 iptables 规则允许 eth0 网卡转发所有 Zerotier 虚拟网卡 zt0 的流量&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; conntrack &lt;span class=&quot;nt&quot;&gt;--ctstate&lt;/span&gt; RELATED,ESTABLISHED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; zt0 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT

&lt;span class=&quot;c&quot;&gt;# 由于 iptables 规则会在 VPS 重启后丢失，所以需要使用 iptables-persistent 来保存规则&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; iptables-persistent
&lt;span class=&quot;c&quot;&gt;# 执行以下命令后会自动保存 IPv4 和 IPv6 规则&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netfilter-persistent save

&lt;span class=&quot;c&quot;&gt;# 查询已保存的规则&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables-save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  执行以上命令后，远程服务节点就能接受来自其他 Zerotier 节点的流量转发请求了。&lt;/p&gt;

&lt;h5 id=&quot;公网服务器&quot;&gt;公网服务器&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询公网服务器的网卡&lt;/span&gt;
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;show

&lt;span class=&quot;c&quot;&gt;# 假设正常上网网卡为 eth0，Zertiter 虚拟网卡为 zt0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 添加通往其他远程服务节点的请求交给已配置 Zerotier 的远程服务节点转发&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;route add &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; 192.168.1.0/24 gw 172.18.0.200 dev zt0

&lt;span class=&quot;c&quot;&gt;# 验证其他远程服务节点是否可达&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 假设某一个其他远程服务节点 IP 为 192.168.1.201&lt;/span&gt;
ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10 192.168.1.201
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  经过以上命令即可配置公网服务器对远程服务环境中的任意节点通过已配置 Zerotier 的远程服务节点可达。&lt;/p&gt;

&lt;h4 id=&quot;配置-ssh-代理&quot;&gt;配置 SSH 代理&lt;/h4&gt;

&lt;p&gt;  SSH 是 Linux/Unix 世界中必不可少的一件神器，通常是用来从本地远程连接服务器。由于 SSH 协议本身是基于加密的，所以在连接后的数据流量是难以被攻击或破解的。当然，SSH 连接建立后，本地节点实际上还可以把远程服务节点的端口映射到本地。即使是在远程服务节点开启的是一个 Web 服务器，通过这样的方式也能在本地使用浏览器访问本地映射端口来实现对远程服务节点上的 Web 服务器的访问。而所需要的唯一一个权限就是可以 SSH 连接登录用户成功。这种方法的安全性极佳，既利用了 SSH 本身的安全性，又不暴露远程服务节点上的任何其他端口给别人。&lt;/p&gt;

&lt;p&gt;  SSH 代理功能其实是 SSH 端口转发的一种，其原理是利用一台公网可达的 SSH 服务作为跳板进行二次 SSH 登录。事实上，这种代理登录方式理论上可以支持二次及以上。由阮一峰大佬撰写的 &lt;a href=&quot;https://wangdoc.com/ssh/port-forwarding.htm&quot;&gt;SSH 教程&lt;/a&gt; 中，对这一内容和原理做了非常详细的介绍，还包括 SSH 密钥登录、证书登录、scp 命令、rsync 命令等。这些知识在这里有非常大的用处。&lt;/p&gt;

&lt;h5 id=&quot;公网服务器-1&quot;&gt;公网服务器&lt;/h5&gt;

&lt;p&gt;  为了保障公网服务器的安全性，SSH 代理所使用的用户应该是一个不提供 SHELL 的用户，也就是说某一个客户端使用代理用户和通过验证的私钥登录公网服务器后会被立即退出，而无法停留在公网服务器上。如果为 SSH 代理用户提供了 SHELL，那么任何一个使用该服务的用户都能在公网服务器上操作，这样极不安全，公网服务器甚至可能被破坏。如下可以配置一个有家目录但不允许登录的用户用于 SSH 代理。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建一个用户名为 nologin_user 的不允许登录但有家目录的用户&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;useradd &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /home/nologin_user &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /sbin/nologin nologin_user

&lt;span class=&quot;c&quot;&gt;# 添加客户端节点的公钥到 nologin_user 的认证文件中&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /home/nologin_user/.ssh
&lt;span class=&quot;nb&quot;&gt;sudo cat &lt;/span&gt;id_rsa.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/nologin_user/.ssh/authorized_keys
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; nologin_user:nologin_user /home/nologin_user/.ssh

&lt;span class=&quot;c&quot;&gt;# （可选，建议）配置 nologin_user 登录时不返回登录信息&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 在家目录创建一个名为 .hushlogin 的空文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /home/nologin_user/.hushlogin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;其他远程服务节点&quot;&gt;其他远程服务节点&lt;/h5&gt;

&lt;p&gt;  为了使用户可以访问其他远程服务节点，在其他远程服务节点上也需要添加客户端节点的公钥到认证文件中，如下所示。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /home/nologin_user/.ssh
&lt;span class=&quot;nb&quot;&gt;sudo cat &lt;/span&gt;id_rsa.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/&amp;lt;username&amp;gt;/.ssh/authorized_keys
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &amp;lt;username&amp;gt;:&amp;lt;username&amp;gt; /home/nologin_user/.ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;本地客户端节点&quot;&gt;本地客户端节点&lt;/h5&gt;

&lt;p&gt;  本地客户端节点为了可以一步直接登录其他远程服务节点，可以像以下方式一样配置本地 ssh。Linux 或者 Unix 的目录是 ~/.ssh/config，Windows 的目录也是 用户主目录/.ssh/config。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ~/.ssh/config&lt;/span&gt;

Host remote
    HostName 192.168.1.201
    User ubuntu
    Port 22
    ProxyJump ecs

Host ecs
    HostName 1.1.1.1
    User nologin_user
    Port 22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  做好以上配置之后，即可在终端使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh remote&lt;/code&gt; 命令一键无密码连接到其他远程服务节点。&lt;/p&gt;

&lt;h3 id=&quot;第二种方法&quot;&gt;第二种方法&lt;/h3&gt;

&lt;h4 id=&quot;提前准备-1&quot;&gt;提前准备&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;本地客户端节点、公网服务器、远程服务节点都已安装 Zerotier&lt;/li&gt;
  &lt;li&gt;本地客户端节点 Zerotier 规划 IP 为 172.18.0.11&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  如何安装 Zerotier此处不做赘述。&lt;/p&gt;

&lt;h4 id=&quot;配置互通&quot;&gt;配置互通&lt;/h4&gt;

&lt;p&gt;  由于在这种方案中本地客户端节点、公网服务器、远程服务节点之间要实现网络完全互通，所以公网服务器和远程服务节点这里都要配置允许路由转发，本地客户端节点和公网服务器都要配置访问其他远程节点的路由转发。&lt;/p&gt;

&lt;h5 id=&quot;远程服务节点-1&quot;&gt;远程服务节点&lt;/h5&gt;

&lt;p&gt;  和第一种方法中 配置路由转发-远程服务节点 操作一致。&lt;/p&gt;

&lt;h5 id=&quot;公网服务器-2&quot;&gt;公网服务器&lt;/h5&gt;

&lt;p&gt;  和第一种方法中 配置路由转发-远程服务节点 操作基本一致，并且添加第一种方法中 配置路由转发-公网服务器 操作。这里不同的是 Zerotier 虚拟网卡需要转发流量，而不是将 Zerotier 虚拟网卡的流量请求转发给主要上网网卡，因此应做如下操作：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 允许 zt0 虚拟网卡转发流量请求&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; zt0 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; conntrack &lt;span class=&quot;nt&quot;&gt;--ctstate&lt;/span&gt; RELATED,ESTABLISHED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;c&quot;&gt;# 接受一切网卡转发流量请求&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; FORWARD  ACCEPT
&lt;span class=&quot;c&quot;&gt;# 保存修改的 iptables 规则&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netfilter-persistent save
&lt;span class=&quot;c&quot;&gt;# 查看保存的 iptables 规则&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables-save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;本地客户端节点-1&quot;&gt;本地客户端节点&lt;/h5&gt;

&lt;p&gt;  和第一种方法中 配置路由转发-公网服务器 操作基本一致。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询本地客户端的网卡（Linux）&lt;/span&gt;
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;show
&lt;span class=&quot;c&quot;&gt;# 查询本地客户端的网卡（Mac）&lt;/span&gt;
ifconfig

&lt;span class=&quot;c&quot;&gt;# 假设正常上网网卡为 eth0，Zertiter 虚拟网卡为 zt0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 添加通往其他远程服务节点的请求交给已配置 Zerotier 的远程服务节点转发&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;route add &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; 192.168.1.0/24 gw 172.18.0.10 dev zt0

&lt;span class=&quot;c&quot;&gt;# 验证其他远程服务节点是否可达&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 假设某一个其他远程服务节点 IP 为 192.168.1.201&lt;/span&gt;
ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 10 192.168.1.201
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  网络互通之后可以直接使用 192.168.1.201 访问到其他远程服务节点，所以对应的 ssh 配置文件修改为以下内容。然后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh remote&lt;/code&gt; 命令直接访问其他远程服务节点。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ~/.ssh/config&lt;/span&gt;

Host remote
    HostName 192.168.1.201
    User ubuntu
    Port 22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结与讨论&quot;&gt;总结与讨论&lt;/h2&gt;

&lt;p&gt;  软件定义网络在进行异地组网中发挥了很大的作用，并且有一定的安全性保障。但其中也有一些不足之处，比如说两种方法都需要通过公网服务器到远程服务节点，如果要在远程服务节点和本地客户端节点之间上传下载较大的文章，网速仍然会受到公网服务器带宽的限制。如果有一台上下行比较对称、带宽充足的公网服务器，那么就很容易弥补这一不足。&lt;/p&gt;

&lt;p&gt;  另外，在使用公网服务器来作为中介去访问远程服务节点时，还是需要注意其安全性如何，毕竟公网服务器是可以被所有人访问到的，也是可以被所有人攻击到的。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jun 2021 14:30:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/remote-ssh.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/remote-ssh.html</guid>
        
        <category>多地</category>
        
        <category>组网</category>
        
        <category>互联</category>
        
        <category>Zerotier</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
  </channel>
</rss>
